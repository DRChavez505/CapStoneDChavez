
c:/Users/daniu/Documents/iot/CapStoneDChavez/CapStoneDChavez/CapStoneDChavez/target/4.0.2/argon/CapStoneDChavez.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004b54  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8b70  000b8b70  00008b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b8b94  000b8b94  00008b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b8b9c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000498  2003e108  000b8ba0  0001e108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000250  2003e5a0  2003e5a0  0002e5a0  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000b9038  000b9038  00029038  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9060  000b9060  00029060  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00129b7d  00000000  00000000  00029064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001496b  00000000  00000000  00152be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003c6fb  00000000  00000000  0016754c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003078  00000000  00000000  001a3c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a838  00000000  00000000  001a6cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003df3d  00000000  00000000  001b14f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00046771  00000000  00000000  001ef434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00137d85  00000000  00000000  00235ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008a94  00000000  00000000  0036d92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 ff5b 	bl	b7ee8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 ff63 	bl	b7f04 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e108 	.word	0x2003e108
   b4048:	000b8ba0 	.word	0x000b8ba0
   b404c:	2003e5a0 	.word	0x2003e5a0
   b4050:	2003e5a0 	.word	0x2003e5a0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 faa9 	bl	b65b4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8b48 	.word	0x000b8b48
   b407c:	000b8b6c 	.word	0x000b8b6c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b854 	b.w	b412c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f903 	bl	b4290 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 ba49 	b.w	b6524 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bf65 	b.w	b5f60 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bf63 	b.w	b5f60 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bf69 	b.w	b5f70 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 feae 	bl	b5e08 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5ac9 	.word	0x000b5ac9
   b40b4:	000b8074 	.word	0x000b8074

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f002 f9b6 	bl	b6446 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b40e4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40e6:	6984      	ldr	r4, [r0, #24]
   b40e8:	4b0a      	ldr	r3, [pc, #40]	; (b4114 <_ZN9TCPClientD1Ev+0x30>)
   b40ea:	6003      	str	r3, [r0, #0]
   b40ec:	4605      	mov	r5, r0
   b40ee:	b17c      	cbz	r4, b4110 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b40f0:	6863      	ldr	r3, [r4, #4]
   b40f2:	3b01      	subs	r3, #1
   b40f4:	6063      	str	r3, [r4, #4]
   b40f6:	b95b      	cbnz	r3, b4110 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b40f8:	6823      	ldr	r3, [r4, #0]
   b40fa:	4620      	mov	r0, r4
   b40fc:	689b      	ldr	r3, [r3, #8]
   b40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4100:	68a3      	ldr	r3, [r4, #8]
   b4102:	3b01      	subs	r3, #1
   b4104:	60a3      	str	r3, [r4, #8]
   b4106:	b91b      	cbnz	r3, b4110 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4108:	6823      	ldr	r3, [r4, #0]
   b410a:	4620      	mov	r0, r4
   b410c:	68db      	ldr	r3, [r3, #12]
   b410e:	4798      	blx	r3
   b4110:	4628      	mov	r0, r5
   b4112:	bd38      	pop	{r3, r4, r5, pc}
   b4114:	000b8900 	.word	0x000b8900

000b4118 <_ZN9TCPClientD0Ev>:
   b4118:	b510      	push	{r4, lr}
   b411a:	4604      	mov	r4, r0
   b411c:	f7ff ffe2 	bl	b40e4 <_ZN9TCPClientD1Ev>
   b4120:	4620      	mov	r0, r4
   b4122:	211c      	movs	r1, #28
   b4124:	f7ff ffb9 	bl	b409a <_ZdlPvj>
   b4128:	4620      	mov	r0, r4
   b412a:	bd10      	pop	{r4, pc}

000b412c <setup>:
bool RelayState;
bool offOn=1;
bool onOff=0;
// setup() runs once, when the device is first turned on.

void setup() {
   b412c:	b530      	push	{r4, r5, lr}
   b412e:	b095      	sub	sp, #84	; 0x54
  Serial.begin(9600);//initialize the serial port first
   b4130:	f002 fb62 	bl	b67f8 <_Z16_fetch_usbserialv>
   b4134:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4138:	f002 fb4e 	bl	b67d8 <_ZN9USBSerial5beginEl>
  Wire.begin();//start the I2c
   b413c:	f003 f912 	bl	b7364 <_Z19__fetch_global_Wirev>
   b4140:	f002 fc1c 	bl	b697c <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(0x68); 
   b4144:	f003 f90e 	bl	b7364 <_Z19__fetch_global_Wirev>
   b4148:	2168      	movs	r1, #104	; 0x68
   b414a:	f002 fc4d 	bl	b69e8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x6B);
   b414e:	f003 f909 	bl	b7364 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4152:	6803      	ldr	r3, [r0, #0]
   b4154:	216b      	movs	r1, #107	; 0x6b
   b4156:	689b      	ldr	r3, [r3, #8]
   b4158:	4798      	blx	r3
  Wire.write(0x00);
   b415a:	f003 f903 	bl	b7364 <_Z19__fetch_global_Wirev>
   b415e:	6803      	ldr	r3, [r0, #0]
   b4160:	2100      	movs	r1, #0
   b4162:	689b      	ldr	r3, [r3, #8]
   b4164:	4798      	blx	r3
  Wire.endTransmission(true);
   b4166:	f003 f8fd 	bl	b7364 <_Z19__fetch_global_Wirev>
   b416a:	2101      	movs	r1, #1
   b416c:	f002 fc3f 	bl	b69ee <_ZN7TwoWire15endTransmissionEh>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //start the display
   b4170:	223c      	movs	r2, #60	; 0x3c
   b4172:	4838      	ldr	r0, [pc, #224]	; (b4254 <setup+0x128>)
   b4174:	2102      	movs	r1, #2
   b4176:	f001 f9cb 	bl	b5510 <_ZN16Adafruit_SSD13065beginEhh>
  display.setRotation(rot);
   b417a:	4b37      	ldr	r3, [pc, #220]	; (b4258 <setup+0x12c>)
   b417c:	4835      	ldr	r0, [pc, #212]	; (b4254 <setup+0x128>)
   b417e:	7819      	ldrb	r1, [r3, #0]
   b4180:	f001 fc4e 	bl	b5a20 <_ZN12Adafruit_GFX11setRotationEh>
  display.display(); 
   b4184:	4833      	ldr	r0, [pc, #204]	; (b4254 <setup+0x128>)
   b4186:	f001 f953 	bl	b5430 <_ZN16Adafruit_SSD13067displayEv>
  delay(1000);
   b418a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b418e:	f002 f99d 	bl	b64cc <delay>
  display.setTextSize(1);
   b4192:	4830      	ldr	r0, [pc, #192]	; (b4254 <setup+0x128>)
   b4194:	2101      	movs	r1, #1
   b4196:	f001 fc39 	bl	b5a0c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b419a:	2101      	movs	r1, #1
   b419c:	482d      	ldr	r0, [pc, #180]	; (b4254 <setup+0x128>)
   b419e:	f001 fc3a 	bl	b5a16 <_ZN12Adafruit_GFX12setTextColorEt>
  display.display();
   b41a2:	482c      	ldr	r0, [pc, #176]	; (b4254 <setup+0x128>)
   b41a4:	f001 f944 	bl	b5430 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay(); 
   b41a8:	482a      	ldr	r0, [pc, #168]	; (b4254 <setup+0x128>)
   b41aa:	f001 f8e5 	bl	b5378 <_ZN16Adafruit_SSD130612clearDisplayEv>
  myStepper.setSpeed(5); //motor speed setting
   b41ae:	482b      	ldr	r0, [pc, #172]	; (b425c <setup+0x130>)
   b41b0:	2105      	movs	r1, #5
   b41b2:	f000 f973 	bl	b449c <_ZN7Stepper8setSpeedEl>
  pinMode(relayPin, OUTPUT);
   b41b6:	2101      	movs	r1, #1
   b41b8:	2005      	movs	r0, #5
   b41ba:	f003 f819 	bl	b71f0 <pinMode>
  Serial.printf("Basic test:");
   b41be:	f002 fb1b 	bl	b67f8 <_Z16_fetch_usbserialv>
   b41c2:	4927      	ldr	r1, [pc, #156]	; (b4260 <setup+0x134>)
   b41c4:	f7ff ff80 	bl	b40c8 <_ZN5Print6printfEPKcz>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b41c8:	2000      	movs	r0, #0
   b41ca:	f001 fc95 	bl	b5af8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b41ce:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b41d2:	4604      	mov	r4, r0
   b41d4:	2000      	movs	r0, #0
   b41d6:	f001 fc8f 	bl	b5af8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b41da:	1b00      	subs	r0, r0, r4
   b41dc:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b41e0:	42a8      	cmp	r0, r5
   b41e2:	f171 0300 	sbcs.w	r3, r1, #0
   b41e6:	d207      	bcs.n	b41f8 <setup+0xcc>
  waitFor(Serial.isConnected,15000);
   b41e8:	f002 fb06 	bl	b67f8 <_Z16_fetch_usbserialv>
   b41ec:	f002 faf8 	bl	b67e0 <_ZN9USBSerial11isConnectedEv>
   b41f0:	b910      	cbnz	r0, b41f8 <setup+0xcc>
            spark_process();
   b41f2:	f001 fea5 	bl	b5f40 <spark_process>
        while (_while() && !_condition()) {
   b41f6:	e7ed      	b.n	b41d4 <setup+0xa8>
   b41f8:	f002 fafe 	bl	b67f8 <_Z16_fetch_usbserialv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b41fc:	4c19      	ldr	r4, [pc, #100]	; (b4264 <setup+0x138>)
   b41fe:	f002 faef 	bl	b67e0 <_ZN9USBSerial11isConnectedEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4202:	2300      	movs	r3, #0
   b4204:	461a      	mov	r2, r3
   b4206:	4619      	mov	r1, r3
   b4208:	6860      	ldr	r0, [r4, #4]
   b420a:	f001 fe51 	bl	b5eb0 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b420e:	2238      	movs	r2, #56	; 0x38
   b4210:	2100      	movs	r1, #0
   b4212:	a806      	add	r0, sp, #24
   b4214:	f003 fe76 	bl	b7f04 <memset>
        creds.size = sizeof(creds);
   b4218:	234c      	movs	r3, #76	; 0x4c
   b421a:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b421c:	4b12      	ldr	r3, [pc, #72]	; (b4268 <setup+0x13c>)
   b421e:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b4220:	220a      	movs	r2, #10
   b4222:	2300      	movs	r3, #0
   b4224:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4228:	4619      	mov	r1, r3
   b422a:	aa01      	add	r2, sp, #4
   b422c:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b422e:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4230:	f001 fe5e 	bl	b5ef0 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b4234:	2300      	movs	r3, #0
   b4236:	6860      	ldr	r0, [r4, #4]
   b4238:	461a      	mov	r2, r3
   b423a:	4619      	mov	r1, r3
   b423c:	f001 fe18 	bl	b5e70 <network_connect>
        return network_connecting(*this, 0, NULL);
   b4240:	2200      	movs	r2, #0
   b4242:	6860      	ldr	r0, [r4, #4]
   b4244:	4611      	mov	r1, r2
   b4246:	f001 fe1b 	bl	b5e80 <network_connecting>
  WiFi.on();
  WiFi.setCredentials("IoTNetwork");
  WiFi.connect();
  while(WiFi.connecting());
   b424a:	2800      	cmp	r0, #0
   b424c:	d1f8      	bne.n	b4240 <setup+0x114>
 }
   b424e:	b015      	add	sp, #84	; 0x54
   b4250:	bd30      	pop	{r4, r5, pc}
   b4252:	bf00      	nop
   b4254:	2003e63c 	.word	0x2003e63c
   b4258:	2003e120 	.word	0x2003e120
   b425c:	2003e674 	.word	0x2003e674
   b4260:	000b8161 	.word	0x000b8161
   b4264:	2003e718 	.word	0x2003e718
   b4268:	000b816d 	.word	0x000b816d

000b426c <_Z12turnRelayOffv>:
   Serial.printf("activating pump %i\n",relayPin);
   switchON(relayPin);
   digitalWrite(relayPin, offOn);
}

void turnRelayOff()  {
   b426c:	b508      	push	{r3, lr}
   digitalWrite(relayPin, onOff);
   b426e:	4b06      	ldr	r3, [pc, #24]	; (b4288 <_Z12turnRelayOffv+0x1c>)
   b4270:	2005      	movs	r0, #5
   b4272:	7819      	ldrb	r1, [r3, #0]
   b4274:	f002 ffcd 	bl	b7212 <digitalWrite>
   Serial.printf("turning pump off %i\n",relayPin);
   b4278:	f002 fabe 	bl	b67f8 <_Z16_fetch_usbserialv>
   b427c:	4903      	ldr	r1, [pc, #12]	; (b428c <_Z12turnRelayOffv+0x20>)
   b427e:	2205      	movs	r2, #5
   b4280:	f7ff ff22 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b4284:	bd08      	pop	{r3, pc}
   b4286:	bf00      	nop
   b4288:	2003e6a0 	.word	0x2003e6a0
   b428c:	000b8178 	.word	0x000b8178

000b4290 <loop>:
void loop() {
   b4290:	b5f0      	push	{r4, r5, r6, r7, lr}
    status = bme.begin(0x76);
   b4292:	4838      	ldr	r0, [pc, #224]	; (b4374 <loop+0xe4>)
void loop() {
   b4294:	b087      	sub	sp, #28
    status = bme.begin(0x76);
   b4296:	2176      	movs	r1, #118	; 0x76
   b4298:	f000 fe8b 	bl	b4fb2 <_ZN15Adafruit_BME2805beginEh>
   b429c:	4b36      	ldr	r3, [pc, #216]	; (b4378 <loop+0xe8>)
   b429e:	7018      	strb	r0, [r3, #0]
    if (status == false)
   b42a0:	b928      	cbnz	r0, b42ae <loop+0x1e>
      Serial.printf("BME280 at address 0x%02X failed to start", 0x76);
   b42a2:	f002 faa9 	bl	b67f8 <_Z16_fetch_usbserialv>
   b42a6:	4935      	ldr	r1, [pc, #212]	; (b437c <loop+0xec>)
   b42a8:	2276      	movs	r2, #118	; 0x76
   b42aa:	f7ff ff0d 	bl	b40c8 <_ZN5Print6printfEPKcz>
      tempC = bme.readTemperature(); //deg C
   b42ae:	4831      	ldr	r0, [pc, #196]	; (b4374 <loop+0xe4>)
   b42b0:	4e33      	ldr	r6, [pc, #204]	; (b4380 <loop+0xf0>)
      pressPA = bme.readPressure();  //pascals
   b42b2:	4d34      	ldr	r5, [pc, #208]	; (b4384 <loop+0xf4>)
      humidRH = bme.readHumidity (); // %RH
   b42b4:	4c34      	ldr	r4, [pc, #208]	; (b4388 <loop+0xf8>)
      tempC = bme.readTemperature(); //deg C
   b42b6:	f000 fcd9 	bl	b4c6c <_ZN15Adafruit_BME28015readTemperatureEv>
      pressPA = bme.readPressure();  //pascals
   b42ba:	482e      	ldr	r0, [pc, #184]	; (b4374 <loop+0xe4>)
      tempC = bme.readTemperature(); //deg C
   b42bc:	ed86 0a00 	vstr	s0, [r6]
      pressPA = bme.readPressure();  //pascals
   b42c0:	f000 fd4e 	bl	b4d60 <_ZN15Adafruit_BME28012readPressureEv>
      humidRH = bme.readHumidity (); // %RH
   b42c4:	482b      	ldr	r0, [pc, #172]	; (b4374 <loop+0xe4>)
      pressPA = bme.readPressure();  //pascals
   b42c6:	ed85 0a00 	vstr	s0, [r5]
      humidRH = bme.readHumidity (); // %RH
   b42ca:	f000 fcff 	bl	b4ccc <_ZN15Adafruit_BME28012readHumidityEv>
   b42ce:	ed84 0a00 	vstr	s0, [r4]
      Serial.printf("Temp %0.1f\nHumidity %0.1f\nPressure %f0.1", tempC, humidRH, pressPA);
   b42d2:	f002 fa91 	bl	b67f8 <_Z16_fetch_usbserialv>
   b42d6:	4607      	mov	r7, r0
   b42d8:	6830      	ldr	r0, [r6, #0]
   b42da:	f003 fadf 	bl	b789c <__aeabi_f2d>
   b42de:	4602      	mov	r2, r0
   b42e0:	460b      	mov	r3, r1
   b42e2:	6828      	ldr	r0, [r5, #0]
   b42e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b42e8:	f003 fad8 	bl	b789c <__aeabi_f2d>
   b42ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b42f0:	6820      	ldr	r0, [r4, #0]
   b42f2:	f003 fad3 	bl	b789c <__aeabi_f2d>
   b42f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b42fa:	e9cd 0100 	strd	r0, r1, [sp]
   b42fe:	4923      	ldr	r1, [pc, #140]	; (b438c <loop+0xfc>)
   b4300:	4638      	mov	r0, r7
   b4302:	f7ff fee1 	bl	b40c8 <_ZN5Print6printfEPKcz>
      display.printf("Temp %0.1f\nHumidity %0.1f\nPressure %f0.1", tempC, humidRH, pressPA);
   b4306:	6830      	ldr	r0, [r6, #0]
   b4308:	f003 fac8 	bl	b789c <__aeabi_f2d>
   b430c:	4602      	mov	r2, r0
   b430e:	460b      	mov	r3, r1
   b4310:	6828      	ldr	r0, [r5, #0]
   b4312:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b4316:	f003 fac1 	bl	b789c <__aeabi_f2d>
   b431a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b431e:	6820      	ldr	r0, [r4, #0]
   b4320:	f003 fabc 	bl	b789c <__aeabi_f2d>
   b4324:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4328:	e9cd 0100 	strd	r0, r1, [sp]
   b432c:	4917      	ldr	r1, [pc, #92]	; (b438c <loop+0xfc>)
   b432e:	4818      	ldr	r0, [pc, #96]	; (b4390 <loop+0x100>)
   b4330:	f7ff feca 	bl	b40c8 <_ZN5Print6printfEPKcz>
      display.display();
   b4334:	4816      	ldr	r0, [pc, #88]	; (b4390 <loop+0x100>)
   b4336:	f001 f87b 	bl	b5430 <_ZN16Adafruit_SSD13067displayEv>
      delay(1000);
   b433a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b433e:	f002 f8c5 	bl	b64cc <delay>
      display.display();
   b4342:	4813      	ldr	r0, [pc, #76]	; (b4390 <loop+0x100>)
   b4344:	f001 f874 	bl	b5430 <_ZN16Adafruit_SSD13067displayEv>
    turnRelayOff();
   b4348:	f7ff ff90 	bl	b426c <_Z12turnRelayOffv>
    delay(5000);
   b434c:	f241 3088 	movw	r0, #5000	; 0x1388
   b4350:	f002 f8bc 	bl	b64cc <delay>
    myStepper.step(-2048);
   b4354:	490f      	ldr	r1, [pc, #60]	; (b4394 <loop+0x104>)
   b4356:	4810      	ldr	r0, [pc, #64]	; (b4398 <loop+0x108>)
   b4358:	f000 f972 	bl	b4640 <_ZN7Stepper4stepEi>
    delay(500);
   b435c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4360:	f002 f8b4 	bl	b64cc <delay>
    Serial.printf("Button is not pressed \n");
   b4364:	f002 fa48 	bl	b67f8 <_Z16_fetch_usbserialv>
   b4368:	490c      	ldr	r1, [pc, #48]	; (b439c <loop+0x10c>)
   b436a:	f7ff fead 	bl	b40c8 <_ZN5Print6printfEPKcz>
}
   b436e:	b007      	add	sp, #28
   b4370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4372:	bf00      	nop
   b4374:	2003e5f8 	.word	0x2003e5f8
   b4378:	2003e6a8 	.word	0x2003e6a8
   b437c:	000b818d 	.word	0x000b818d
   b4380:	2003e6ac 	.word	0x2003e6ac
   b4384:	2003e6a4 	.word	0x2003e6a4
   b4388:	2003e670 	.word	0x2003e670
   b438c:	000b81b6 	.word	0x000b81b6
   b4390:	2003e63c 	.word	0x2003e63c
   b4394:	fffff800 	.word	0xfffff800
   b4398:	2003e674 	.word	0x2003e674
   b439c:	000b81df 	.word	0x000b81df

000b43a0 <_GLOBAL__sub_I_hueOn>:
   b43a0:	b507      	push	{r0, r1, r2, lr}

//  Hue variables
bool hueOn;  // on/off
int hueBri;  // brightness value
long hueHue;  // hue value
String hueCmd;  // Hue command
   b43a2:	491d      	ldr	r1, [pc, #116]	; (b4418 <_GLOBAL__sub_I_hueOn+0x78>)
   b43a4:	481d      	ldr	r0, [pc, #116]	; (b441c <_GLOBAL__sub_I_hueOn+0x7c>)
   b43a6:	f001 ffd9 	bl	b635c <_ZN6StringC1EPK19__FlashStringHelper>
int HueYellow = 10000;
int HueGreen = 22500;
int HueBlue = 45000;
int HueIndigo = 47500;
int HueViolet = 50000;
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b43aa:	4a1d      	ldr	r2, [pc, #116]	; (b4420 <_GLOBAL__sub_I_hueOn+0x80>)
   b43ac:	4b1d      	ldr	r3, [pc, #116]	; (b4424 <_GLOBAL__sub_I_hueOn+0x84>)
   b43ae:	6812      	ldr	r2, [r2, #0]
   b43b0:	601a      	str	r2, [r3, #0]
   b43b2:	4a1d      	ldr	r2, [pc, #116]	; (b4428 <_GLOBAL__sub_I_hueOn+0x88>)

TCPClient HueClient;
   b43b4:	481d      	ldr	r0, [pc, #116]	; (b442c <_GLOBAL__sub_I_hueOn+0x8c>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b43b6:	6812      	ldr	r2, [r2, #0]
   b43b8:	605a      	str	r2, [r3, #4]
   b43ba:	4a1d      	ldr	r2, [pc, #116]	; (b4430 <_GLOBAL__sub_I_hueOn+0x90>)
   b43bc:	6812      	ldr	r2, [r2, #0]
   b43be:	609a      	str	r2, [r3, #8]
   b43c0:	4a1c      	ldr	r2, [pc, #112]	; (b4434 <_GLOBAL__sub_I_hueOn+0x94>)
   b43c2:	6812      	ldr	r2, [r2, #0]
   b43c4:	60da      	str	r2, [r3, #12]
   b43c6:	4a1c      	ldr	r2, [pc, #112]	; (b4438 <_GLOBAL__sub_I_hueOn+0x98>)
   b43c8:	6812      	ldr	r2, [r2, #0]
   b43ca:	611a      	str	r2, [r3, #16]
   b43cc:	4a1b      	ldr	r2, [pc, #108]	; (b443c <_GLOBAL__sub_I_hueOn+0x9c>)
   b43ce:	6812      	ldr	r2, [r2, #0]
   b43d0:	615a      	str	r2, [r3, #20]
   b43d2:	4a1b      	ldr	r2, [pc, #108]	; (b4440 <_GLOBAL__sub_I_hueOn+0xa0>)
   b43d4:	6812      	ldr	r2, [r2, #0]
   b43d6:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b43d8:	f002 fdc8 	bl	b6f6c <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b43dc:	4819      	ldr	r0, [pc, #100]	; (b4444 <_GLOBAL__sub_I_hueOn+0xa4>)
   b43de:	f002 fdc5 	bl	b6f6c <_ZN9TCPClientC1Ev>
Stepper myStepper(2048, D8, D7, D6, D5);
   b43e2:	2306      	movs	r3, #6
   b43e4:	2205      	movs	r2, #5
   b43e6:	e9cd 3200 	strd	r3, r2, [sp]
   b43ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b43ee:	2307      	movs	r3, #7
   b43f0:	2208      	movs	r2, #8
   b43f2:	4815      	ldr	r0, [pc, #84]	; (b4448 <_GLOBAL__sub_I_hueOn+0xa8>)
   b43f4:	f000 f830 	bl	b4458 <_ZN7StepperC1Eiiiii>
Adafruit_SSD1306 display(D3);
   b43f8:	2103      	movs	r1, #3
   b43fa:	4814      	ldr	r0, [pc, #80]	; (b444c <_GLOBAL__sub_I_hueOn+0xac>)
   b43fc:	f000 ffa6 	bl	b534c <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_BME280 bme;
   b4400:	4813      	ldr	r0, [pc, #76]	; (b4450 <_GLOBAL__sub_I_hueOn+0xb0>)
   b4402:	f000 f98f 	bl	b4724 <_ZN15Adafruit_BME280C1Ev>
  int _buttonPin;
  int _prevButtonState;

  public:
    Button(int buttonPin) {
      _buttonPin = buttonPin;
   b4406:	4b13      	ldr	r3, [pc, #76]	; (b4454 <_GLOBAL__sub_I_hueOn+0xb4>)
   b4408:	2004      	movs	r0, #4
      pinMode(_buttonPin,INPUT);
   b440a:	2100      	movs	r1, #0
      _buttonPin = buttonPin;
   b440c:	6018      	str	r0, [r3, #0]
   b440e:	b003      	add	sp, #12
   b4410:	f85d eb04 	ldr.w	lr, [sp], #4
      pinMode(_buttonPin,INPUT);
   b4414:	f002 beec 	b.w	b71f0 <pinMode>
   b4418:	000b81f6 	.word	0x000b81f6
   b441c:	2003e660 	.word	0x2003e660
   b4420:	2003e5d8 	.word	0x2003e5d8
   b4424:	2003e5bc 	.word	0x2003e5bc
   b4428:	2003e114 	.word	0x2003e114
   b442c:	2003e5a0 	.word	0x2003e5a0
   b4430:	2003e11c 	.word	0x2003e11c
   b4434:	2003e10c 	.word	0x2003e10c
   b4438:	2003e108 	.word	0x2003e108
   b443c:	2003e110 	.word	0x2003e110
   b4440:	2003e118 	.word	0x2003e118
   b4444:	2003e5dc 	.word	0x2003e5dc
   b4448:	2003e674 	.word	0x2003e674
   b444c:	2003e63c 	.word	0x2003e63c
   b4450:	2003e5f8 	.word	0x2003e5f8
   b4454:	2003e6b0 	.word	0x2003e6b0

000b4458 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b4458:	b538      	push	{r3, r4, r5, lr}
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
   b445a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  this->motor_pin_3 = motor_pin_3;
   b445e:	9b04      	ldr	r3, [sp, #16]
   b4460:	61c3      	str	r3, [r0, #28]
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b4462:	4604      	mov	r4, r0
  this->motor_pin_4 = motor_pin_4;
   b4464:	9b05      	ldr	r3, [sp, #20]
   b4466:	6203      	str	r3, [r0, #32]
  this->step_number = 0;    // which step the motor is on
   b4468:	2500      	movs	r5, #0
   b446a:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
   b446c:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
   b446e:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
   b4470:	6081      	str	r1, [r0, #8]

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
   b4472:	b290      	uxth	r0, r2
   b4474:	2101      	movs	r1, #1
   b4476:	f002 febb 	bl	b71f0 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
   b447a:	8b20      	ldrh	r0, [r4, #24]
   b447c:	2101      	movs	r1, #1
   b447e:	f002 feb7 	bl	b71f0 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
   b4482:	8ba0      	ldrh	r0, [r4, #28]
   b4484:	2101      	movs	r1, #1
   b4486:	f002 feb3 	bl	b71f0 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
   b448a:	8c20      	ldrh	r0, [r4, #32]
   b448c:	2101      	movs	r1, #1
   b448e:	f002 feaf 	bl	b71f0 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
   b4492:	2304      	movs	r3, #4
  this->motor_pin_5 = 0;
   b4494:	6265      	str	r5, [r4, #36]	; 0x24
  this->pin_count = 4;
   b4496:	60e3      	str	r3, [r4, #12]
}
   b4498:	4620      	mov	r0, r4
   b449a:	bd38      	pop	{r3, r4, r5, pc}

000b449c <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
   b449c:	6882      	ldr	r2, [r0, #8]
   b449e:	4b03      	ldr	r3, [pc, #12]	; (b44ac <_ZN7Stepper8setSpeedEl+0x10>)
   b44a0:	fb93 f3f2 	sdiv	r3, r3, r2
   b44a4:	fb93 f1f1 	sdiv	r1, r3, r1
   b44a8:	6041      	str	r1, [r0, #4]
}
   b44aa:	4770      	bx	lr
   b44ac:	03938700 	.word	0x03938700

000b44b0 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
   b44b0:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
   b44b2:	68c3      	ldr	r3, [r0, #12]
   b44b4:	2b02      	cmp	r3, #2
{
   b44b6:	4604      	mov	r4, r0
   b44b8:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
   b44ba:	d10d      	bne.n	b44d8 <_ZN7Stepper9stepMotorEi+0x28>
    switch (thisStep) {
   b44bc:	2903      	cmp	r1, #3
   b44be:	d80b      	bhi.n	b44d8 <_ZN7Stepper9stepMotorEi+0x28>
   b44c0:	e8df f001 	tbb	[pc, r1]
   b44c4:	1b151302 	.word	0x1b151302
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
   b44c8:	2100      	movs	r1, #0
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
   b44ca:	8aa0      	ldrh	r0, [r4, #20]
   b44cc:	f002 fea1 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b44d0:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b44d2:	8b20      	ldrh	r0, [r4, #24]
   b44d4:	f002 fe9d 	bl	b7212 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
   b44d8:	68e3      	ldr	r3, [r4, #12]
   b44da:	2b04      	cmp	r3, #4
   b44dc:	d11f      	bne.n	b451e <_ZN7Stepper9stepMotorEi+0x6e>
    switch (thisStep) {
   b44de:	2d03      	cmp	r5, #3
   b44e0:	d81d      	bhi.n	b451e <_ZN7Stepper9stepMotorEi+0x6e>
   b44e2:	e8df f005 	tbb	[pc, r5]
   b44e6:	2a0c      	.short	0x2a0c
   b44e8:	3e30      	.short	0x3e30
        digitalWrite(motor_pin_1, HIGH);
   b44ea:	2101      	movs	r1, #1
   b44ec:	e7ed      	b.n	b44ca <_ZN7Stepper9stepMotorEi+0x1a>
        digitalWrite(motor_pin_1, HIGH);
   b44ee:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b44f0:	8aa0      	ldrh	r0, [r4, #20]
   b44f2:	f002 fe8e 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b44f6:	2100      	movs	r1, #0
   b44f8:	e7eb      	b.n	b44d2 <_ZN7Stepper9stepMotorEi+0x22>
        digitalWrite(motor_pin_1, LOW);
   b44fa:	2100      	movs	r1, #0
   b44fc:	e7f8      	b.n	b44f0 <_ZN7Stepper9stepMotorEi+0x40>
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
   b44fe:	2101      	movs	r1, #1
   b4500:	8aa0      	ldrh	r0, [r4, #20]
   b4502:	f002 fe86 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4506:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, HIGH);
   b4508:	8b20      	ldrh	r0, [r4, #24]
   b450a:	f002 fe82 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b450e:	2101      	movs	r1, #1
   b4510:	8ba0      	ldrh	r0, [r4, #28]
   b4512:	f002 fe7e 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4516:	2100      	movs	r1, #0
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
   b4518:	8c20      	ldrh	r0, [r4, #32]
   b451a:	f002 fe7a 	bl	b7212 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
   b451e:	68e3      	ldr	r3, [r4, #12]
   b4520:	2b05      	cmp	r3, #5
   b4522:	f040 808c 	bne.w	b463e <_ZN7Stepper9stepMotorEi+0x18e>
    switch (thisStep) {
   b4526:	2d09      	cmp	r5, #9
   b4528:	f200 8089 	bhi.w	b463e <_ZN7Stepper9stepMotorEi+0x18e>
   b452c:	e8df f005 	tbb	[pc, r5]
   b4530:	4937291f 	.word	0x4937291f
   b4534:	7167615f 	.word	0x7167615f
   b4538:	857f      	.short	0x857f
        digitalWrite(motor_pin_1, LOW);
   b453a:	2100      	movs	r1, #0
   b453c:	8aa0      	ldrh	r0, [r4, #20]
   b453e:	f002 fe68 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4542:	2101      	movs	r1, #1
   b4544:	e7e0      	b.n	b4508 <_ZN7Stepper9stepMotorEi+0x58>
        digitalWrite(motor_pin_1, LOW);
   b4546:	2100      	movs	r1, #0
   b4548:	8aa0      	ldrh	r0, [r4, #20]
   b454a:	f002 fe62 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b454e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b4550:	8b20      	ldrh	r0, [r4, #24]
   b4552:	f002 fe5e 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4556:	2100      	movs	r1, #0
   b4558:	8ba0      	ldrh	r0, [r4, #28]
   b455a:	f002 fe5a 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b455e:	2101      	movs	r1, #1
   b4560:	e7da      	b.n	b4518 <_ZN7Stepper9stepMotorEi+0x68>
        digitalWrite(motor_pin_1, HIGH);
   b4562:	2101      	movs	r1, #1
   b4564:	8aa0      	ldrh	r0, [r4, #20]
   b4566:	f002 fe54 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b456a:	2100      	movs	r1, #0
   b456c:	e7f0      	b.n	b4550 <_ZN7Stepper9stepMotorEi+0xa0>
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
   b456e:	2100      	movs	r1, #0
   b4570:	8aa0      	ldrh	r0, [r4, #20]
   b4572:	f002 fe4e 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4576:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b4578:	8b20      	ldrh	r0, [r4, #24]
   b457a:	f002 fe4a 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b457e:	2101      	movs	r1, #1
   b4580:	e008      	b.n	b4594 <_ZN7Stepper9stepMotorEi+0xe4>
        digitalWrite(motor_pin_1, LOW);
   b4582:	8aa0      	ldrh	r0, [r4, #20]
   b4584:	2100      	movs	r1, #0
   b4586:	f002 fe44 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b458a:	2101      	movs	r1, #1
   b458c:	8b20      	ldrh	r0, [r4, #24]
   b458e:	f002 fe40 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4592:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b4594:	8ba0      	ldrh	r0, [r4, #28]
   b4596:	f002 fe3c 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b459a:	2100      	movs	r1, #0
   b459c:	e00c      	b.n	b45b8 <_ZN7Stepper9stepMotorEi+0x108>
        digitalWrite(motor_pin_1, LOW);
   b459e:	8aa0      	ldrh	r0, [r4, #20]
   b45a0:	2100      	movs	r1, #0
   b45a2:	f002 fe36 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b45a6:	8b20      	ldrh	r0, [r4, #24]
   b45a8:	2101      	movs	r1, #1
   b45aa:	f002 fe32 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b45ae:	2100      	movs	r1, #0
   b45b0:	8ba0      	ldrh	r0, [r4, #28]
   b45b2:	f002 fe2e 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b45b6:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b45b8:	8c20      	ldrh	r0, [r4, #32]
   b45ba:	f002 fe2a 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
   b45be:	2101      	movs	r1, #1
   b45c0:	e010      	b.n	b45e4 <_ZN7Stepper9stepMotorEi+0x134>
        digitalWrite(motor_pin_1, LOW);
   b45c2:	2100      	movs	r1, #0
        digitalWrite(motor_pin_1, HIGH);
   b45c4:	8aa0      	ldrh	r0, [r4, #20]
   b45c6:	f002 fe24 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b45ca:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b45cc:	8b20      	ldrh	r0, [r4, #24]
   b45ce:	f002 fe20 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b45d2:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b45d4:	8ba0      	ldrh	r0, [r4, #28]
   b45d6:	f002 fe1c 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b45da:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b45dc:	8c20      	ldrh	r0, [r4, #32]
   b45de:	f002 fe18 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
   b45e2:	2100      	movs	r1, #0
        digitalWrite(motor_pin_5, HIGH);
   b45e4:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
   b45e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(motor_pin_5, HIGH);
   b45ea:	f002 be12 	b.w	b7212 <digitalWrite>
        digitalWrite(motor_pin_1, HIGH);
   b45ee:	2101      	movs	r1, #1
   b45f0:	e7e8      	b.n	b45c4 <_ZN7Stepper9stepMotorEi+0x114>
        digitalWrite(motor_pin_1, HIGH);
   b45f2:	2101      	movs	r1, #1
   b45f4:	8aa0      	ldrh	r0, [r4, #20]
   b45f6:	f002 fe0c 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b45fa:	2100      	movs	r1, #0
   b45fc:	e7e6      	b.n	b45cc <_ZN7Stepper9stepMotorEi+0x11c>
        digitalWrite(motor_pin_1, HIGH);
   b45fe:	8aa0      	ldrh	r0, [r4, #20]
   b4600:	2101      	movs	r1, #1
   b4602:	f002 fe06 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4606:	2100      	movs	r1, #0
   b4608:	8b20      	ldrh	r0, [r4, #24]
   b460a:	f002 fe02 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b460e:	2101      	movs	r1, #1
   b4610:	e7e0      	b.n	b45d4 <_ZN7Stepper9stepMotorEi+0x124>
        digitalWrite(motor_pin_1, HIGH);
   b4612:	8aa0      	ldrh	r0, [r4, #20]
   b4614:	2101      	movs	r1, #1
   b4616:	f002 fdfc 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b461a:	8b20      	ldrh	r0, [r4, #24]
   b461c:	2100      	movs	r1, #0
   b461e:	f002 fdf8 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4622:	2101      	movs	r1, #1
   b4624:	8ba0      	ldrh	r0, [r4, #28]
   b4626:	f002 fdf4 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b462a:	2100      	movs	r1, #0
   b462c:	e7d6      	b.n	b45dc <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_1, HIGH);
   b462e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4630:	8aa0      	ldrh	r0, [r4, #20]
   b4632:	f002 fdee 	bl	b7212 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4636:	2100      	movs	r1, #0
   b4638:	e79e      	b.n	b4578 <_ZN7Stepper9stepMotorEi+0xc8>
        digitalWrite(motor_pin_1, LOW);
   b463a:	2100      	movs	r1, #0
   b463c:	e7f8      	b.n	b4630 <_ZN7Stepper9stepMotorEi+0x180>
}
   b463e:	bd38      	pop	{r3, r4, r5, pc}

000b4640 <_ZN7Stepper4stepEi>:
{
   b4640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (steps_to_move > 0) { this->direction = 1; }
   b4642:	2900      	cmp	r1, #0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b4644:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
{
   b4648:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b464a:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
  if (steps_to_move > 0) { this->direction = 1; }
   b464e:	dd24      	ble.n	b469a <_ZN7Stepper4stepEi+0x5a>
   b4650:	2301      	movs	r3, #1
   b4652:	6023      	str	r3, [r4, #0]
          this->step_number = 0;
   b4654:	2700      	movs	r7, #0
        stepMotor(this->step_number % 10);
   b4656:	260a      	movs	r6, #10
  while (steps_left > 0)
   b4658:	b385      	cbz	r5, b46bc <_ZN7Stepper4stepEi+0x7c>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b465a:	f001 fa3d 	bl	b5ad8 <HAL_Timer_Get_Micro_Seconds>
    if (now - this->last_step_time >= this->step_delay)
   b465e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4660:	6862      	ldr	r2, [r4, #4]
   b4662:	1ac3      	subs	r3, r0, r3
   b4664:	4293      	cmp	r3, r2
   b4666:	d3f7      	bcc.n	b4658 <_ZN7Stepper4stepEi+0x18>
      if (this->direction == 1)
   b4668:	6822      	ldr	r2, [r4, #0]
        this->step_number++;
   b466a:	6923      	ldr	r3, [r4, #16]
      this->last_step_time = now;
   b466c:	62a0      	str	r0, [r4, #40]	; 0x28
      if (this->direction == 1)
   b466e:	2a01      	cmp	r2, #1
   b4670:	d116      	bne.n	b46a0 <_ZN7Stepper4stepEi+0x60>
        if (this->step_number == this->number_of_steps) {
   b4672:	68a2      	ldr	r2, [r4, #8]
        this->step_number++;
   b4674:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
   b4676:	4293      	cmp	r3, r2
          this->step_number = 0;
   b4678:	bf08      	it	eq
   b467a:	463b      	moveq	r3, r7
        this->step_number--;
   b467c:	6123      	str	r3, [r4, #16]
      if (this->pin_count == 5)
   b467e:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
   b4682:	2b05      	cmp	r3, #5
      steps_left--;
   b4684:	f105 35ff 	add.w	r5, r5, #4294967295
      if (this->pin_count == 5)
   b4688:	d110      	bne.n	b46ac <_ZN7Stepper4stepEi+0x6c>
        stepMotor(this->step_number % 10);
   b468a:	fb91 f3f6 	sdiv	r3, r1, r6
   b468e:	fb06 1113 	mls	r1, r6, r3, r1
        stepMotor(this->step_number % 4);
   b4692:	4620      	mov	r0, r4
   b4694:	f7ff ff0c 	bl	b44b0 <_ZN7Stepper9stepMotorEi>
   b4698:	e7de      	b.n	b4658 <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
   b469a:	d0db      	beq.n	b4654 <_ZN7Stepper4stepEi+0x14>
   b469c:	2300      	movs	r3, #0
   b469e:	e7d8      	b.n	b4652 <_ZN7Stepper4stepEi+0x12>
        if (this->step_number == 0) {
   b46a0:	b90b      	cbnz	r3, b46a6 <_ZN7Stepper4stepEi+0x66>
          this->step_number = this->number_of_steps;
   b46a2:	68a3      	ldr	r3, [r4, #8]
   b46a4:	6123      	str	r3, [r4, #16]
        this->step_number--;
   b46a6:	6923      	ldr	r3, [r4, #16]
   b46a8:	3b01      	subs	r3, #1
   b46aa:	e7e7      	b.n	b467c <_ZN7Stepper4stepEi+0x3c>
        stepMotor(this->step_number % 4);
   b46ac:	424b      	negs	r3, r1
   b46ae:	f003 0303 	and.w	r3, r3, #3
   b46b2:	f001 0103 	and.w	r1, r1, #3
   b46b6:	bf58      	it	pl
   b46b8:	4259      	negpl	r1, r3
   b46ba:	e7ea      	b.n	b4692 <_ZN7Stepper4stepEi+0x52>
}
   b46bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b46be <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b46be:	4770      	bx	lr

000b46c0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b46c0:	b510      	push	{r4, lr}
  }
   b46c2:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b46c4:	4604      	mov	r4, r0
  }
   b46c6:	f7ff fce8 	bl	b409a <_ZdlPvj>
   b46ca:	4620      	mov	r0, r4
   b46cc:	bd10      	pop	{r4, pc}
	...

000b46d0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b46d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b46d2:	4604      	mov	r4, r0
   b46d4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b46d6:	7922      	ldrb	r2, [r4, #4]
   b46d8:	68a3      	ldr	r3, [r4, #8]
   b46da:	b132      	cbz	r2, b46ea <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b46dc:	b9a3      	cbnz	r3, b4708 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b46de:	490b      	ldr	r1, [pc, #44]	; (b470c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b46e0:	b002      	add	sp, #8
   b46e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b46e6:	f001 be7d 	b.w	b63e4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b46ea:	4a09      	ldr	r2, [pc, #36]	; (b4710 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b46ec:	7b26      	ldrb	r6, [r4, #12]
   b46ee:	4d09      	ldr	r5, [pc, #36]	; (b4714 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b46f0:	4909      	ldr	r1, [pc, #36]	; (b4718 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b46f2:	7b64      	ldrb	r4, [r4, #13]
   b46f4:	2e01      	cmp	r6, #1
   b46f6:	bf18      	it	ne
   b46f8:	4629      	movne	r1, r5
   b46fa:	e9cd 1400 	strd	r1, r4, [sp]
   b46fe:	4907      	ldr	r1, [pc, #28]	; (b471c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4700:	f7ff fce2 	bl	b40c8 <_ZN5Print6printfEPKcz>
  }
   b4704:	b002      	add	sp, #8
   b4706:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4708:	4a05      	ldr	r2, [pc, #20]	; (b4720 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b470a:	e7ef      	b.n	b46ec <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b470c:	000b8208 	.word	0x000b8208
   b4710:	000b81f6 	.word	0x000b81f6
   b4714:	000b8204 	.word	0x000b8204
   b4718:	000b8200 	.word	0x000b8200
   b471c:	000b821e 	.word	0x000b821e
   b4720:	000b81f7 	.word	0x000b81f7

000b4724 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4724:	f04f 33ff 	mov.w	r3, #4294967295
   b4728:	6103      	str	r3, [r0, #16]
{ }
   b472a:	4770      	bx	lr

000b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b472c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b472e:	4c0b      	ldr	r4, [pc, #44]	; (b475c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4730:	7821      	ldrb	r1, [r4, #0]
   b4732:	f3bf 8f5b 	dmb	ish
   b4736:	f011 0101 	ands.w	r1, r1, #1
   b473a:	d10b      	bne.n	b4754 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b473c:	4620      	mov	r0, r4
   b473e:	9101      	str	r1, [sp, #4]
   b4740:	f7ff fcba 	bl	b40b8 <__cxa_guard_acquire>
   b4744:	9901      	ldr	r1, [sp, #4]
   b4746:	b128      	cbz	r0, b4754 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4748:	4805      	ldr	r0, [pc, #20]	; (b4760 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b474a:	f001 fc85 	bl	b6058 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b474e:	4620      	mov	r0, r4
   b4750:	f7ff fcb7 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4754:	4802      	ldr	r0, [pc, #8]	; (b4760 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4756:	b002      	add	sp, #8
   b4758:	bd10      	pop	{r4, pc}
   b475a:	bf00      	nop
   b475c:	2003e6b8 	.word	0x2003e6b8
   b4760:	2003e6bc 	.word	0x2003e6bc

000b4764 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4764:	b508      	push	{r3, lr}
        instance().endTransaction();
   b4766:	f7ff ffe1 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b476a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b476e:	f001 bcb9 	b.w	b60e4 <_ZN8SPIClass14endTransactionEv>

000b4772 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b4772:	b507      	push	{r0, r1, r2, lr}
   b4774:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b4776:	f7ff ffd9 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b477a:	9901      	ldr	r1, [sp, #4]
    }
   b477c:	b003      	add	sp, #12
   b477e:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b4782:	f001 bcc9 	b.w	b6118 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b4786 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b478a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b478e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4790:	4605      	mov	r5, r0
   b4792:	460f      	mov	r7, r1
    if (_sck == -1)
   b4794:	d106      	bne.n	b47a4 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4796:	f7ff ffc9 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b479a:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b479c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b47a0:	f001 bd80 	b.w	b62a4 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b47a4:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b47a6:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b47a8:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b47ac:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b47b0:	2100      	movs	r1, #0
   b47b2:	b280      	uxth	r0, r0
   b47b4:	f002 fd2d 	bl	b7212 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b47b8:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b47bc:	fa08 f106 	lsl.w	r1, r8, r6
   b47c0:	4039      	ands	r1, r7
   b47c2:	b280      	uxth	r0, r0
   b47c4:	f002 fd25 	bl	b7212 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b47c8:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b47cc:	2101      	movs	r1, #1
   b47ce:	b280      	uxth	r0, r0
   b47d0:	f002 fd1f 	bl	b7212 <digitalWrite>
        if (digitalRead(_miso))
   b47d4:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b47d8:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b47da:	b280      	uxth	r0, r0
        reply <<= 1;
   b47dc:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b47de:	f002 fd31 	bl	b7244 <digitalRead>
   b47e2:	b108      	cbz	r0, b47e8 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b47e4:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b47e8:	3e01      	subs	r6, #1
   b47ea:	d2df      	bcs.n	b47ac <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b47ec:	4620      	mov	r0, r4
   b47ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b47f4 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b47f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b47f6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b47fa:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b47fc:	4604      	mov	r4, r0
   b47fe:	460e      	mov	r6, r1
   b4800:	4615      	mov	r5, r2
    if (_cs == -1) {
   b4802:	d113      	bne.n	b482c <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4804:	7901      	ldrb	r1, [r0, #4]
   b4806:	6800      	ldr	r0, [r0, #0]
   b4808:	f002 f8ea 	bl	b69e0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b480c:	6820      	ldr	r0, [r4, #0]
   b480e:	6803      	ldr	r3, [r0, #0]
   b4810:	4631      	mov	r1, r6
   b4812:	689b      	ldr	r3, [r3, #8]
   b4814:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4816:	6820      	ldr	r0, [r4, #0]
   b4818:	6803      	ldr	r3, [r0, #0]
   b481a:	4629      	mov	r1, r5
   b481c:	689b      	ldr	r3, [r3, #8]
   b481e:	4798      	blx	r3
        _wire -> endTransmission();
   b4820:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b4822:	b004      	add	sp, #16
   b4824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4828:	f002 b8e5 	b.w	b69f6 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b482c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4830:	3301      	adds	r3, #1
   b4832:	d10c      	bne.n	b484e <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4834:	4b16      	ldr	r3, [pc, #88]	; (b4890 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4836:	9300      	str	r3, [sp, #0]
   b4838:	2300      	movs	r3, #0
   b483a:	f88d 3004 	strb.w	r3, [sp, #4]
   b483e:	4b15      	ldr	r3, [pc, #84]	; (b4894 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4840:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4842:	4668      	mov	r0, sp
   b4844:	2301      	movs	r3, #1
   b4846:	f8ad 300c 	strh.w	r3, [sp, #12]
   b484a:	f7ff ff92 	bl	b4772 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b484e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4852:	2100      	movs	r1, #0
   b4854:	b280      	uxth	r0, r0
   b4856:	f002 fcdc 	bl	b7212 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b485a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b485e:	4620      	mov	r0, r4
   b4860:	f7ff ff91 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4864:	4629      	mov	r1, r5
   b4866:	4620      	mov	r0, r4
   b4868:	f7ff ff8d 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b486c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4870:	2101      	movs	r1, #1
   b4872:	b280      	uxth	r0, r0
   b4874:	f002 fccd 	bl	b7212 <digitalWrite>
    if (_sck == -1)
   b4878:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b487c:	3301      	adds	r3, #1
   b487e:	d104      	bne.n	b488a <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4880:	b004      	add	sp, #16
   b4882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b4886:	f7ff bf6d 	b.w	b4764 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b488a:	b004      	add	sp, #16
   b488c:	bd70      	pop	{r4, r5, r6, pc}
   b488e:	bf00      	nop
   b4890:	000b8244 	.word	0x000b8244
   b4894:	0007a120 	.word	0x0007a120

000b4898 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b4898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b489a:	00db      	lsls	r3, r3, #3
   b489c:	f002 0207 	and.w	r2, r2, #7
   b48a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b48a4:	4313      	orrs	r3, r2
   b48a6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b48aa:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b48ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b48b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b48b6:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b48ba:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b48be:	f366 1347 	bfi	r3, r6, #5, #3
   b48c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b48c6:	00ed      	lsls	r5, r5, #3
   b48c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b48cc:	f007 0707 	and.w	r7, r7, #7
   b48d0:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b48d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b48d8:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b48da:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b48dc:	431d      	orrs	r5, r3
   b48de:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b48e2:	f006 0207 	and.w	r2, r6, #7
   b48e6:	21f2      	movs	r1, #242	; 0xf2
   b48e8:	f7ff ff84 	bl	b47f4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b48ec:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b48f0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b48f4:	f002 0107 	and.w	r1, r2, #7
   b48f8:	009b      	lsls	r3, r3, #2
   b48fa:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b48fe:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4902:	4620      	mov	r0, r4
   b4904:	21f5      	movs	r1, #245	; 0xf5
   b4906:	f7ff ff75 	bl	b47f4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b490a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b490e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4912:	f002 0107 	and.w	r1, r2, #7
   b4916:	009b      	lsls	r3, r3, #2
   b4918:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b491c:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4920:	4620      	mov	r0, r4
   b4922:	21f4      	movs	r1, #244	; 0xf4
}
   b4924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4928:	f7ff bf64 	b.w	b47f4 <_ZN15Adafruit_BME2806write8Ehh>

000b492c <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b492c:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b492e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4932:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4934:	b085      	sub	sp, #20
   b4936:	4604      	mov	r4, r0
   b4938:	460d      	mov	r5, r1
    if (_cs == -1) {
   b493a:	d118      	bne.n	b496e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b493c:	7901      	ldrb	r1, [r0, #4]
   b493e:	6800      	ldr	r0, [r0, #0]
   b4940:	f002 f84e 	bl	b69e0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4944:	6820      	ldr	r0, [r4, #0]
   b4946:	6803      	ldr	r3, [r0, #0]
   b4948:	4629      	mov	r1, r5
   b494a:	689b      	ldr	r3, [r3, #8]
   b494c:	4798      	blx	r3
        _wire -> endTransmission();
   b494e:	6820      	ldr	r0, [r4, #0]
   b4950:	f002 f851 	bl	b69f6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4954:	7921      	ldrb	r1, [r4, #4]
   b4956:	6820      	ldr	r0, [r4, #0]
   b4958:	2201      	movs	r2, #1
   b495a:	f002 f83e 	bl	b69da <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b495e:	6820      	ldr	r0, [r4, #0]
   b4960:	6803      	ldr	r3, [r0, #0]
   b4962:	695b      	ldr	r3, [r3, #20]
   b4964:	4798      	blx	r3
   b4966:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4968:	4628      	mov	r0, r5
   b496a:	b005      	add	sp, #20
   b496c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b496e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4972:	3301      	adds	r3, #1
   b4974:	d10c      	bne.n	b4990 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4976:	4b15      	ldr	r3, [pc, #84]	; (b49cc <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4978:	9300      	str	r3, [sp, #0]
   b497a:	2300      	movs	r3, #0
   b497c:	f88d 3004 	strb.w	r3, [sp, #4]
   b4980:	4b13      	ldr	r3, [pc, #76]	; (b49d0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4982:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4984:	4668      	mov	r0, sp
   b4986:	2301      	movs	r3, #1
   b4988:	f8ad 300c 	strh.w	r3, [sp, #12]
   b498c:	f7ff fef1 	bl	b4772 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4990:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4994:	2100      	movs	r1, #0
   b4996:	b280      	uxth	r0, r0
   b4998:	f002 fc3b 	bl	b7212 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b499c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b49a0:	4620      	mov	r0, r4
   b49a2:	f7ff fef0 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b49a6:	2100      	movs	r1, #0
   b49a8:	4620      	mov	r0, r4
   b49aa:	f7ff feec 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
   b49ae:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b49b0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49b4:	2101      	movs	r1, #1
   b49b6:	b280      	uxth	r0, r0
   b49b8:	f002 fc2b 	bl	b7212 <digitalWrite>
        if (_sck == -1)
   b49bc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b49c0:	3301      	adds	r3, #1
   b49c2:	d1d1      	bne.n	b4968 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b49c4:	f7ff fece 	bl	b4764 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b49c8:	e7ce      	b.n	b4968 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b49ca:	bf00      	nop
   b49cc:	000b8244 	.word	0x000b8244
   b49d0:	0007a120 	.word	0x0007a120

000b49d4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b49d4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b49d6:	21f3      	movs	r1, #243	; 0xf3
   b49d8:	f7ff ffa8 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b49dc:	f000 0001 	and.w	r0, r0, #1
   b49e0:	bd08      	pop	{r3, pc}
	...

000b49e4 <_ZN15Adafruit_BME2806read16Eh>:
{
   b49e4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b49e6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b49ea:	3301      	adds	r3, #1
{
   b49ec:	b085      	sub	sp, #20
   b49ee:	4604      	mov	r4, r0
   b49f0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b49f2:	d11f      	bne.n	b4a34 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b49f4:	7901      	ldrb	r1, [r0, #4]
   b49f6:	6800      	ldr	r0, [r0, #0]
   b49f8:	f001 fff2 	bl	b69e0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b49fc:	6820      	ldr	r0, [r4, #0]
   b49fe:	6803      	ldr	r3, [r0, #0]
   b4a00:	4629      	mov	r1, r5
   b4a02:	689b      	ldr	r3, [r3, #8]
   b4a04:	4798      	blx	r3
        _wire -> endTransmission();
   b4a06:	6820      	ldr	r0, [r4, #0]
   b4a08:	f001 fff5 	bl	b69f6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4a0c:	7921      	ldrb	r1, [r4, #4]
   b4a0e:	6820      	ldr	r0, [r4, #0]
   b4a10:	2202      	movs	r2, #2
   b4a12:	f001 ffe2 	bl	b69da <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4a16:	6820      	ldr	r0, [r4, #0]
   b4a18:	6803      	ldr	r3, [r0, #0]
   b4a1a:	695b      	ldr	r3, [r3, #20]
   b4a1c:	4798      	blx	r3
   b4a1e:	4605      	mov	r5, r0
   b4a20:	6820      	ldr	r0, [r4, #0]
   b4a22:	6803      	ldr	r3, [r0, #0]
   b4a24:	695b      	ldr	r3, [r3, #20]
   b4a26:	4798      	blx	r3
   b4a28:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a2c:	b285      	uxth	r5, r0
}
   b4a2e:	4628      	mov	r0, r5
   b4a30:	b005      	add	sp, #20
   b4a32:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4a34:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a38:	3301      	adds	r3, #1
   b4a3a:	d10c      	bne.n	b4a56 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4a3c:	4b18      	ldr	r3, [pc, #96]	; (b4aa0 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4a3e:	9300      	str	r3, [sp, #0]
   b4a40:	2300      	movs	r3, #0
   b4a42:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a46:	4b17      	ldr	r3, [pc, #92]	; (b4aa4 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4a48:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4a4a:	4668      	mov	r0, sp
   b4a4c:	2301      	movs	r3, #1
   b4a4e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a52:	f7ff fe8e 	bl	b4772 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a56:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a5a:	2100      	movs	r1, #0
   b4a5c:	b280      	uxth	r0, r0
   b4a5e:	f002 fbd8 	bl	b7212 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a62:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a66:	4620      	mov	r0, r4
   b4a68:	f7ff fe8d 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4a6c:	2100      	movs	r1, #0
   b4a6e:	4620      	mov	r0, r4
   b4a70:	f7ff fe89 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
   b4a74:	2100      	movs	r1, #0
   b4a76:	4605      	mov	r5, r0
   b4a78:	4620      	mov	r0, r4
   b4a7a:	f7ff fe84 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
   b4a7e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a82:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4a84:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a88:	2101      	movs	r1, #1
   b4a8a:	b280      	uxth	r0, r0
   b4a8c:	f002 fbc1 	bl	b7212 <digitalWrite>
        if (_sck == -1)
   b4a90:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a94:	3301      	adds	r3, #1
   b4a96:	d1ca      	bne.n	b4a2e <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4a98:	f7ff fe64 	bl	b4764 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4a9c:	e7c7      	b.n	b4a2e <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4a9e:	bf00      	nop
   b4aa0:	000b8244 	.word	0x000b8244
   b4aa4:	0007a120 	.word	0x0007a120

000b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4aa8:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4aaa:	f7ff ff9b 	bl	b49e4 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4aae:	ba40      	rev16	r0, r0
}
   b4ab0:	b280      	uxth	r0, r0
   b4ab2:	bd08      	pop	{r3, pc}

000b4ab4 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4ab4:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4ab6:	2188      	movs	r1, #136	; 0x88
{
   b4ab8:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4aba:	f7ff fff5 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4abe:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4ac0:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4ac2:	4620      	mov	r0, r4
   b4ac4:	f7ff fff0 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ac8:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4aca:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4acc:	4620      	mov	r0, r4
   b4ace:	f7ff ffeb 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4ad2:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4ad4:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4ad6:	4620      	mov	r0, r4
   b4ad8:	f7ff ffe6 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4adc:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4ade:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4ae0:	4620      	mov	r0, r4
   b4ae2:	f7ff ffe1 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ae6:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4ae8:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4aea:	4620      	mov	r0, r4
   b4aec:	f7ff ffdc 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4af0:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4af2:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4af4:	4620      	mov	r0, r4
   b4af6:	f7ff ffd7 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4afa:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4afc:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4afe:	4620      	mov	r0, r4
   b4b00:	f7ff ffd2 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b04:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4b06:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4b08:	4620      	mov	r0, r4
   b4b0a:	f7ff ffcd 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b0e:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4b10:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4b12:	4620      	mov	r0, r4
   b4b14:	f7ff ffc8 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b18:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4b1a:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4b1c:	4620      	mov	r0, r4
   b4b1e:	f7ff ffc3 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b22:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4b24:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4b26:	4620      	mov	r0, r4
   b4b28:	f7ff ffbe 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b2c:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4b2e:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b30:	4620      	mov	r0, r4
   b4b32:	f7ff fefb 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4b36:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b38:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	f7ff ffb3 	bl	b4aa8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b42:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4b44:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b46:	4620      	mov	r0, r4
   b4b48:	f7ff fef0 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4b4c:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b4e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4b52:	4620      	mov	r0, r4
   b4b54:	f7ff feea 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>
   b4b58:	21e5      	movs	r1, #229	; 0xe5
   b4b5a:	4605      	mov	r5, r0
   b4b5c:	4620      	mov	r0, r4
   b4b5e:	f7ff fee5 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>
   b4b62:	f000 030f 	and.w	r3, r0, #15
   b4b66:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4b6a:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4b6c:	21e6      	movs	r1, #230	; 0xe6
   b4b6e:	4620      	mov	r0, r4
   b4b70:	f7ff fedc 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>
   b4b74:	21e5      	movs	r1, #229	; 0xe5
   b4b76:	4605      	mov	r5, r0
   b4b78:	4620      	mov	r0, r4
   b4b7a:	f7ff fed7 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>
   b4b7e:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4b82:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4b86:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4b88:	21e7      	movs	r1, #231	; 0xe7
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	f7ff fece 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>
   b4b90:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4b94:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4b98 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4b98:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4b9a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4b9e:	3301      	adds	r3, #1
{
   b4ba0:	b085      	sub	sp, #20
   b4ba2:	4604      	mov	r4, r0
   b4ba4:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4ba6:	d123      	bne.n	b4bf0 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4ba8:	7901      	ldrb	r1, [r0, #4]
   b4baa:	6800      	ldr	r0, [r0, #0]
   b4bac:	f001 ff18 	bl	b69e0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4bb0:	6820      	ldr	r0, [r4, #0]
   b4bb2:	6803      	ldr	r3, [r0, #0]
   b4bb4:	4629      	mov	r1, r5
   b4bb6:	689b      	ldr	r3, [r3, #8]
   b4bb8:	4798      	blx	r3
        _wire -> endTransmission();
   b4bba:	6820      	ldr	r0, [r4, #0]
   b4bbc:	f001 ff1b 	bl	b69f6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4bc0:	7921      	ldrb	r1, [r4, #4]
   b4bc2:	6820      	ldr	r0, [r4, #0]
   b4bc4:	2203      	movs	r2, #3
   b4bc6:	f001 ff08 	bl	b69da <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4bca:	6820      	ldr	r0, [r4, #0]
   b4bcc:	6803      	ldr	r3, [r0, #0]
   b4bce:	695b      	ldr	r3, [r3, #20]
   b4bd0:	4798      	blx	r3
        value <<= 8;
   b4bd2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4bd4:	6820      	ldr	r0, [r4, #0]
   b4bd6:	6803      	ldr	r3, [r0, #0]
   b4bd8:	695b      	ldr	r3, [r3, #20]
   b4bda:	4798      	blx	r3
   b4bdc:	4328      	orrs	r0, r5
        value <<= 8;
   b4bde:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4be0:	6820      	ldr	r0, [r4, #0]
   b4be2:	6803      	ldr	r3, [r0, #0]
   b4be4:	695b      	ldr	r3, [r3, #20]
   b4be6:	4798      	blx	r3
   b4be8:	4305      	orrs	r5, r0
}
   b4bea:	4628      	mov	r0, r5
   b4bec:	b005      	add	sp, #20
   b4bee:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4bf0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4bf4:	3301      	adds	r3, #1
   b4bf6:	d10c      	bne.n	b4c12 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4bf8:	4b1a      	ldr	r3, [pc, #104]	; (b4c64 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4bfa:	9300      	str	r3, [sp, #0]
   b4bfc:	2300      	movs	r3, #0
   b4bfe:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c02:	4b19      	ldr	r3, [pc, #100]	; (b4c68 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4c04:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c06:	4668      	mov	r0, sp
   b4c08:	2301      	movs	r3, #1
   b4c0a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c0e:	f7ff fdb0 	bl	b4772 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c12:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c16:	2100      	movs	r1, #0
   b4c18:	b280      	uxth	r0, r0
   b4c1a:	f002 fafa 	bl	b7212 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c1e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c22:	4620      	mov	r0, r4
   b4c24:	f7ff fdaf 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4c28:	2100      	movs	r1, #0
   b4c2a:	4620      	mov	r0, r4
   b4c2c:	f7ff fdab 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4c30:	2100      	movs	r1, #0
        value <<= 8;
   b4c32:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c34:	4620      	mov	r0, r4
   b4c36:	f7ff fda6 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
   b4c3a:	4328      	orrs	r0, r5
        value <<= 8;
   b4c3c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c3e:	2100      	movs	r1, #0
   b4c40:	4620      	mov	r0, r4
   b4c42:	f7ff fda0 	bl	b4786 <_ZN15Adafruit_BME2807spixferEh>
   b4c46:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4c48:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c4c:	2101      	movs	r1, #1
   b4c4e:	b280      	uxth	r0, r0
   b4c50:	f002 fadf 	bl	b7212 <digitalWrite>
        if (_sck == -1)
   b4c54:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4c58:	3301      	adds	r3, #1
   b4c5a:	d1c6      	bne.n	b4bea <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4c5c:	f7ff fd82 	bl	b4764 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4c60:	e7c3      	b.n	b4bea <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4c62:	bf00      	nop
   b4c64:	000b8244 	.word	0x000b8244
   b4c68:	0007a120 	.word	0x0007a120

000b4c6c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4c6c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c6e:	21fa      	movs	r1, #250	; 0xfa
{
   b4c70:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c72:	f7ff ff91 	bl	b4b98 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4c76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4c7a:	d01f      	beq.n	b4cbc <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c7c:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4c7e:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4cc4 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c82:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4c84:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c88:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4c8c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c90:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4c92:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4c96:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4c9a:	131b      	asrs	r3, r3, #12
   b4c9c:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4c9e:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4ca0:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4ca4:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4ca6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4caa:	3380      	adds	r3, #128	; 0x80
   b4cac:	121b      	asrs	r3, r3, #8
   b4cae:	ee07 3a90 	vmov	s15, r3
   b4cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4cb6:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4cba:	bd10      	pop	{r4, pc}
        return NAN;
   b4cbc:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4cc8 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4cc0:	e7fb      	b.n	b4cba <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4cc2:	bf00      	nop
   b4cc4:	42c80000 	.word	0x42c80000
   b4cc8:	7fc00000 	.word	0x7fc00000

000b4ccc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4ccc:	b538      	push	{r3, r4, r5, lr}
   b4cce:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4cd0:	f7ff ffcc 	bl	b4c6c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4cd4:	21fd      	movs	r1, #253	; 0xfd
   b4cd6:	4620      	mov	r0, r4
   b4cd8:	f7ff fe84 	bl	b49e4 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4cdc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4ce0:	d038      	beq.n	b4d54 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4ce2:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4ce4:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4ce8:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4cec:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4cf0:	0509      	lsls	r1, r1, #20
   b4cf2:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4cf6:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4cfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4cfe:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d00:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d04:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d08:	436b      	muls	r3, r5
   b4d0a:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d0c:	4369      	muls	r1, r5
   b4d0e:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d14:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d16:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d18:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d20:	434b      	muls	r3, r1
   b4d22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4d26:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d28:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d2a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4d2c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d30:	4352      	muls	r2, r2
   b4d32:	11d2      	asrs	r2, r2, #7
   b4d34:	434a      	muls	r2, r1
   b4d36:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4d3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4d3e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4d42:	bfa8      	it	ge
   b4d44:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4d48:	131b      	asrs	r3, r3, #12
   b4d4a:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4d4e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4d52:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4d54:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4d5c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4d58:	e7fb      	b.n	b4d52 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4d5a:	bf00      	nop
   b4d5c:	7fc00000 	.word	0x7fc00000

000b4d60 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4d64:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4d66:	f7ff ff81 	bl	b4c6c <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4d6a:	21f7      	movs	r1, #247	; 0xf7
   b4d6c:	4628      	mov	r0, r5
   b4d6e:	f7ff ff13 	bl	b4b98 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4d72:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4d76:	f000 80b6 	beq.w	b4ee6 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4d7a:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d7c:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4d80:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4d84:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4d88:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d8c:	17dc      	asrs	r4, r3, #31
   b4d8e:	fb03 f20e 	mul.w	r2, r3, lr
   b4d92:	fb01 2204 	mla	r2, r1, r4, r2
   b4d96:	fba3 3401 	umull	r3, r4, r3, r1
   b4d9a:	4422      	add	r2, r4
   b4d9c:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4d9e:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4da2:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4da4:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4da8:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4dac:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4db0:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4db4:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4db8:	fb03 f608 	mul.w	r6, r3, r8
   b4dbc:	fb07 660c 	mla	r6, r7, ip, r6
   b4dc0:	fba3 3c07 	umull	r3, ip, r3, r7
   b4dc4:	4466      	add	r6, ip
   b4dc6:	0a1b      	lsrs	r3, r3, #8
   b4dc8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4dcc:	191b      	adds	r3, r3, r4
   b4dce:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4dd2:	8b6e      	ldrh	r6, [r5, #26]
   b4dd4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4dd8:	fba3 3406 	umull	r3, r4, r3, r6
   b4ddc:	fb06 4402 	mla	r4, r6, r2, r4
   b4de0:	17e3      	asrs	r3, r4, #31
   b4de2:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4de4:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4de8:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4dec:	d07e      	beq.n	b4eec <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4dee:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4df2:	fb04 f608 	mul.w	r6, r4, r8
   b4df6:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4dfa:	fb07 6609 	mla	r6, r7, r9, r6
   b4dfe:	fba4 4707 	umull	r4, r7, r4, r7
   b4e02:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e04:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4e08:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4e0c:	fb07 fe0e 	mul.w	lr, r7, lr
   b4e10:	fb01 ee08 	mla	lr, r1, r8, lr
   b4e14:	fba7 7101 	umull	r7, r1, r7, r1
   b4e18:	4471      	add	r1, lr
   b4e1a:	0449      	lsls	r1, r1, #17
   b4e1c:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4e20:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e22:	047f      	lsls	r7, r7, #17
   b4e24:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4e26:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e2a:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4e2e:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4e32:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4e36:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4e3a:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4e3e:	07e4      	lsls	r4, r4, #31
   b4e40:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4e42:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4e46:	f640 4135 	movw	r1, #3125	; 0xc35
   b4e4a:	eb60 0606 	sbc.w	r6, r0, r6
   b4e4e:	fba4 0401 	umull	r0, r4, r4, r1
   b4e52:	fb01 4106 	mla	r1, r1, r6, r4
   b4e56:	f002 fe87 	bl	b7b68 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4e5a:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e5e:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4e62:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4e66:	0b43      	lsrs	r3, r0, #13
   b4e68:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4e6c:	fb02 f70c 	mul.w	r7, r2, ip
   b4e70:	17d4      	asrs	r4, r2, #31
   b4e72:	fb03 7704 	mla	r7, r3, r4, r7
   b4e76:	fba2 2403 	umull	r2, r4, r2, r3
   b4e7a:	443c      	add	r4, r7
   b4e7c:	fb02 f70c 	mul.w	r7, r2, ip
   b4e80:	fb03 7704 	mla	r7, r3, r4, r7
   b4e84:	fba2 2303 	umull	r2, r3, r2, r3
   b4e88:	441f      	add	r7, r3
   b4e8a:	0e53      	lsrs	r3, r2, #25
   b4e8c:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4e90:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e92:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4e96:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4e9a:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4e9c:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ea0:	fb02 4100 	mla	r1, r2, r0, r4
   b4ea4:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ea8:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4eac:	4431      	add	r1, r6
   b4eae:	0cc0      	lsrs	r0, r0, #19
   b4eb0:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4eb4:	1818      	adds	r0, r3, r0
   b4eb6:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4eba:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4ebe:	0a00      	lsrs	r0, r0, #8
   b4ec0:	012d      	lsls	r5, r5, #4
   b4ec2:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4ec6:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4eca:	0124      	lsls	r4, r4, #4
   b4ecc:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4ece:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4ed2:	f002 fe0b 	bl	b7aec <__aeabi_l2f>
   b4ed6:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4ef4 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4eda:	ee07 0a90 	vmov	s15, r0
   b4ede:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4ee6:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4ef8 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4eea:	e7fa      	b.n	b4ee2 <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4eec:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4efc <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4ef0:	e7f7      	b.n	b4ee2 <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4ef2:	bf00      	nop
   b4ef4:	3b800000 	.word	0x3b800000
   b4ef8:	7fc00000 	.word	0x7fc00000
   b4efc:	00000000 	.word	0x00000000

000b4f00 <_ZN15Adafruit_BME2804initEv>:
{
   b4f00:	b530      	push	{r4, r5, lr}
   b4f02:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4f04:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4f08:	1c42      	adds	r2, r0, #1
{
   b4f0a:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4f0c:	d119      	bne.n	b4f42 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4f0e:	6820      	ldr	r0, [r4, #0]
   b4f10:	f001 fd34 	bl	b697c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f14:	21d0      	movs	r1, #208	; 0xd0
   b4f16:	4620      	mov	r0, r4
   b4f18:	f7ff fd08 	bl	b492c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4f1c:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f1e:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4f20:	d145      	bne.n	b4fae <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4f22:	4620      	mov	r0, r4
   b4f24:	22b6      	movs	r2, #182	; 0xb6
   b4f26:	21e0      	movs	r1, #224	; 0xe0
   b4f28:	f7ff fc64 	bl	b47f4 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4f2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4f30:	f001 facc 	bl	b64cc <delay>
    while (isReadingCalibration())
   b4f34:	4620      	mov	r0, r4
   b4f36:	f7ff fd4d 	bl	b49d4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4f3a:	4605      	mov	r5, r0
   b4f3c:	b328      	cbz	r0, b4f8a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4f3e:	2064      	movs	r0, #100	; 0x64
   b4f40:	e7f6      	b.n	b4f30 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4f42:	2101      	movs	r1, #1
   b4f44:	b280      	uxth	r0, r0
   b4f46:	f002 f964 	bl	b7212 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4f4a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4f4e:	2101      	movs	r1, #1
   b4f50:	b280      	uxth	r0, r0
   b4f52:	f002 f94d 	bl	b71f0 <pinMode>
        if (_sck == -1) {
   b4f56:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4f5a:	1c43      	adds	r3, r0, #1
   b4f5c:	d104      	bne.n	b4f68 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4f5e:	f7ff fbe5 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4f62:	f001 f883 	bl	b606c <_ZN8SPIClass5beginEv>
    }
   b4f66:	e7d5      	b.n	b4f14 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4f68:	2101      	movs	r1, #1
   b4f6a:	b280      	uxth	r0, r0
   b4f6c:	f002 f940 	bl	b71f0 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4f70:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4f74:	2101      	movs	r1, #1
   b4f76:	b280      	uxth	r0, r0
   b4f78:	f002 f93a 	bl	b71f0 <pinMode>
            pinMode(_miso, INPUT);
   b4f7c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4f80:	2100      	movs	r1, #0
   b4f82:	b280      	uxth	r0, r0
   b4f84:	f002 f934 	bl	b71f0 <pinMode>
   b4f88:	e7c4      	b.n	b4f14 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4f8a:	4620      	mov	r0, r4
   b4f8c:	f7ff fd92 	bl	b4ab4 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4f90:	2305      	movs	r3, #5
   b4f92:	9300      	str	r3, [sp, #0]
   b4f94:	461a      	mov	r2, r3
   b4f96:	2103      	movs	r1, #3
   b4f98:	4620      	mov	r0, r4
   b4f9a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4f9e:	f7ff fc7b 	bl	b4898 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4fa2:	2064      	movs	r0, #100	; 0x64
   b4fa4:	f001 fa92 	bl	b64cc <delay>
    return true;
   b4fa8:	2001      	movs	r0, #1
}
   b4faa:	b005      	add	sp, #20
   b4fac:	bd30      	pop	{r4, r5, pc}
        return false;
   b4fae:	2000      	movs	r0, #0
   b4fb0:	e7fb      	b.n	b4faa <_ZN15Adafruit_BME2804initEv+0xaa>

000b4fb2 <_ZN15Adafruit_BME2805beginEh>:
{
   b4fb2:	b510      	push	{r4, lr}
	_i2caddr = addr;
   b4fb4:	7101      	strb	r1, [r0, #4]
{
   b4fb6:	4604      	mov	r4, r0
	_wire = &Wire;
   b4fb8:	f002 f9d4 	bl	b7364 <_Z19__fetch_global_Wirev>
   b4fbc:	6020      	str	r0, [r4, #0]
	return init();
   b4fbe:	4620      	mov	r0, r4
}
   b4fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   b4fc4:	f7ff bf9c 	b.w	b4f00 <_ZN15Adafruit_BME2804initEv>

000b4fc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4fca:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4fcc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4fd0:	2d02      	cmp	r5, #2
   b4fd2:	d069      	beq.n	b50a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4fd4:	2d03      	cmp	r5, #3
   b4fd6:	f000 8099 	beq.w	b510c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4fda:	2d01      	cmp	r5, #1
   b4fdc:	d16c      	bne.n	b50b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4fde:	8905      	ldrh	r5, [r0, #8]
   b4fe0:	43d2      	mvns	r2, r2
   b4fe2:	442a      	add	r2, r5
   b4fe4:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4fe6:	2a00      	cmp	r2, #0
   b4fe8:	db5d      	blt.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4fea:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4fee:	4295      	cmp	r5, r2
   b4ff0:	dd59      	ble.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4ff2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4ff4:	bfbe      	ittt	lt
   b4ff6:	185b      	addlt	r3, r3, r1
   b4ff8:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4ffa:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4ffc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5000:	18cd      	adds	r5, r1, r3
   b5002:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5004:	bfc4      	itt	gt
   b5006:	1a43      	subgt	r3, r0, r1
   b5008:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b500a:	2b00      	cmp	r3, #0
   b500c:	dd4b      	ble.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b500e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5012:	f8df c120 	ldr.w	ip, [pc, #288]	; b5134 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b5016:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b501a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b501e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5020:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5024:	d01a      	beq.n	b505c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b5026:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b502a:	4e40      	ldr	r6, [pc, #256]	; (b512c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b502c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b502e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5030:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5032:	bf3f      	itttt	cc
   b5034:	eba5 0e03 	subcc.w	lr, r5, r3
   b5038:	26ff      	movcc	r6, #255	; 0xff
   b503a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b503e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b5040:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b5044:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5046:	bf0c      	ite	eq
   b5048:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b504a:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b504c:	42ab      	cmp	r3, r5
   b504e:	f80c 6002 	strb.w	r6, [ip, r2]
   b5052:	d328      	bcc.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b5054:	3908      	subs	r1, #8
   b5056:	440b      	add	r3, r1
   b5058:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b505a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b505c:	2b07      	cmp	r3, #7
   b505e:	d919      	bls.n	b5094 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5060:	2c01      	cmp	r4, #1
   b5062:	f04f 35ff 	mov.w	r5, #4294967295
   b5066:	bf18      	it	ne
   b5068:	2500      	movne	r5, #0
   b506a:	b2ed      	uxtb	r5, r5
   b506c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5070:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b5072:	3a08      	subs	r2, #8
   b5074:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5076:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5078:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b507c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5080:	d8f7      	bhi.n	b5072 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b5082:	f1a3 0208 	sub.w	r2, r3, #8
   b5086:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b508a:	3201      	adds	r2, #1
   b508c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5090:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b5094:	b13b      	cbz	r3, b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b5096:	4a26      	ldr	r2, [pc, #152]	; (b5130 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b5098:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b509a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b509c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b509e:	bf0c      	ite	eq
   b50a0:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b50a2:	4393      	bicne	r3, r2
   b50a4:	7003      	strb	r3, [r0, #0]
}
   b50a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b50a8:	8945      	ldrh	r5, [r0, #10]
   b50aa:	43d2      	mvns	r2, r2
   b50ac:	442a      	add	r2, r5
      x -= (w-1);
   b50ae:	18cd      	adds	r5, r1, r3
   b50b0:	8901      	ldrh	r1, [r0, #8]
   b50b2:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b50b4:	b212      	sxth	r2, r2
      x -= (w-1);
   b50b6:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b50b8:	2a00      	cmp	r2, #0
   b50ba:	dbf4      	blt.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b50bc:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b50c0:	4295      	cmp	r5, r2
   b50c2:	ddf0      	ble.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b50c4:	2900      	cmp	r1, #0
    w += x;
   b50c6:	bfbe      	ittt	lt
   b50c8:	185b      	addlt	r3, r3, r1
   b50ca:	b21b      	sxthlt	r3, r3
    x = 0;
   b50cc:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b50ce:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b50d2:	18ce      	adds	r6, r1, r3
   b50d4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b50d6:	bfc4      	itt	gt
   b50d8:	1a6b      	subgt	r3, r5, r1
   b50da:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b50dc:	2b00      	cmp	r3, #0
   b50de:	dde2      	ble.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b50e0:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b50e2:	2580      	movs	r5, #128	; 0x80
   b50e4:	fb10 1105 	smlabb	r1, r0, r5, r1
   b50e8:	4812      	ldr	r0, [pc, #72]	; (b5134 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b50ea:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b50ec:	f002 0007 	and.w	r0, r2, #7
   b50f0:	2201      	movs	r2, #1
   b50f2:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b50f4:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b50f6:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b50f8:	440b      	add	r3, r1
   b50fa:	d10c      	bne.n	b5116 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b50fc:	428b      	cmp	r3, r1
   b50fe:	d0d2      	beq.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5100:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5104:	4310      	orrs	r0, r2
   b5106:	f801 0c01 	strb.w	r0, [r1, #-1]
   b510a:	e7f7      	b.n	b50fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b510c:	18cd      	adds	r5, r1, r3
   b510e:	8941      	ldrh	r1, [r0, #10]
   b5110:	1b49      	subs	r1, r1, r5
   b5112:	b209      	sxth	r1, r1
      break;
   b5114:	e767      	b.n	b4fe6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b5116:	43d2      	mvns	r2, r2
   b5118:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b511a:	428b      	cmp	r3, r1
   b511c:	d0c3      	beq.n	b50a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b511e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5122:	4010      	ands	r0, r2
   b5124:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5128:	e7f7      	b.n	b511a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b512a:	bf00      	nop
   b512c:	2003e12c 	.word	0x2003e12c
   b5130:	2003e124 	.word	0x2003e124
   b5134:	2003e134 	.word	0x2003e134

000b5138 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5138:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b513a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b513c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5140:	2d02      	cmp	r5, #2
   b5142:	d034      	beq.n	b51ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5144:	2d03      	cmp	r5, #3
   b5146:	f000 809b 	beq.w	b5280 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b514a:	2d01      	cmp	r5, #1
   b514c:	d137      	bne.n	b51be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b514e:	18d5      	adds	r5, r2, r3
   b5150:	8902      	ldrh	r2, [r0, #8]
   b5152:	1b52      	subs	r2, r2, r5
   b5154:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b5156:	2900      	cmp	r1, #0
   b5158:	f2c0 8091 	blt.w	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b515c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5160:	428d      	cmp	r5, r1
   b5162:	f340 808c 	ble.w	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b5166:	2a00      	cmp	r2, #0
    w += x;
   b5168:	bfbe      	ittt	lt
   b516a:	189b      	addlt	r3, r3, r2
   b516c:	b21b      	sxthlt	r3, r3
    x = 0;
   b516e:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5170:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5174:	18d6      	adds	r6, r2, r3
   b5176:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5178:	bfc4      	itt	gt
   b517a:	1aab      	subgt	r3, r5, r2
   b517c:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b517e:	2b00      	cmp	r3, #0
   b5180:	dd7d      	ble.n	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5182:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5184:	2580      	movs	r5, #128	; 0x80
   b5186:	fb10 2205 	smlabb	r2, r0, r5, r2
   b518a:	4845      	ldr	r0, [pc, #276]	; (b52a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b518c:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b518e:	f001 0007 	and.w	r0, r1, #7
   b5192:	2101      	movs	r1, #1
   b5194:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b5196:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5198:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b519a:	4413      	add	r3, r2
   b519c:	d175      	bne.n	b528a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b519e:	429a      	cmp	r2, r3
   b51a0:	d06d      	beq.n	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b51a2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b51a6:	4308      	orrs	r0, r1
   b51a8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b51ac:	e7f7      	b.n	b519e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b51ae:	8905      	ldrh	r5, [r0, #8]
   b51b0:	43c9      	mvns	r1, r1
   b51b2:	4429      	add	r1, r5
      y -= (h-1);
   b51b4:	18d5      	adds	r5, r2, r3
   b51b6:	8942      	ldrh	r2, [r0, #10]
   b51b8:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b51ba:	b209      	sxth	r1, r1
      y -= (h-1);
   b51bc:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b51be:	2900      	cmp	r1, #0
   b51c0:	db5d      	blt.n	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b51c2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b51c6:	428d      	cmp	r5, r1
   b51c8:	dd59      	ble.n	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b51ca:	2a00      	cmp	r2, #0
    __h += __y;
   b51cc:	bfbe      	ittt	lt
   b51ce:	189b      	addlt	r3, r3, r2
   b51d0:	b21b      	sxthlt	r3, r3
    __y = 0;
   b51d2:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b51d4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b51d8:	18d5      	adds	r5, r2, r3
   b51da:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b51dc:	bfc4      	itt	gt
   b51de:	1a83      	subgt	r3, r0, r2
   b51e0:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b51e2:	2b00      	cmp	r3, #0
   b51e4:	dd4b      	ble.n	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b51e6:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b51ea:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b52a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b51ee:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b51f2:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b51f6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b51f8:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b51fc:	d01a      	beq.n	b5234 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b51fe:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5202:	4e28      	ldr	r6, [pc, #160]	; (b52a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5204:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5206:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5208:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b520a:	bf3f      	itttt	cc
   b520c:	eba5 0e03 	subcc.w	lr, r5, r3
   b5210:	26ff      	movcc	r6, #255	; 0xff
   b5212:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5216:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5218:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b521c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b521e:	bf0c      	ite	eq
   b5220:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5222:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5224:	42ab      	cmp	r3, r5
   b5226:	f80c 6001 	strb.w	r6, [ip, r1]
   b522a:	d328      	bcc.n	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b522c:	3a08      	subs	r2, #8
   b522e:	4413      	add	r3, r2
   b5230:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5232:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5234:	2b07      	cmp	r3, #7
   b5236:	d919      	bls.n	b526c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5238:	2c01      	cmp	r4, #1
   b523a:	f04f 35ff 	mov.w	r5, #4294967295
   b523e:	bf18      	it	ne
   b5240:	2500      	movne	r5, #0
   b5242:	b2ed      	uxtb	r5, r5
   b5244:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5248:	461a      	mov	r2, r3
      h -= 8;
   b524a:	3a08      	subs	r2, #8
   b524c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b524e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5250:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5254:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5258:	d8f7      	bhi.n	b524a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b525a:	f1a3 0208 	sub.w	r2, r3, #8
   b525e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5262:	3201      	adds	r2, #1
   b5264:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5268:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b526c:	b13b      	cbz	r3, b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b526e:	4a0e      	ldr	r2, [pc, #56]	; (b52a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5270:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5272:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5274:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5276:	bf0c      	ite	eq
   b5278:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b527a:	4393      	bicne	r3, r2
   b527c:	7003      	strb	r3, [r0, #0]
}
   b527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5280:	8945      	ldrh	r5, [r0, #10]
   b5282:	43c9      	mvns	r1, r1
   b5284:	4429      	add	r1, r5
   b5286:	b209      	sxth	r1, r1
      break;
   b5288:	e765      	b.n	b5156 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b528a:	43c9      	mvns	r1, r1
   b528c:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b528e:	429a      	cmp	r2, r3
   b5290:	d0f5      	beq.n	b527e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5292:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5296:	4008      	ands	r0, r1
   b5298:	f802 0c01 	strb.w	r0, [r2, #-1]
   b529c:	e7f7      	b.n	b528e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b529e:	bf00      	nop
   b52a0:	2003e134 	.word	0x2003e134
   b52a4:	2003e12c 	.word	0x2003e12c
   b52a8:	2003e124 	.word	0x2003e124

000b52ac <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b52ac:	4770      	bx	lr
	...

000b52b0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b52b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b52b2:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b52b4:	4606      	mov	r6, r0
   b52b6:	4614      	mov	r4, r2
   b52b8:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b52ba:	db2d      	blt.n	b5318 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b52bc:	f000 fbbe 	bl	b5a3c <_ZN12Adafruit_GFX5widthEv>
   b52c0:	42a8      	cmp	r0, r5
   b52c2:	dd29      	ble.n	b5318 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b52c4:	2c00      	cmp	r4, #0
   b52c6:	db27      	blt.n	b5318 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b52c8:	4630      	mov	r0, r6
   b52ca:	f000 fbba 	bl	b5a42 <_ZN12Adafruit_GFX6heightEv>
   b52ce:	42a0      	cmp	r0, r4
   b52d0:	dd22      	ble.n	b5318 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b52d2:	4630      	mov	r0, r6
   b52d4:	f000 fba2 	bl	b5a1c <_ZN12Adafruit_GFX11getRotationEv>
   b52d8:	2802      	cmp	r0, #2
   b52da:	d01e      	beq.n	b531a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b52dc:	2803      	cmp	r0, #3
   b52de:	d025      	beq.n	b532c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b52e0:	2801      	cmp	r0, #1
   b52e2:	d104      	bne.n	b52ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b52e4:	8933      	ldrh	r3, [r6, #8]
   b52e6:	43e2      	mvns	r2, r4
   b52e8:	441a      	add	r2, r3
    break;
   b52ea:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b52ec:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b52ee:	2c00      	cmp	r4, #0
   b52f0:	4622      	mov	r2, r4
   b52f2:	bfb8      	it	lt
   b52f4:	1de2      	addlt	r2, r4, #7
   b52f6:	10d2      	asrs	r2, r2, #3
   b52f8:	2180      	movs	r1, #128	; 0x80
   b52fa:	fb12 5501 	smlabb	r5, r2, r1, r5
   b52fe:	490e      	ldr	r1, [pc, #56]	; (b5338 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5300:	2201      	movs	r2, #1
   b5302:	f004 0407 	and.w	r4, r4, #7
   b5306:	574b      	ldrsb	r3, [r1, r5]
   b5308:	fa02 f404 	lsl.w	r4, r2, r4
   b530c:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b530e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5310:	bf0c      	ite	eq
   b5312:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5314:	43a3      	bicne	r3, r4
   b5316:	554b      	strb	r3, [r1, r5]
}
   b5318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b531a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b531c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b531e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5320:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5322:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5324:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b5326:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5328:	b224      	sxth	r4, r4
    break;
   b532a:	e7e0      	b.n	b52ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b532c:	8973      	ldrh	r3, [r6, #10]
   b532e:	3b01      	subs	r3, #1
   b5330:	1b5b      	subs	r3, r3, r5
    break;
   b5332:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5334:	b21c      	sxth	r4, r3
    break;
   b5336:	e7da      	b.n	b52ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5338:	2003e134 	.word	0x2003e134

000b533c <_ZN16Adafruit_SSD1306D0Ev>:
   b533c:	b510      	push	{r4, lr}
   b533e:	2124      	movs	r1, #36	; 0x24
   b5340:	4604      	mov	r4, r0
   b5342:	f7fe feaa 	bl	b409a <_ZdlPvj>
   b5346:	4620      	mov	r0, r4
   b5348:	bd10      	pop	{r4, pc}
	...

000b534c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b534c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b534e:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5350:	4604      	mov	r4, r0
   b5352:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5354:	2180      	movs	r1, #128	; 0x80
   b5356:	f000 fa8b 	bl	b5870 <_ZN12Adafruit_GFXC1Ess>
   b535a:	4b06      	ldr	r3, [pc, #24]	; (b5374 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b535c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b535e:	23ff      	movs	r3, #255	; 0xff
   b5360:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5364:	7763      	strb	r3, [r4, #29]
   b5366:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b536a:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b536c:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5370:	4620      	mov	r0, r4
   b5372:	bd38      	pop	{r3, r4, r5, pc}
   b5374:	000b8258 	.word	0x000b8258

000b5378 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5378:	4802      	ldr	r0, [pc, #8]	; (b5384 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b537a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b537e:	2100      	movs	r1, #0
   b5380:	f002 bdc0 	b.w	b7f04 <memset>
   b5384:	2003e134 	.word	0x2003e134

000b5388 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5388:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b538a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b538e:	b143      	cbz	r3, b53a2 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5390:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b5392:	f7ff f9cb 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5396:	9901      	ldr	r1, [sp, #4]
}
   b5398:	b003      	add	sp, #12
   b539a:	f85d eb04 	ldr.w	lr, [sp], #4
   b539e:	f000 bf81 	b.w	b62a4 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b53a2:	460b      	mov	r3, r1
   b53a4:	7f81      	ldrb	r1, [r0, #30]
   b53a6:	7f40      	ldrb	r0, [r0, #29]
   b53a8:	2201      	movs	r2, #1
}
   b53aa:	b003      	add	sp, #12
   b53ac:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b53b0:	f001 bf5b 	b.w	b726a <shiftOut>

000b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b53b4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b53b6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b53ba:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b53bc:	4604      	mov	r4, r0
   b53be:	460d      	mov	r5, r1
  if (sid != -1)
   b53c0:	d01d      	beq.n	b53fe <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b53c2:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b53c6:	2101      	movs	r1, #1
   b53c8:	b280      	uxth	r0, r0
   b53ca:	f001 ff22 	bl	b7212 <digitalWrite>
    digitalWrite(dc, LOW);
   b53ce:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b53d2:	2100      	movs	r1, #0
   b53d4:	b280      	uxth	r0, r0
   b53d6:	f001 ff1c 	bl	b7212 <digitalWrite>
    digitalWrite(cs, LOW);
   b53da:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b53de:	2100      	movs	r1, #0
   b53e0:	b280      	uxth	r0, r0
   b53e2:	f001 ff16 	bl	b7212 <digitalWrite>
    fastSPIwrite(c);
   b53e6:	4629      	mov	r1, r5
   b53e8:	4620      	mov	r0, r4
   b53ea:	f7ff ffcd 	bl	b5388 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b53ee:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b53f2:	2101      	movs	r1, #1
}
   b53f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b53f8:	b280      	uxth	r0, r0
   b53fa:	f001 bf0a 	b.w	b7212 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b53fe:	f001 ffb1 	bl	b7364 <_Z19__fetch_global_Wirev>
   b5402:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5406:	f001 faef 	bl	b69e8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b540a:	f001 ffab 	bl	b7364 <_Z19__fetch_global_Wirev>
   b540e:	6803      	ldr	r3, [r0, #0]
   b5410:	2100      	movs	r1, #0
   b5412:	689b      	ldr	r3, [r3, #8]
   b5414:	4798      	blx	r3
    Wire.write(c);
   b5416:	f001 ffa5 	bl	b7364 <_Z19__fetch_global_Wirev>
   b541a:	6803      	ldr	r3, [r0, #0]
   b541c:	4629      	mov	r1, r5
   b541e:	689b      	ldr	r3, [r3, #8]
   b5420:	4798      	blx	r3
    Wire.endTransmission();
   b5422:	f001 ff9f 	bl	b7364 <_Z19__fetch_global_Wirev>
}
   b5426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b542a:	f001 bae4 	b.w	b69f6 <_ZN7TwoWire15endTransmissionEv>
	...

000b5430 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5432:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5434:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5436:	f7ff ffbd 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b543a:	2100      	movs	r1, #0
   b543c:	4620      	mov	r0, r4
   b543e:	f7ff ffb9 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5442:	217f      	movs	r1, #127	; 0x7f
   b5444:	4620      	mov	r0, r4
   b5446:	f7ff ffb5 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b544a:	2122      	movs	r1, #34	; 0x22
   b544c:	4620      	mov	r0, r4
   b544e:	f7ff ffb1 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5452:	2100      	movs	r1, #0
   b5454:	4620      	mov	r0, r4
   b5456:	f7ff ffad 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b545a:	2107      	movs	r1, #7
   b545c:	4620      	mov	r0, r4
   b545e:	f7ff ffa9 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5462:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5466:	4f29      	ldr	r7, [pc, #164]	; (b550c <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5468:	3301      	adds	r3, #1
   b546a:	d02a      	beq.n	b54c2 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b546c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5470:	2101      	movs	r1, #1
   b5472:	b280      	uxth	r0, r0
   b5474:	f001 fecd 	bl	b7212 <digitalWrite>
    digitalWrite(dc, HIGH);
   b5478:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b547c:	2101      	movs	r1, #1
   b547e:	b280      	uxth	r0, r0
   b5480:	f001 fec7 	bl	b7212 <digitalWrite>
    digitalWrite(cs, LOW);
   b5484:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5488:	2100      	movs	r1, #0
   b548a:	b280      	uxth	r0, r0
   b548c:	f001 fec1 	bl	b7212 <digitalWrite>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5490:	2001      	movs	r0, #1
   b5492:	f000 fb19 	bl	b5ac8 <HAL_Delay_Microseconds>
   b5496:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b549a:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b549c:	f817 1b01 	ldrb.w	r1, [r7], #1
   b54a0:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54a2:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b54a4:	f7ff ff70 	bl	b5388 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54a8:	2d00      	cmp	r5, #0
   b54aa:	d1f6      	bne.n	b549a <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b54ac:	2001      	movs	r0, #1
   b54ae:	f000 fb0b 	bl	b5ac8 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b54b2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b54b6:	2101      	movs	r1, #1
}
   b54b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b54bc:	b280      	uxth	r0, r0
   b54be:	f001 bea8 	b.w	b7212 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54c2:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b54c4:	f001 ff4e 	bl	b7364 <_Z19__fetch_global_Wirev>
   b54c8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b54cc:	f001 fa8c 	bl	b69e8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b54d0:	f001 ff48 	bl	b7364 <_Z19__fetch_global_Wirev>
   b54d4:	6803      	ldr	r3, [r0, #0]
   b54d6:	2140      	movs	r1, #64	; 0x40
   b54d8:	689b      	ldr	r3, [r3, #8]
   b54da:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b54dc:	f105 0610 	add.w	r6, r5, #16
   b54e0:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b54e2:	f001 ff3f 	bl	b7364 <_Z19__fetch_global_Wirev>
   b54e6:	6803      	ldr	r3, [r0, #0]
   b54e8:	5d79      	ldrb	r1, [r7, r5]
   b54ea:	689b      	ldr	r3, [r3, #8]
   b54ec:	4798      	blx	r3
		i++;
   b54ee:	1c6b      	adds	r3, r5, #1
   b54f0:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b54f2:	42ae      	cmp	r6, r5
   b54f4:	d1f5      	bne.n	b54e2 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b54f6:	f001 ff35 	bl	b7364 <_Z19__fetch_global_Wirev>
   b54fa:	f001 fa7c 	bl	b69f6 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5502:	d100      	bne.n	b5506 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5506:	4635      	mov	r5, r6
   b5508:	e7dc      	b.n	b54c4 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b550a:	bf00      	nop
   b550c:	2003e134 	.word	0x2003e134

000b5510 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5510:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5512:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5516:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5518:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b551a:	4604      	mov	r4, r0
   b551c:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b551e:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5520:	f000 80c9 	beq.w	b56b6 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5524:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5528:	2101      	movs	r1, #1
   b552a:	b280      	uxth	r0, r0
   b552c:	f001 fe60 	bl	b71f0 <pinMode>
    pinMode(cs, OUTPUT);
   b5530:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5534:	2101      	movs	r1, #1
   b5536:	b280      	uxth	r0, r0
   b5538:	f001 fe5a 	bl	b71f0 <pinMode>
    if (!hwSPI){
   b553c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5540:	2b00      	cmp	r3, #0
   b5542:	f000 80a6 	beq.w	b5692 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5546:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b554a:	2101      	movs	r1, #1
   b554c:	b280      	uxth	r0, r0
   b554e:	f001 fe60 	bl	b7212 <digitalWrite>
        instance().setBitOrder(order);
   b5552:	f7ff f8eb 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5556:	2101      	movs	r1, #1
   b5558:	f000 fd9c 	bl	b6094 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b555c:	f7ff f8e6 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5560:	2110      	movs	r1, #16
   b5562:	f000 fe79 	bl	b6258 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5566:	f7ff f8e1 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b556a:	2100      	movs	r1, #0
   b556c:	f000 fda6 	bl	b60bc <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5570:	f7ff f8dc 	bl	b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5574:	f000 fd7a 	bl	b606c <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5578:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b557c:	2101      	movs	r1, #1
   b557e:	b280      	uxth	r0, r0
   b5580:	f001 fe36 	bl	b71f0 <pinMode>
  digitalWrite(rst, HIGH);
   b5584:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5588:	2101      	movs	r1, #1
   b558a:	b280      	uxth	r0, r0
   b558c:	f001 fe41 	bl	b7212 <digitalWrite>
  delay(1);
   b5590:	2001      	movs	r0, #1
   b5592:	f000 ff9b 	bl	b64cc <delay>
  digitalWrite(rst, LOW);
   b5596:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b559a:	2100      	movs	r1, #0
   b559c:	b280      	uxth	r0, r0
   b559e:	f001 fe38 	bl	b7212 <digitalWrite>
  delay(10);
   b55a2:	200a      	movs	r0, #10
   b55a4:	f000 ff92 	bl	b64cc <delay>
  digitalWrite(rst, HIGH);
   b55a8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b55ac:	2101      	movs	r1, #1
   b55ae:	b280      	uxth	r0, r0
   b55b0:	f001 fe2f 	bl	b7212 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b55b4:	4620      	mov	r0, r4
   b55b6:	21ae      	movs	r1, #174	; 0xae
   b55b8:	f7ff fefc 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b55bc:	4620      	mov	r0, r4
   b55be:	21d5      	movs	r1, #213	; 0xd5
   b55c0:	f7ff fef8 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b55c4:	4620      	mov	r0, r4
   b55c6:	2180      	movs	r1, #128	; 0x80
   b55c8:	f7ff fef4 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b55cc:	4620      	mov	r0, r4
   b55ce:	21a8      	movs	r1, #168	; 0xa8
   b55d0:	f7ff fef0 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b55d4:	4620      	mov	r0, r4
   b55d6:	213f      	movs	r1, #63	; 0x3f
   b55d8:	f7ff feec 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b55dc:	4620      	mov	r0, r4
   b55de:	21d3      	movs	r1, #211	; 0xd3
   b55e0:	f7ff fee8 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b55e4:	4620      	mov	r0, r4
   b55e6:	2100      	movs	r1, #0
   b55e8:	f7ff fee4 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b55ec:	4620      	mov	r0, r4
   b55ee:	2140      	movs	r1, #64	; 0x40
   b55f0:	f7ff fee0 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b55f4:	218d      	movs	r1, #141	; 0x8d
   b55f6:	4620      	mov	r0, r4
   b55f8:	f7ff fedc 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b55fc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b55fe:	bf0c      	ite	eq
   b5600:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5602:	2114      	movne	r1, #20
   b5604:	4620      	mov	r0, r4
   b5606:	f7ff fed5 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b560a:	4620      	mov	r0, r4
   b560c:	2120      	movs	r1, #32
   b560e:	f7ff fed1 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5612:	4620      	mov	r0, r4
   b5614:	2100      	movs	r1, #0
   b5616:	f7ff fecd 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b561a:	4620      	mov	r0, r4
   b561c:	21a1      	movs	r1, #161	; 0xa1
   b561e:	f7ff fec9 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5622:	4620      	mov	r0, r4
   b5624:	21c8      	movs	r1, #200	; 0xc8
   b5626:	f7ff fec5 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b562a:	4620      	mov	r0, r4
   b562c:	21da      	movs	r1, #218	; 0xda
   b562e:	f7ff fec1 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5632:	4620      	mov	r0, r4
   b5634:	2112      	movs	r1, #18
   b5636:	f7ff febd 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b563a:	2181      	movs	r1, #129	; 0x81
   b563c:	4620      	mov	r0, r4
   b563e:	f7ff feb9 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5642:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5644:	bf0c      	ite	eq
   b5646:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5648:	21cf      	movne	r1, #207	; 0xcf
   b564a:	4620      	mov	r0, r4
   b564c:	f7ff feb2 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5650:	21d9      	movs	r1, #217	; 0xd9
   b5652:	4620      	mov	r0, r4
   b5654:	f7ff feae 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5658:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b565a:	bf0c      	ite	eq
   b565c:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b565e:	21f1      	movne	r1, #241	; 0xf1
   b5660:	4620      	mov	r0, r4
   b5662:	f7ff fea7 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5666:	4620      	mov	r0, r4
   b5668:	21db      	movs	r1, #219	; 0xdb
   b566a:	f7ff fea3 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b566e:	4620      	mov	r0, r4
   b5670:	2140      	movs	r1, #64	; 0x40
   b5672:	f7ff fe9f 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5676:	4620      	mov	r0, r4
   b5678:	21a4      	movs	r1, #164	; 0xa4
   b567a:	f7ff fe9b 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b567e:	4620      	mov	r0, r4
   b5680:	21a6      	movs	r1, #166	; 0xa6
   b5682:	f7ff fe97 	bl	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5686:	4620      	mov	r0, r4
   b5688:	21af      	movs	r1, #175	; 0xaf
}
   b568a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b568e:	f7ff be91 	b.w	b53b4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5692:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5696:	2101      	movs	r1, #1
   b5698:	b280      	uxth	r0, r0
   b569a:	f001 fda9 	bl	b71f0 <pinMode>
    	pinMode(sclk, OUTPUT);
   b569e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b56a2:	2101      	movs	r1, #1
   b56a4:	b280      	uxth	r0, r0
   b56a6:	f001 fda3 	bl	b71f0 <pinMode>
    if (hwSPI){
   b56aa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b56ae:	2b00      	cmp	r3, #0
   b56b0:	f43f af62 	beq.w	b5578 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b56b4:	e747      	b.n	b5546 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b56b6:	f001 fe55 	bl	b7364 <_Z19__fetch_global_Wirev>
   b56ba:	f001 f95f 	bl	b697c <_ZN7TwoWire5beginEv>
   b56be:	e75b      	b.n	b5578 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b56c0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b56c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56c4:	b085      	sub	sp, #20
   b56c6:	461f      	mov	r7, r3
   b56c8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b56cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b56d0:	eba8 0902 	sub.w	r9, r8, r2
   b56d4:	eba7 0a01 	sub.w	sl, r7, r1
   b56d8:	f1b9 0f00 	cmp.w	r9, #0
   b56dc:	bfb8      	it	lt
   b56de:	f1c9 0900 	rsblt	r9, r9, #0
   b56e2:	f1ba 0f00 	cmp.w	sl, #0
   b56e6:	bfb8      	it	lt
   b56e8:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b56ec:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b56ee:	4683      	mov	fp, r0
   b56f0:	460c      	mov	r4, r1
   b56f2:	4615      	mov	r5, r2
  if (steep) {
   b56f4:	dd04      	ble.n	b5700 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b56f6:	463a      	mov	r2, r7
    swap(x0, y0);
   b56f8:	462c      	mov	r4, r5
    swap(x1, y1);
   b56fa:	4647      	mov	r7, r8
    swap(x0, y0);
   b56fc:	460d      	mov	r5, r1
    swap(x1, y1);
   b56fe:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5700:	42bc      	cmp	r4, r7
   b5702:	dd05      	ble.n	b5710 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5704:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5706:	4645      	mov	r5, r8
   b5708:	4690      	mov	r8, r2
  if (x0 > x1) {
   b570a:	4622      	mov	r2, r4
   b570c:	463c      	mov	r4, r7
   b570e:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5710:	1b3e      	subs	r6, r7, r4
   b5712:	b2b2      	uxth	r2, r6
   b5714:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5716:	eba8 0205 	sub.w	r2, r8, r5
   b571a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b571e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5722:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5726:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b572a:	4545      	cmp	r5, r8
   b572c:	bfb4      	ite	lt
   b572e:	2201      	movlt	r2, #1
   b5730:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5734:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5736:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5738:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b573a:	42bc      	cmp	r4, r7
   b573c:	dc1c      	bgt.n	b5778 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b573e:	f8db 2000 	ldr.w	r2, [fp]
   b5742:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5744:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5746:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b574a:	bfc7      	ittee	gt
   b574c:	4629      	movgt	r1, r5
   b574e:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5750:	462a      	movle	r2, r5
   b5752:	4621      	movle	r1, r4
   b5754:	4658      	mov	r0, fp
   b5756:	47c0      	blx	r8
    }
    err -= dy;
   b5758:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b575a:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b575c:	1ab6      	subs	r6, r6, r2
   b575e:	b2b1      	uxth	r1, r6
   b5760:	b236      	sxth	r6, r6
    if (err < 0) {
   b5762:	2e00      	cmp	r6, #0
   b5764:	da05      	bge.n	b5772 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5766:	9a02      	ldr	r2, [sp, #8]
   b5768:	4415      	add	r5, r2
      err += dx;
   b576a:	9a00      	ldr	r2, [sp, #0]
   b576c:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b576e:	b22d      	sxth	r5, r5
      err += dx;
   b5770:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b5772:	3401      	adds	r4, #1
   b5774:	b224      	sxth	r4, r4
   b5776:	e7e0      	b.n	b573a <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5778:	b005      	add	sp, #20
   b577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b577e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b577e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5782:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b5786:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5788:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b578c:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5790:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b5792:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5794:	4616      	mov	r6, r2
   b5796:	468a      	mov	sl, r1
   b5798:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b579a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b579c:	6823      	ldr	r3, [r4, #0]
   b579e:	f8cd 8000 	str.w	r8, [sp]
   b57a2:	f109 32ff 	add.w	r2, r9, #4294967295
   b57a6:	4432      	add	r2, r6
   b57a8:	69df      	ldr	r7, [r3, #28]
   b57aa:	4651      	mov	r1, sl
   b57ac:	462b      	mov	r3, r5
   b57ae:	4620      	mov	r0, r4
   b57b0:	b212      	sxth	r2, r2
   b57b2:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b57b4:	6823      	ldr	r3, [r4, #0]
   b57b6:	f8cd 8000 	str.w	r8, [sp]
   b57ba:	699f      	ldr	r7, [r3, #24]
   b57bc:	4632      	mov	r2, r6
   b57be:	464b      	mov	r3, r9
   b57c0:	4651      	mov	r1, sl
   b57c2:	4620      	mov	r0, r4
   b57c4:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b57c6:	1e6b      	subs	r3, r5, #1
   b57c8:	eb03 010a 	add.w	r1, r3, sl
   b57cc:	6823      	ldr	r3, [r4, #0]
   b57ce:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b57d2:	699d      	ldr	r5, [r3, #24]
   b57d4:	4632      	mov	r2, r6
   b57d6:	464b      	mov	r3, r9
   b57d8:	b209      	sxth	r1, r1
   b57da:	4620      	mov	r0, r4
   b57dc:	46ac      	mov	ip, r5
}
   b57de:	b002      	add	sp, #8
   b57e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b57e4:	4760      	bx	ip

000b57e6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b57e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b57e8:	3b01      	subs	r3, #1
   b57ea:	4413      	add	r3, r2
   b57ec:	6804      	ldr	r4, [r0, #0]
   b57ee:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b57f2:	9501      	str	r5, [sp, #4]
   b57f4:	b21b      	sxth	r3, r3
   b57f6:	9300      	str	r3, [sp, #0]
   b57f8:	6964      	ldr	r4, [r4, #20]
   b57fa:	460b      	mov	r3, r1
   b57fc:	47a0      	blx	r4
}
   b57fe:	b003      	add	sp, #12
   b5800:	bd30      	pop	{r4, r5, pc}

000b5802 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5802:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5804:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5808:	6804      	ldr	r4, [r0, #0]
   b580a:	e9cd 2500 	strd	r2, r5, [sp]
   b580e:	3b01      	subs	r3, #1
   b5810:	440b      	add	r3, r1
   b5812:	6964      	ldr	r4, [r4, #20]
   b5814:	b21b      	sxth	r3, r3
   b5816:	47a0      	blx	r4
}
   b5818:	b003      	add	sp, #12
   b581a:	bd30      	pop	{r4, r5, pc}

000b581c <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b581c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5820:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5824:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5828:	4605      	mov	r5, r0
   b582a:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b582c:	460c      	mov	r4, r1
   b582e:	18ce      	adds	r6, r1, r3
   b5830:	42b4      	cmp	r4, r6
   b5832:	da0b      	bge.n	b584c <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5834:	682b      	ldr	r3, [r5, #0]
   b5836:	f8cd 8000 	str.w	r8, [sp]
   b583a:	699f      	ldr	r7, [r3, #24]
   b583c:	4621      	mov	r1, r4
   b583e:	464b      	mov	r3, r9
   b5840:	4652      	mov	r2, sl
   b5842:	4628      	mov	r0, r5
   b5844:	3401      	adds	r4, #1
   b5846:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5848:	b224      	sxth	r4, r4
   b584a:	e7f1      	b.n	b5830 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b584c:	b002      	add	sp, #8
   b584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5852 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5852:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5854:	6802      	ldr	r2, [r0, #0]
   b5856:	9101      	str	r1, [sp, #4]
   b5858:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b585c:	9100      	str	r1, [sp, #0]
   b585e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5860:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5864:	2200      	movs	r2, #0
   b5866:	4611      	mov	r1, r2
   b5868:	47a0      	blx	r4
}
   b586a:	b002      	add	sp, #8
   b586c:	bd10      	pop	{r4, pc}

000b586e <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b586e:	4770      	bx	lr

000b5870 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5870:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5872:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5874:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5876:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b587a:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b587c:	4d05      	ldr	r5, [pc, #20]	; (b5894 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b587e:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5880:	2201      	movs	r2, #1
   b5882:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5884:	6005      	str	r5, [r0, #0]
   b5886:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5888:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b588a:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b588c:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b588e:	7682      	strb	r2, [r0, #26]
}
   b5890:	bd30      	pop	{r4, r5, pc}
   b5892:	bf00      	nop
   b5894:	000b878c 	.word	0x000b878c

000b5898 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b589c:	ed2d 8b02 	vpush	{d8}
   b58a0:	b08d      	sub	sp, #52	; 0x34
   b58a2:	4607      	mov	r7, r0
   b58a4:	9104      	str	r1, [sp, #16]
   b58a6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b58aa:	9105      	str	r1, [sp, #20]
   b58ac:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b58b0:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b58b2:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b58b6:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b58b8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b58bc:	4281      	cmp	r1, r0
   b58be:	dd52      	ble.n	b5966 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b58c0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b58c4:	4291      	cmp	r1, r2
   b58c6:	dd4e      	ble.n	b5966 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b58c8:	2106      	movs	r1, #6
   b58ca:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b58ce:	2c00      	cmp	r4, #0
   b58d0:	dd49      	ble.n	b5966 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b58d2:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b58d6:	2c00      	cmp	r4, #0
   b58d8:	dd45      	ble.n	b5966 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b58da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b58de:	930b      	str	r3, [sp, #44]	; 0x2c
   b58e0:	b293      	uxth	r3, r2
   b58e2:	9307      	str	r3, [sp, #28]
   b58e4:	3308      	adds	r3, #8
   b58e6:	b29b      	uxth	r3, r3
   b58e8:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b58ea:	2400      	movs	r4, #0
   b58ec:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b58ee:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b58f0:	bf1c      	itt	ne
   b58f2:	4b2c      	ldrne	r3, [pc, #176]	; (b59a4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b58f4:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b58f6:	9e07      	ldr	r6, [sp, #28]
   b58f8:	bf16      	itet	ne
   b58fa:	191b      	addne	r3, r3, r4
      line = 0x0;
   b58fc:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b58fe:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5900:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5902:	9a04      	ldr	r2, [sp, #16]
   b5904:	b2ab      	uxth	r3, r5
   b5906:	930a      	str	r3, [sp, #40]	; 0x28
   b5908:	fb04 f305 	mul.w	r3, r4, r5
   b590c:	fa13 f382 	uxtah	r3, r3, r2
   b5910:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5912:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5916:	ee08 3a10 	vmov	s16, r3
   b591a:	46b0      	mov	r8, r6
   b591c:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5920:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5924:	9b03      	ldr	r3, [sp, #12]
   b5926:	07db      	lsls	r3, r3, #31
   b5928:	d52f      	bpl.n	b598a <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b592a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b592c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b592e:	d11f      	bne.n	b5970 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5930:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5934:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5936:	b232      	sxth	r2, r6
   b5938:	4651      	mov	r1, sl
   b593a:	4638      	mov	r0, r7
   b593c:	47d8      	blx	fp
      line >>= 1;
   b593e:	9b03      	ldr	r3, [sp, #12]
   b5940:	085b      	lsrs	r3, r3, #1
   b5942:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5946:	3601      	adds	r6, #1
   b5948:	4498      	add	r8, r3
   b594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b594c:	b2b6      	uxth	r6, r6
   b594e:	42b3      	cmp	r3, r6
   b5950:	fa1f f888 	uxth.w	r8, r8
   b5954:	d1e6      	bne.n	b5924 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5956:	9b08      	ldr	r3, [sp, #32]
   b5958:	3b01      	subs	r3, #1
   b595a:	3401      	adds	r4, #1
   b595c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5960:	b264      	sxtb	r4, r4
   b5962:	9308      	str	r3, [sp, #32]
   b5964:	d1c3      	bne.n	b58ee <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5966:	b00d      	add	sp, #52	; 0x34
   b5968:	ecbd 8b02 	vpop	{d8}
   b596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5970:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5972:	e9cd 9200 	strd	r9, r2, [sp]
   b5976:	ee18 1a10 	vmov	r1, s16
   b597a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b597e:	fa0f f288 	sxth.w	r2, r8
   b5982:	464b      	mov	r3, r9
   b5984:	4638      	mov	r0, r7
   b5986:	47d8      	blx	fp
   b5988:	e7d9      	b.n	b593e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b598a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b598e:	4293      	cmp	r3, r2
   b5990:	d0d5      	beq.n	b593e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5992:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5994:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5996:	d103      	bne.n	b59a0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5998:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b599c:	9b06      	ldr	r3, [sp, #24]
   b599e:	e7ca      	b.n	b5936 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b59a0:	9a06      	ldr	r2, [sp, #24]
   b59a2:	e7e6      	b.n	b5972 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b59a4:	000b8288 	.word	0x000b8288

000b59a8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b59a8:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b59aa:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b59ac:	b085      	sub	sp, #20
   b59ae:	4604      	mov	r4, r0
  if (c == '\n') {
   b59b0:	d107      	bne.n	b59c2 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b59b2:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b59b4:	8a63      	ldrh	r3, [r4, #18]
   b59b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b59ba:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b59bc:	2300      	movs	r3, #0
   b59be:	8223      	strh	r3, [r4, #16]
   b59c0:	e021      	b.n	b5a06 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b59c2:	290d      	cmp	r1, #13
   b59c4:	d01f      	beq.n	b5a06 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b59c6:	7e03      	ldrb	r3, [r0, #24]
   b59c8:	9302      	str	r3, [sp, #8]
   b59ca:	8ac3      	ldrh	r3, [r0, #22]
   b59cc:	9301      	str	r3, [sp, #4]
   b59ce:	8a83      	ldrh	r3, [r0, #20]
   b59d0:	9300      	str	r3, [sp, #0]
   b59d2:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b59d6:	460b      	mov	r3, r1
   b59d8:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b59dc:	f7ff ff5c 	bl	b5898 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b59e0:	7e20      	ldrb	r0, [r4, #24]
   b59e2:	8a23      	ldrh	r3, [r4, #16]
   b59e4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b59e8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b59ec:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b59ee:	b21b      	sxth	r3, r3
   b59f0:	4602      	mov	r2, r0
   b59f2:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b59f4:	b139      	cbz	r1, b5a06 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b59f6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b59fa:	f06f 0505 	mvn.w	r5, #5
   b59fe:	fb05 1100 	mla	r1, r5, r0, r1
   b5a02:	428b      	cmp	r3, r1
   b5a04:	dcd6      	bgt.n	b59b4 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5a06:	2001      	movs	r0, #1
   b5a08:	b005      	add	sp, #20
   b5a0a:	bd30      	pop	{r4, r5, pc}

000b5a0c <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5a0c:	2901      	cmp	r1, #1
   b5a0e:	bf38      	it	cc
   b5a10:	2101      	movcc	r1, #1
   b5a12:	7601      	strb	r1, [r0, #24]
}
   b5a14:	4770      	bx	lr

000b5a16 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5a16:	82c1      	strh	r1, [r0, #22]
   b5a18:	8281      	strh	r1, [r0, #20]
}
   b5a1a:	4770      	bx	lr

000b5a1c <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5a1c:	7e40      	ldrb	r0, [r0, #25]
   b5a1e:	4770      	bx	lr

000b5a20 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b5a20:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b5a24:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b5a28:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b5a2a:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b5a2c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5a30:	bf59      	ittee	pl
   b5a32:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b5a34:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b5a36:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b5a38:	81c3      	strhmi	r3, [r0, #14]
}
   b5a3a:	4770      	bx	lr

000b5a3c <_ZN12Adafruit_GFX5widthEv>:
}
   b5a3c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5a40:	4770      	bx	lr

000b5a42 <_ZN12Adafruit_GFX6heightEv>:
}
   b5a42:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5a46:	4770      	bx	lr

000b5a48 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5a48:	b508      	push	{r3, lr}
   b5a4a:	4b02      	ldr	r3, [pc, #8]	; (b5a54 <netdb_freeaddrinfo+0xc>)
   b5a4c:	681b      	ldr	r3, [r3, #0]
   b5a4e:	689b      	ldr	r3, [r3, #8]
   b5a50:	9301      	str	r3, [sp, #4]
   b5a52:	bd08      	pop	{r3, pc}
   b5a54:	00030268 	.word	0x00030268

000b5a58 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5a58:	b508      	push	{r3, lr}
   b5a5a:	4b02      	ldr	r3, [pc, #8]	; (b5a64 <netdb_getaddrinfo+0xc>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
   b5a5e:	68db      	ldr	r3, [r3, #12]
   b5a60:	9301      	str	r3, [sp, #4]
   b5a62:	bd08      	pop	{r3, pc}
   b5a64:	00030268 	.word	0x00030268

000b5a68 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5a68:	b508      	push	{r3, lr}
   b5a6a:	4b02      	ldr	r3, [pc, #8]	; (b5a74 <HAL_Pin_Mode+0xc>)
   b5a6c:	681b      	ldr	r3, [r3, #0]
   b5a6e:	689b      	ldr	r3, [r3, #8]
   b5a70:	9301      	str	r3, [sp, #4]
   b5a72:	bd08      	pop	{r3, pc}
   b5a74:	0003022c 	.word	0x0003022c

000b5a78 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5a78:	b508      	push	{r3, lr}
   b5a7a:	4b02      	ldr	r3, [pc, #8]	; (b5a84 <HAL_Get_Pin_Mode+0xc>)
   b5a7c:	681b      	ldr	r3, [r3, #0]
   b5a7e:	68db      	ldr	r3, [r3, #12]
   b5a80:	9301      	str	r3, [sp, #4]
   b5a82:	bd08      	pop	{r3, pc}
   b5a84:	0003022c 	.word	0x0003022c

000b5a88 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5a88:	b508      	push	{r3, lr}
   b5a8a:	4b02      	ldr	r3, [pc, #8]	; (b5a94 <HAL_GPIO_Write+0xc>)
   b5a8c:	681b      	ldr	r3, [r3, #0]
   b5a8e:	691b      	ldr	r3, [r3, #16]
   b5a90:	9301      	str	r3, [sp, #4]
   b5a92:	bd08      	pop	{r3, pc}
   b5a94:	0003022c 	.word	0x0003022c

000b5a98 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5a98:	b508      	push	{r3, lr}
   b5a9a:	4b02      	ldr	r3, [pc, #8]	; (b5aa4 <HAL_GPIO_Read+0xc>)
   b5a9c:	681b      	ldr	r3, [r3, #0]
   b5a9e:	695b      	ldr	r3, [r3, #20]
   b5aa0:	9301      	str	r3, [sp, #4]
   b5aa2:	bd08      	pop	{r3, pc}
   b5aa4:	0003022c 	.word	0x0003022c

000b5aa8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5aa8:	b508      	push	{r3, lr}
   b5aaa:	4b02      	ldr	r3, [pc, #8]	; (b5ab4 <if_index_to_name+0xc>)
   b5aac:	681b      	ldr	r3, [r3, #0]
   b5aae:	695b      	ldr	r3, [r3, #20]
   b5ab0:	9301      	str	r3, [sp, #4]
   b5ab2:	bd08      	pop	{r3, pc}
   b5ab4:	0003026c 	.word	0x0003026c

000b5ab8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5ab8:	b508      	push	{r3, lr}
   b5aba:	4b02      	ldr	r3, [pc, #8]	; (b5ac4 <HAL_RNG_GetRandomNumber+0xc>)
   b5abc:	681b      	ldr	r3, [r3, #0]
   b5abe:	685b      	ldr	r3, [r3, #4]
   b5ac0:	9301      	str	r3, [sp, #4]
   b5ac2:	bd08      	pop	{r3, pc}
   b5ac4:	00030218 	.word	0x00030218

000b5ac8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5ac8:	b508      	push	{r3, lr}
   b5aca:	4b02      	ldr	r3, [pc, #8]	; (b5ad4 <HAL_Delay_Microseconds+0xc>)
   b5acc:	681b      	ldr	r3, [r3, #0]
   b5ace:	68db      	ldr	r3, [r3, #12]
   b5ad0:	9301      	str	r3, [sp, #4]
   b5ad2:	bd08      	pop	{r3, pc}
   b5ad4:	00030218 	.word	0x00030218

000b5ad8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5ad8:	b508      	push	{r3, lr}
   b5ada:	4b02      	ldr	r3, [pc, #8]	; (b5ae4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5adc:	681b      	ldr	r3, [r3, #0]
   b5ade:	691b      	ldr	r3, [r3, #16]
   b5ae0:	9301      	str	r3, [sp, #4]
   b5ae2:	bd08      	pop	{r3, pc}
   b5ae4:	00030218 	.word	0x00030218

000b5ae8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5ae8:	b508      	push	{r3, lr}
   b5aea:	4b02      	ldr	r3, [pc, #8]	; (b5af4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5aec:	681b      	ldr	r3, [r3, #0]
   b5aee:	695b      	ldr	r3, [r3, #20]
   b5af0:	9301      	str	r3, [sp, #4]
   b5af2:	bd08      	pop	{r3, pc}
   b5af4:	00030218 	.word	0x00030218

000b5af8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5af8:	b508      	push	{r3, lr}
   b5afa:	4b02      	ldr	r3, [pc, #8]	; (b5b04 <hal_timer_millis+0xc>)
   b5afc:	681b      	ldr	r3, [r3, #0]
   b5afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5b00:	9301      	str	r3, [sp, #4]
   b5b02:	bd08      	pop	{r3, pc}
   b5b04:	00030218 	.word	0x00030218

000b5b08 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5b08:	b508      	push	{r3, lr}
   b5b0a:	4b02      	ldr	r3, [pc, #8]	; (b5b14 <os_mutex_recursive_create+0xc>)
   b5b0c:	681b      	ldr	r3, [r3, #0]
   b5b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b10:	9301      	str	r3, [sp, #4]
   b5b12:	bd08      	pop	{r3, pc}
   b5b14:	00030248 	.word	0x00030248

000b5b18 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5b18:	b508      	push	{r3, lr}
   b5b1a:	4b02      	ldr	r3, [pc, #8]	; (b5b24 <inet_inet_ntop+0xc>)
   b5b1c:	681b      	ldr	r3, [r3, #0]
   b5b1e:	695b      	ldr	r3, [r3, #20]
   b5b20:	9301      	str	r3, [sp, #4]
   b5b22:	bd08      	pop	{r3, pc}
   b5b24:	00030264 	.word	0x00030264

000b5b28 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5b28:	b508      	push	{r3, lr}
   b5b2a:	4b02      	ldr	r3, [pc, #8]	; (b5b34 <inet_htonl+0xc>)
   b5b2c:	681b      	ldr	r3, [r3, #0]
   b5b2e:	6a1b      	ldr	r3, [r3, #32]
   b5b30:	9301      	str	r3, [sp, #4]
   b5b32:	bd08      	pop	{r3, pc}
   b5b34:	00030264 	.word	0x00030264

000b5b38 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <inet_htons+0xc>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b40:	9301      	str	r3, [sp, #4]
   b5b42:	bd08      	pop	{r3, pc}
   b5b44:	00030264 	.word	0x00030264

000b5b48 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5b48:	b508      	push	{r3, lr}
   b5b4a:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <hal_usart_write+0xc>)
   b5b4c:	681b      	ldr	r3, [r3, #0]
   b5b4e:	68db      	ldr	r3, [r3, #12]
   b5b50:	9301      	str	r3, [sp, #4]
   b5b52:	bd08      	pop	{r3, pc}
   b5b54:	0003023c 	.word	0x0003023c

000b5b58 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5b58:	b508      	push	{r3, lr}
   b5b5a:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <hal_usart_available+0xc>)
   b5b5c:	681b      	ldr	r3, [r3, #0]
   b5b5e:	691b      	ldr	r3, [r3, #16]
   b5b60:	9301      	str	r3, [sp, #4]
   b5b62:	bd08      	pop	{r3, pc}
   b5b64:	0003023c 	.word	0x0003023c

000b5b68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5b68:	b508      	push	{r3, lr}
   b5b6a:	4b02      	ldr	r3, [pc, #8]	; (b5b74 <hal_usart_read+0xc>)
   b5b6c:	681b      	ldr	r3, [r3, #0]
   b5b6e:	695b      	ldr	r3, [r3, #20]
   b5b70:	9301      	str	r3, [sp, #4]
   b5b72:	bd08      	pop	{r3, pc}
   b5b74:	0003023c 	.word	0x0003023c

000b5b78 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5b78:	b508      	push	{r3, lr}
   b5b7a:	4b02      	ldr	r3, [pc, #8]	; (b5b84 <hal_usart_peek+0xc>)
   b5b7c:	681b      	ldr	r3, [r3, #0]
   b5b7e:	699b      	ldr	r3, [r3, #24]
   b5b80:	9301      	str	r3, [sp, #4]
   b5b82:	bd08      	pop	{r3, pc}
   b5b84:	0003023c 	.word	0x0003023c

000b5b88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5b88:	b508      	push	{r3, lr}
   b5b8a:	4b02      	ldr	r3, [pc, #8]	; (b5b94 <hal_usart_flush+0xc>)
   b5b8c:	681b      	ldr	r3, [r3, #0]
   b5b8e:	69db      	ldr	r3, [r3, #28]
   b5b90:	9301      	str	r3, [sp, #4]
   b5b92:	bd08      	pop	{r3, pc}
   b5b94:	0003023c 	.word	0x0003023c

000b5b98 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5b98:	b508      	push	{r3, lr}
   b5b9a:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <hal_usart_is_enabled+0xc>)
   b5b9c:	681b      	ldr	r3, [r3, #0]
   b5b9e:	6a1b      	ldr	r3, [r3, #32]
   b5ba0:	9301      	str	r3, [sp, #4]
   b5ba2:	bd08      	pop	{r3, pc}
   b5ba4:	0003023c 	.word	0x0003023c

000b5ba8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5ba8:	b508      	push	{r3, lr}
   b5baa:	4b02      	ldr	r3, [pc, #8]	; (b5bb4 <hal_usart_available_data_for_write+0xc>)
   b5bac:	681b      	ldr	r3, [r3, #0]
   b5bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5bb0:	9301      	str	r3, [sp, #4]
   b5bb2:	bd08      	pop	{r3, pc}
   b5bb4:	0003023c 	.word	0x0003023c

000b5bb8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5bb8:	b508      	push	{r3, lr}
   b5bba:	4b02      	ldr	r3, [pc, #8]	; (b5bc4 <hal_usart_init_ex+0xc>)
   b5bbc:	681b      	ldr	r3, [r3, #0]
   b5bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bc0:	9301      	str	r3, [sp, #4]
   b5bc2:	bd08      	pop	{r3, pc}
   b5bc4:	0003023c 	.word	0x0003023c

000b5bc8 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <hal_i2c_begin+0xc>)
   b5bcc:	681b      	ldr	r3, [r3, #0]
   b5bce:	68db      	ldr	r3, [r3, #12]
   b5bd0:	9301      	str	r3, [sp, #4]
   b5bd2:	bd08      	pop	{r3, pc}
   b5bd4:	00030228 	.word	0x00030228

000b5bd8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5bd8:	b508      	push	{r3, lr}
   b5bda:	4b02      	ldr	r3, [pc, #8]	; (b5be4 <hal_i2c_begin_transmission+0xc>)
   b5bdc:	681b      	ldr	r3, [r3, #0]
   b5bde:	699b      	ldr	r3, [r3, #24]
   b5be0:	9301      	str	r3, [sp, #4]
   b5be2:	bd08      	pop	{r3, pc}
   b5be4:	00030228 	.word	0x00030228

000b5be8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5be8:	b508      	push	{r3, lr}
   b5bea:	4b02      	ldr	r3, [pc, #8]	; (b5bf4 <hal_i2c_end_transmission+0xc>)
   b5bec:	681b      	ldr	r3, [r3, #0]
   b5bee:	69db      	ldr	r3, [r3, #28]
   b5bf0:	9301      	str	r3, [sp, #4]
   b5bf2:	bd08      	pop	{r3, pc}
   b5bf4:	00030228 	.word	0x00030228

000b5bf8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5bf8:	b508      	push	{r3, lr}
   b5bfa:	4b02      	ldr	r3, [pc, #8]	; (b5c04 <hal_i2c_write+0xc>)
   b5bfc:	681b      	ldr	r3, [r3, #0]
   b5bfe:	6a1b      	ldr	r3, [r3, #32]
   b5c00:	9301      	str	r3, [sp, #4]
   b5c02:	bd08      	pop	{r3, pc}
   b5c04:	00030228 	.word	0x00030228

000b5c08 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5c08:	b508      	push	{r3, lr}
   b5c0a:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <hal_i2c_available+0xc>)
   b5c0c:	681b      	ldr	r3, [r3, #0]
   b5c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c10:	9301      	str	r3, [sp, #4]
   b5c12:	bd08      	pop	{r3, pc}
   b5c14:	00030228 	.word	0x00030228

000b5c18 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5c18:	b508      	push	{r3, lr}
   b5c1a:	4b02      	ldr	r3, [pc, #8]	; (b5c24 <hal_i2c_read+0xc>)
   b5c1c:	681b      	ldr	r3, [r3, #0]
   b5c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c20:	9301      	str	r3, [sp, #4]
   b5c22:	bd08      	pop	{r3, pc}
   b5c24:	00030228 	.word	0x00030228

000b5c28 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5c28:	b508      	push	{r3, lr}
   b5c2a:	4b02      	ldr	r3, [pc, #8]	; (b5c34 <hal_i2c_peek+0xc>)
   b5c2c:	681b      	ldr	r3, [r3, #0]
   b5c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c30:	9301      	str	r3, [sp, #4]
   b5c32:	bd08      	pop	{r3, pc}
   b5c34:	00030228 	.word	0x00030228

000b5c38 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5c38:	b508      	push	{r3, lr}
   b5c3a:	4b02      	ldr	r3, [pc, #8]	; (b5c44 <hal_i2c_flush+0xc>)
   b5c3c:	681b      	ldr	r3, [r3, #0]
   b5c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c40:	9301      	str	r3, [sp, #4]
   b5c42:	bd08      	pop	{r3, pc}
   b5c44:	00030228 	.word	0x00030228

000b5c48 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5c48:	b508      	push	{r3, lr}
   b5c4a:	4b02      	ldr	r3, [pc, #8]	; (b5c54 <hal_i2c_is_enabled+0xc>)
   b5c4c:	681b      	ldr	r3, [r3, #0]
   b5c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5c50:	9301      	str	r3, [sp, #4]
   b5c52:	bd08      	pop	{r3, pc}
   b5c54:	00030228 	.word	0x00030228

000b5c58 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5c58:	b508      	push	{r3, lr}
   b5c5a:	4b02      	ldr	r3, [pc, #8]	; (b5c64 <hal_i2c_init+0xc>)
   b5c5c:	681b      	ldr	r3, [r3, #0]
   b5c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c60:	9301      	str	r3, [sp, #4]
   b5c62:	bd08      	pop	{r3, pc}
   b5c64:	00030228 	.word	0x00030228

000b5c68 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5c68:	b508      	push	{r3, lr}
   b5c6a:	4b02      	ldr	r3, [pc, #8]	; (b5c74 <hal_i2c_request_ex+0xc>)
   b5c6c:	681b      	ldr	r3, [r3, #0]
   b5c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5c70:	9301      	str	r3, [sp, #4]
   b5c72:	bd08      	pop	{r3, pc}
   b5c74:	00030228 	.word	0x00030228

000b5c78 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5c78:	b508      	push	{r3, lr}
   b5c7a:	4b02      	ldr	r3, [pc, #8]	; (b5c84 <sock_setsockopt+0xc>)
   b5c7c:	681b      	ldr	r3, [r3, #0]
   b5c7e:	699b      	ldr	r3, [r3, #24]
   b5c80:	9301      	str	r3, [sp, #4]
   b5c82:	bd08      	pop	{r3, pc}
   b5c84:	00030238 	.word	0x00030238

000b5c88 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5c88:	b508      	push	{r3, lr}
   b5c8a:	4b02      	ldr	r3, [pc, #8]	; (b5c94 <sock_close+0xc>)
   b5c8c:	681b      	ldr	r3, [r3, #0]
   b5c8e:	69db      	ldr	r3, [r3, #28]
   b5c90:	9301      	str	r3, [sp, #4]
   b5c92:	bd08      	pop	{r3, pc}
   b5c94:	00030238 	.word	0x00030238

000b5c98 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5c98:	b508      	push	{r3, lr}
   b5c9a:	4b02      	ldr	r3, [pc, #8]	; (b5ca4 <sock_connect+0xc>)
   b5c9c:	681b      	ldr	r3, [r3, #0]
   b5c9e:	6a1b      	ldr	r3, [r3, #32]
   b5ca0:	9301      	str	r3, [sp, #4]
   b5ca2:	bd08      	pop	{r3, pc}
   b5ca4:	00030238 	.word	0x00030238

000b5ca8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5ca8:	b508      	push	{r3, lr}
   b5caa:	4b02      	ldr	r3, [pc, #8]	; (b5cb4 <sock_recv+0xc>)
   b5cac:	681b      	ldr	r3, [r3, #0]
   b5cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5cb0:	9301      	str	r3, [sp, #4]
   b5cb2:	bd08      	pop	{r3, pc}
   b5cb4:	00030238 	.word	0x00030238

000b5cb8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5cb8:	b508      	push	{r3, lr}
   b5cba:	4b02      	ldr	r3, [pc, #8]	; (b5cc4 <sock_send+0xc>)
   b5cbc:	681b      	ldr	r3, [r3, #0]
   b5cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5cc0:	9301      	str	r3, [sp, #4]
   b5cc2:	bd08      	pop	{r3, pc}
   b5cc4:	00030238 	.word	0x00030238

000b5cc8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5cc8:	b508      	push	{r3, lr}
   b5cca:	4b02      	ldr	r3, [pc, #8]	; (b5cd4 <sock_socket+0xc>)
   b5ccc:	681b      	ldr	r3, [r3, #0]
   b5cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5cd0:	9301      	str	r3, [sp, #4]
   b5cd2:	bd08      	pop	{r3, pc}
   b5cd4:	00030238 	.word	0x00030238

000b5cd8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5cd8:	b508      	push	{r3, lr}
   b5cda:	4b02      	ldr	r3, [pc, #8]	; (b5ce4 <hal_spi_begin+0xc>)
   b5cdc:	681b      	ldr	r3, [r3, #0]
   b5cde:	681b      	ldr	r3, [r3, #0]
   b5ce0:	9301      	str	r3, [sp, #4]
   b5ce2:	bd08      	pop	{r3, pc}
   b5ce4:	00030230 	.word	0x00030230

000b5ce8 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5ce8:	b508      	push	{r3, lr}
   b5cea:	4b02      	ldr	r3, [pc, #8]	; (b5cf4 <hal_spi_set_bit_order+0xc>)
   b5cec:	681b      	ldr	r3, [r3, #0]
   b5cee:	689b      	ldr	r3, [r3, #8]
   b5cf0:	9301      	str	r3, [sp, #4]
   b5cf2:	bd08      	pop	{r3, pc}
   b5cf4:	00030230 	.word	0x00030230

000b5cf8 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5cf8:	b508      	push	{r3, lr}
   b5cfa:	4b02      	ldr	r3, [pc, #8]	; (b5d04 <hal_spi_set_data_mode+0xc>)
   b5cfc:	681b      	ldr	r3, [r3, #0]
   b5cfe:	68db      	ldr	r3, [r3, #12]
   b5d00:	9301      	str	r3, [sp, #4]
   b5d02:	bd08      	pop	{r3, pc}
   b5d04:	00030230 	.word	0x00030230

000b5d08 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5d08:	b508      	push	{r3, lr}
   b5d0a:	4b02      	ldr	r3, [pc, #8]	; (b5d14 <hal_spi_set_clock_divider+0xc>)
   b5d0c:	681b      	ldr	r3, [r3, #0]
   b5d0e:	691b      	ldr	r3, [r3, #16]
   b5d10:	9301      	str	r3, [sp, #4]
   b5d12:	bd08      	pop	{r3, pc}
   b5d14:	00030230 	.word	0x00030230

000b5d18 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5d18:	b508      	push	{r3, lr}
   b5d1a:	4b02      	ldr	r3, [pc, #8]	; (b5d24 <hal_spi_transfer+0xc>)
   b5d1c:	681b      	ldr	r3, [r3, #0]
   b5d1e:	695b      	ldr	r3, [r3, #20]
   b5d20:	9301      	str	r3, [sp, #4]
   b5d22:	bd08      	pop	{r3, pc}
   b5d24:	00030230 	.word	0x00030230

000b5d28 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5d28:	b508      	push	{r3, lr}
   b5d2a:	4b02      	ldr	r3, [pc, #8]	; (b5d34 <hal_spi_init+0xc>)
   b5d2c:	681b      	ldr	r3, [r3, #0]
   b5d2e:	69db      	ldr	r3, [r3, #28]
   b5d30:	9301      	str	r3, [sp, #4]
   b5d32:	bd08      	pop	{r3, pc}
   b5d34:	00030230 	.word	0x00030230

000b5d38 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5d38:	b508      	push	{r3, lr}
   b5d3a:	4b02      	ldr	r3, [pc, #8]	; (b5d44 <hal_spi_is_enabled+0xc>)
   b5d3c:	681b      	ldr	r3, [r3, #0]
   b5d3e:	6a1b      	ldr	r3, [r3, #32]
   b5d40:	9301      	str	r3, [sp, #4]
   b5d42:	bd08      	pop	{r3, pc}
   b5d44:	00030230 	.word	0x00030230

000b5d48 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5d48:	b508      	push	{r3, lr}
   b5d4a:	4b02      	ldr	r3, [pc, #8]	; (b5d54 <hal_spi_info+0xc>)
   b5d4c:	681b      	ldr	r3, [r3, #0]
   b5d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d50:	9301      	str	r3, [sp, #4]
   b5d52:	bd08      	pop	{r3, pc}
   b5d54:	00030230 	.word	0x00030230

000b5d58 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5d58:	b508      	push	{r3, lr}
   b5d5a:	4b02      	ldr	r3, [pc, #8]	; (b5d64 <hal_spi_set_settings+0xc>)
   b5d5c:	681b      	ldr	r3, [r3, #0]
   b5d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5d60:	9301      	str	r3, [sp, #4]
   b5d62:	bd08      	pop	{r3, pc}
   b5d64:	00030230 	.word	0x00030230

000b5d68 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5d68:	b508      	push	{r3, lr}
   b5d6a:	4b02      	ldr	r3, [pc, #8]	; (b5d74 <hal_spi_acquire+0xc>)
   b5d6c:	681b      	ldr	r3, [r3, #0]
   b5d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d70:	9301      	str	r3, [sp, #4]
   b5d72:	bd08      	pop	{r3, pc}
   b5d74:	00030230 	.word	0x00030230

000b5d78 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5d78:	b508      	push	{r3, lr}
   b5d7a:	4b02      	ldr	r3, [pc, #8]	; (b5d84 <hal_spi_release+0xc>)
   b5d7c:	681b      	ldr	r3, [r3, #0]
   b5d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d80:	9301      	str	r3, [sp, #4]
   b5d82:	bd08      	pop	{r3, pc}
   b5d84:	00030230 	.word	0x00030230

000b5d88 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5d88:	b508      	push	{r3, lr}
   b5d8a:	4b02      	ldr	r3, [pc, #8]	; (b5d94 <HAL_USB_USART_Init+0xc>)
   b5d8c:	681b      	ldr	r3, [r3, #0]
   b5d8e:	681b      	ldr	r3, [r3, #0]
   b5d90:	9301      	str	r3, [sp, #4]
   b5d92:	bd08      	pop	{r3, pc}
   b5d94:	0003024c 	.word	0x0003024c

000b5d98 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5d98:	b508      	push	{r3, lr}
   b5d9a:	4b02      	ldr	r3, [pc, #8]	; (b5da4 <HAL_USB_USART_Begin+0xc>)
   b5d9c:	681b      	ldr	r3, [r3, #0]
   b5d9e:	685b      	ldr	r3, [r3, #4]
   b5da0:	9301      	str	r3, [sp, #4]
   b5da2:	bd08      	pop	{r3, pc}
   b5da4:	0003024c 	.word	0x0003024c

000b5da8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5da8:	b508      	push	{r3, lr}
   b5daa:	4b02      	ldr	r3, [pc, #8]	; (b5db4 <HAL_USB_USART_Available_Data+0xc>)
   b5dac:	681b      	ldr	r3, [r3, #0]
   b5dae:	691b      	ldr	r3, [r3, #16]
   b5db0:	9301      	str	r3, [sp, #4]
   b5db2:	bd08      	pop	{r3, pc}
   b5db4:	0003024c 	.word	0x0003024c

000b5db8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5db8:	b508      	push	{r3, lr}
   b5dba:	4b02      	ldr	r3, [pc, #8]	; (b5dc4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5dbc:	681b      	ldr	r3, [r3, #0]
   b5dbe:	695b      	ldr	r3, [r3, #20]
   b5dc0:	9301      	str	r3, [sp, #4]
   b5dc2:	bd08      	pop	{r3, pc}
   b5dc4:	0003024c 	.word	0x0003024c

000b5dc8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5dc8:	b508      	push	{r3, lr}
   b5dca:	4b02      	ldr	r3, [pc, #8]	; (b5dd4 <HAL_USB_USART_Receive_Data+0xc>)
   b5dcc:	681b      	ldr	r3, [r3, #0]
   b5dce:	699b      	ldr	r3, [r3, #24]
   b5dd0:	9301      	str	r3, [sp, #4]
   b5dd2:	bd08      	pop	{r3, pc}
   b5dd4:	0003024c 	.word	0x0003024c

000b5dd8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5dd8:	b508      	push	{r3, lr}
   b5dda:	4b02      	ldr	r3, [pc, #8]	; (b5de4 <HAL_USB_USART_Send_Data+0xc>)
   b5ddc:	681b      	ldr	r3, [r3, #0]
   b5dde:	69db      	ldr	r3, [r3, #28]
   b5de0:	9301      	str	r3, [sp, #4]
   b5de2:	bd08      	pop	{r3, pc}
   b5de4:	0003024c 	.word	0x0003024c

000b5de8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5de8:	b508      	push	{r3, lr}
   b5dea:	4b02      	ldr	r3, [pc, #8]	; (b5df4 <HAL_USB_USART_Flush_Data+0xc>)
   b5dec:	681b      	ldr	r3, [r3, #0]
   b5dee:	6a1b      	ldr	r3, [r3, #32]
   b5df0:	9301      	str	r3, [sp, #4]
   b5df2:	bd08      	pop	{r3, pc}
   b5df4:	0003024c 	.word	0x0003024c

000b5df8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5df8:	b508      	push	{r3, lr}
   b5dfa:	4b02      	ldr	r3, [pc, #8]	; (b5e04 <HAL_USB_USART_Is_Connected+0xc>)
   b5dfc:	681b      	ldr	r3, [r3, #0]
   b5dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e00:	9301      	str	r3, [sp, #4]
   b5e02:	bd08      	pop	{r3, pc}
   b5e04:	0003024c 	.word	0x0003024c

000b5e08 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5e08:	b508      	push	{r3, lr}
   b5e0a:	4b02      	ldr	r3, [pc, #8]	; (b5e14 <panic_+0xc>)
   b5e0c:	681b      	ldr	r3, [r3, #0]
   b5e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e10:	9301      	str	r3, [sp, #4]
   b5e12:	bd08      	pop	{r3, pc}
   b5e14:	00030260 	.word	0x00030260

000b5e18 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b02      	ldr	r3, [pc, #8]	; (b5e24 <log_message+0xc>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5e20:	9301      	str	r3, [sp, #4]
   b5e22:	bd08      	pop	{r3, pc}
   b5e24:	00030260 	.word	0x00030260

000b5e28 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5e28:	b508      	push	{r3, lr}
   b5e2a:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <set_system_mode+0xc>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	685b      	ldr	r3, [r3, #4]
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	00030220 	.word	0x00030220

000b5e38 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5e38:	b508      	push	{r3, lr}
   b5e3a:	4b02      	ldr	r3, [pc, #8]	; (b5e44 <system_delay_ms+0xc>)
   b5e3c:	681b      	ldr	r3, [r3, #0]
   b5e3e:	695b      	ldr	r3, [r3, #20]
   b5e40:	9301      	str	r3, [sp, #4]
   b5e42:	bd08      	pop	{r3, pc}
   b5e44:	00030220 	.word	0x00030220

000b5e48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5e48:	b508      	push	{r3, lr}
   b5e4a:	4b03      	ldr	r3, [pc, #12]	; (b5e58 <system_ctrl_set_app_request_handler+0x10>)
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5e52:	9301      	str	r3, [sp, #4]
   b5e54:	bd08      	pop	{r3, pc}
   b5e56:	0000      	.short	0x0000
   b5e58:	00030220 	.word	0x00030220

000b5e5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b03      	ldr	r3, [pc, #12]	; (b5e6c <system_ctrl_set_result+0x10>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5e66:	9301      	str	r3, [sp, #4]
   b5e68:	bd08      	pop	{r3, pc}
   b5e6a:	0000      	.short	0x0000
   b5e6c:	00030220 	.word	0x00030220

000b5e70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <network_connect+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	685b      	ldr	r3, [r3, #4]
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	00030240 	.word	0x00030240

000b5e80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <network_connecting+0xc>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	689b      	ldr	r3, [r3, #8]
   b5e88:	9301      	str	r3, [sp, #4]
   b5e8a:	bd08      	pop	{r3, pc}
   b5e8c:	00030240 	.word	0x00030240

000b5e90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <network_disconnect+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	68db      	ldr	r3, [r3, #12]
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	00030240 	.word	0x00030240

000b5ea0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <network_ready+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	691b      	ldr	r3, [r3, #16]
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	00030240 	.word	0x00030240

000b5eb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <network_on+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	695b      	ldr	r3, [r3, #20]
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	00030240 	.word	0x00030240

000b5ec0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <network_off+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	699b      	ldr	r3, [r3, #24]
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	00030240 	.word	0x00030240

000b5ed0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <network_listen+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	69db      	ldr	r3, [r3, #28]
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	00030240 	.word	0x00030240

000b5ee0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b02      	ldr	r3, [pc, #8]	; (b5eec <network_listening+0xc>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	6a1b      	ldr	r3, [r3, #32]
   b5ee8:	9301      	str	r3, [sp, #4]
   b5eea:	bd08      	pop	{r3, pc}
   b5eec:	00030240 	.word	0x00030240

000b5ef0 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b5ef0:	b508      	push	{r3, lr}
   b5ef2:	4b02      	ldr	r3, [pc, #8]	; (b5efc <network_set_credentials+0xc>)
   b5ef4:	681b      	ldr	r3, [r3, #0]
   b5ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ef8:	9301      	str	r3, [sp, #4]
   b5efa:	bd08      	pop	{r3, pc}
   b5efc:	00030240 	.word	0x00030240

000b5f00 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <network_set_listen_timeout+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	00030240 	.word	0x00030240

000b5f10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <network_get_listen_timeout+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	00030240 	.word	0x00030240

000b5f20 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <network_is_on+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	00030240 	.word	0x00030240

000b5f30 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <network_is_off+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	00030240 	.word	0x00030240

000b5f40 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <spark_process+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	689b      	ldr	r3, [r3, #8]
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	00030244 	.word	0x00030244

000b5f50 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	00030244 	.word	0x00030244

000b5f60 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <malloc+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	681b      	ldr	r3, [r3, #0]
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	0003021c 	.word	0x0003021c

000b5f70 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <free+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	685b      	ldr	r3, [r3, #4]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	0003021c 	.word	0x0003021c

000b5f80 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <realloc+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	689b      	ldr	r3, [r3, #8]
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	0003021c 	.word	0x0003021c

000b5f90 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <vsnprintf+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	0003021c 	.word	0x0003021c

000b5fa0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <__errno+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	0003021c 	.word	0x0003021c

000b5fb0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <__assert_func+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	0003021c 	.word	0x0003021c

000b5fc0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <newlib_impure_ptr_callback+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	0003021c 	.word	0x0003021c

000b5fd0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5fd0:	2200      	movs	r2, #0
   b5fd2:	6840      	ldr	r0, [r0, #4]
   b5fd4:	4611      	mov	r1, r2
   b5fd6:	f7ff bf83 	b.w	b5ee0 <network_listening>

000b5fda <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5fda:	2200      	movs	r2, #0
   b5fdc:	6840      	ldr	r0, [r0, #4]
   b5fde:	4611      	mov	r1, r2
   b5fe0:	f7ff bf96 	b.w	b5f10 <network_get_listen_timeout>

000b5fe4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5fe4:	6840      	ldr	r0, [r0, #4]
   b5fe6:	2200      	movs	r2, #0
   b5fe8:	f7ff bf8a 	b.w	b5f00 <network_set_listen_timeout>

000b5fec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5fec:	6840      	ldr	r0, [r0, #4]
   b5fee:	2200      	movs	r2, #0
   b5ff0:	f081 0101 	eor.w	r1, r1, #1
   b5ff4:	f7ff bf6c 	b.w	b5ed0 <network_listen>

000b5ff8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5ff8:	2300      	movs	r3, #0
   b5ffa:	6840      	ldr	r0, [r0, #4]
   b5ffc:	461a      	mov	r2, r3
   b5ffe:	4619      	mov	r1, r3
   b6000:	f7ff bf5e 	b.w	b5ec0 <network_off>

000b6004 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6004:	2300      	movs	r3, #0
   b6006:	6840      	ldr	r0, [r0, #4]
   b6008:	461a      	mov	r2, r3
   b600a:	4619      	mov	r1, r3
   b600c:	f7ff bf50 	b.w	b5eb0 <network_on>

000b6010 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6010:	2200      	movs	r2, #0
   b6012:	6840      	ldr	r0, [r0, #4]
   b6014:	4611      	mov	r1, r2
   b6016:	f7ff bf43 	b.w	b5ea0 <network_ready>

000b601a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b601a:	2200      	movs	r2, #0
   b601c:	6840      	ldr	r0, [r0, #4]
   b601e:	4611      	mov	r1, r2
   b6020:	f7ff bf2e 	b.w	b5e80 <network_connecting>

000b6024 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6024:	6840      	ldr	r0, [r0, #4]
   b6026:	2200      	movs	r2, #0
   b6028:	2102      	movs	r1, #2
   b602a:	f7ff bf31 	b.w	b5e90 <network_disconnect>

000b602e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b602e:	2300      	movs	r3, #0
   b6030:	6840      	ldr	r0, [r0, #4]
   b6032:	461a      	mov	r2, r3
   b6034:	f7ff bf1c 	b.w	b5e70 <network_connect>

000b6038 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6038:	4b02      	ldr	r3, [pc, #8]	; (b6044 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b603a:	2203      	movs	r2, #3
   b603c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b603e:	4a02      	ldr	r2, [pc, #8]	; (b6048 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6040:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6042:	4770      	bx	lr
   b6044:	2003e6c4 	.word	0x2003e6c4
   b6048:	000b87c4 	.word	0x000b87c4

000b604c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b604c:	2100      	movs	r1, #0
   b604e:	f7ff be93 	b.w	b5d78 <hal_spi_release>

000b6052 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6052:	2100      	movs	r1, #0
   b6054:	f7ff be88 	b.w	b5d68 <hal_spi_acquire>

000b6058 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6058:	b510      	push	{r4, lr}
   b605a:	4604      	mov	r4, r0
   b605c:	4608      	mov	r0, r1
{
    _spi = spi;
   b605e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6060:	f7ff fe62 	bl	b5d28 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6064:	2300      	movs	r3, #0
   b6066:	6063      	str	r3, [r4, #4]
}
   b6068:	4620      	mov	r0, r4
   b606a:	bd10      	pop	{r4, pc}

000b606c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b606c:	b513      	push	{r0, r1, r4, lr}
   b606e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6070:	7800      	ldrb	r0, [r0, #0]
   b6072:	f7ff ffee 	bl	b6052 <_ZN8SPIClass4lockEv.isra.0>
   b6076:	b958      	cbnz	r0, b6090 <_ZN8SPIClass5beginEv+0x24>
   b6078:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b607a:	9001      	str	r0, [sp, #4]
   b607c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6080:	f7ff fe2a 	bl	b5cd8 <hal_spi_begin>
        unlock();
   b6084:	9801      	ldr	r0, [sp, #4]
    }
}
   b6086:	b002      	add	sp, #8
   b6088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b608c:	f7ff bfde 	b.w	b604c <_ZN8SPIClass6unlockEv.isra.0>
   b6090:	b002      	add	sp, #8
   b6092:	bd10      	pop	{r4, pc}

000b6094 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6094:	b513      	push	{r0, r1, r4, lr}
   b6096:	4604      	mov	r4, r0
    if (!lock())
   b6098:	7800      	ldrb	r0, [r0, #0]
{
   b609a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b609c:	f7ff ffd9 	bl	b6052 <_ZN8SPIClass4lockEv.isra.0>
   b60a0:	9901      	ldr	r1, [sp, #4]
   b60a2:	b948      	cbnz	r0, b60b8 <_ZN8SPIClass11setBitOrderEh+0x24>
   b60a4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b60a6:	9001      	str	r0, [sp, #4]
   b60a8:	f7ff fe1e 	bl	b5ce8 <hal_spi_set_bit_order>
        unlock();
   b60ac:	9801      	ldr	r0, [sp, #4]
    }
}
   b60ae:	b002      	add	sp, #8
   b60b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b60b4:	f7ff bfca 	b.w	b604c <_ZN8SPIClass6unlockEv.isra.0>
   b60b8:	b002      	add	sp, #8
   b60ba:	bd10      	pop	{r4, pc}

000b60bc <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b60bc:	b513      	push	{r0, r1, r4, lr}
   b60be:	4604      	mov	r4, r0
    if (!lock())
   b60c0:	7800      	ldrb	r0, [r0, #0]
{
   b60c2:	9101      	str	r1, [sp, #4]
    if (!lock())
   b60c4:	f7ff ffc5 	bl	b6052 <_ZN8SPIClass4lockEv.isra.0>
   b60c8:	9901      	ldr	r1, [sp, #4]
   b60ca:	b948      	cbnz	r0, b60e0 <_ZN8SPIClass11setDataModeEh+0x24>
   b60cc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b60ce:	9001      	str	r0, [sp, #4]
   b60d0:	f7ff fe12 	bl	b5cf8 <hal_spi_set_data_mode>
        unlock();
   b60d4:	9801      	ldr	r0, [sp, #4]
    }
}
   b60d6:	b002      	add	sp, #8
   b60d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b60dc:	f7ff bfb6 	b.w	b604c <_ZN8SPIClass6unlockEv.isra.0>
   b60e0:	b002      	add	sp, #8
   b60e2:	bd10      	pop	{r4, pc}

000b60e4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b60e4:	7800      	ldrb	r0, [r0, #0]
   b60e6:	f7ff bfb1 	b.w	b604c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b60ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b60ec:	0840      	lsrs	r0, r0, #1
{
   b60ee:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b60f0:	6018      	str	r0, [r3, #0]
   b60f2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b60f4:	6818      	ldr	r0, [r3, #0]
   b60f6:	4288      	cmp	r0, r1
   b60f8:	b2e5      	uxtb	r5, r4
   b60fa:	d906      	bls.n	b610a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b60fc:	3401      	adds	r4, #1
   b60fe:	2c08      	cmp	r4, #8
   b6100:	d002      	beq.n	b6108 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6102:	0840      	lsrs	r0, r0, #1
   b6104:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6106:	e7f5      	b.n	b60f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6108:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b610c:	5d5b      	ldrb	r3, [r3, r5]
   b610e:	7013      	strb	r3, [r2, #0]
}
   b6110:	bd30      	pop	{r4, r5, pc}
   b6112:	bf00      	nop
   b6114:	000b87f8 	.word	0x000b87f8

000b6118 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b611c:	4606      	mov	r6, r0
   b611e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6120:	7800      	ldrb	r0, [r0, #0]
{
   b6122:	460c      	mov	r4, r1
    CHECK(lock());
   b6124:	f7ff ff95 	bl	b6052 <_ZN8SPIClass4lockEv.isra.0>
   b6128:	2800      	cmp	r0, #0
   b612a:	db1b      	blt.n	b6164 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b612c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b612e:	2214      	movs	r2, #20
   b6130:	2100      	movs	r1, #0
   b6132:	a809      	add	r0, sp, #36	; 0x24
   b6134:	f001 fee6 	bl	b7f04 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6138:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b613a:	2200      	movs	r2, #0
   b613c:	a909      	add	r1, sp, #36	; 0x24
   b613e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6140:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6144:	f7ff fe00 	bl	b5d48 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6148:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b614c:	b113      	cbz	r3, b6154 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b614e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6152:	b155      	cbz	r5, b616a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6154:	2700      	movs	r7, #0
   b6156:	46b9      	mov	r9, r7
   b6158:	46b8      	mov	r8, r7
   b615a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b615c:	7923      	ldrb	r3, [r4, #4]
   b615e:	b15d      	cbz	r5, b6178 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6160:	b1c3      	cbz	r3, b6194 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6162:	2000      	movs	r0, #0
}
   b6164:	b00f      	add	sp, #60	; 0x3c
   b6166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b616a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b616e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6172:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6176:	e7f1      	b.n	b615c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6178:	2b00      	cmp	r3, #0
   b617a:	d135      	bne.n	b61e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b617c:	68a3      	ldr	r3, [r4, #8]
   b617e:	4543      	cmp	r3, r8
   b6180:	d108      	bne.n	b6194 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6182:	f88d 9020 	strb.w	r9, [sp, #32]
   b6186:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b618a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b618e:	89a3      	ldrh	r3, [r4, #12]
   b6190:	429a      	cmp	r2, r3
   b6192:	d0e6      	beq.n	b6162 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6194:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6196:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6198:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b619c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b619e:	ab04      	add	r3, sp, #16
   b61a0:	f10d 020f 	add.w	r2, sp, #15
   b61a4:	f7ff ffa2 	bl	b60ec <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b61a8:	7921      	ldrb	r1, [r4, #4]
   b61aa:	b985      	cbnz	r5, b61ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b61ac:	b989      	cbnz	r1, b61d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b61ae:	68a3      	ldr	r3, [r4, #8]
   b61b0:	4543      	cmp	r3, r8
   b61b2:	d30e      	bcc.n	b61d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b61b4:	f88d 9020 	strb.w	r9, [sp, #32]
   b61b8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b61bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b61c0:	89a3      	ldrh	r3, [r4, #12]
   b61c2:	429a      	cmp	r2, r3
   b61c4:	d105      	bne.n	b61d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b61c6:	9b04      	ldr	r3, [sp, #16]
   b61c8:	4543      	cmp	r3, r8
   b61ca:	d102      	bne.n	b61d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b61cc:	e7c9      	b.n	b6162 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b61ce:	2900      	cmp	r1, #0
   b61d0:	d1f9      	bne.n	b61c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b61d2:	2300      	movs	r3, #0
   b61d4:	9301      	str	r3, [sp, #4]
   b61d6:	7b63      	ldrb	r3, [r4, #13]
   b61d8:	9300      	str	r3, [sp, #0]
   b61da:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b61de:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b61e0:	7830      	ldrb	r0, [r6, #0]
   b61e2:	f7ff fdb9 	bl	b5d58 <hal_spi_set_settings>
   b61e6:	e7bc      	b.n	b6162 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b61e8:	e9cd 5500 	strd	r5, r5, [sp]
   b61ec:	462b      	mov	r3, r5
   b61ee:	462a      	mov	r2, r5
   b61f0:	2101      	movs	r1, #1
   b61f2:	e7f5      	b.n	b61e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b61f4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b61f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b61f8:	b088      	sub	sp, #32
    unsigned clock = 0;
   b61fa:	2300      	movs	r3, #0
{
   b61fc:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b61fe:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6200:	9302      	str	r3, [sp, #8]
{
   b6202:	460e      	mov	r6, r1
   b6204:	4617      	mov	r7, r2
    if (!lock())
   b6206:	f7ff ff24 	bl	b6052 <_ZN8SPIClass4lockEv.isra.0>
   b620a:	4605      	mov	r5, r0
   b620c:	bb00      	cbnz	r0, b6250 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b620e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6212:	4601      	mov	r1, r0
   b6214:	2214      	movs	r2, #20
   b6216:	a803      	add	r0, sp, #12
   b6218:	f001 fe74 	bl	b7f04 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b621c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b621e:	462a      	mov	r2, r5
   b6220:	a903      	add	r1, sp, #12
   b6222:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6224:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6228:	f7ff fd8e 	bl	b5d48 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b622c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b622e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6232:	ab02      	add	r3, sp, #8
   b6234:	f10d 0207 	add.w	r2, sp, #7
   b6238:	fb07 f106 	mul.w	r1, r7, r6
   b623c:	f7ff ff56 	bl	b60ec <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6240:	7820      	ldrb	r0, [r4, #0]
   b6242:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6246:	f7ff fd5f 	bl	b5d08 <hal_spi_set_clock_divider>
        unlock();
   b624a:	7820      	ldrb	r0, [r4, #0]
   b624c:	f7ff fefe 	bl	b604c <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6250:	9802      	ldr	r0, [sp, #8]
   b6252:	b008      	add	sp, #32
   b6254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6258 <_ZN8SPIClass15setClockDividerEh>:
{
   b6258:	b538      	push	{r3, r4, r5, lr}
   b625a:	4604      	mov	r4, r0
    if (!lock())
   b625c:	7800      	ldrb	r0, [r0, #0]
{
   b625e:	460d      	mov	r5, r1
    if (!lock())
   b6260:	f7ff fef7 	bl	b6052 <_ZN8SPIClass4lockEv.isra.0>
   b6264:	4603      	mov	r3, r0
   b6266:	b9d0      	cbnz	r0, b629e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6268:	6861      	ldr	r1, [r4, #4]
   b626a:	b199      	cbz	r1, b6294 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b626c:	4a0c      	ldr	r2, [pc, #48]	; (b62a0 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b626e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6272:	4285      	cmp	r5, r0
   b6274:	d002      	beq.n	b627c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6276:	3301      	adds	r3, #1
   b6278:	2b08      	cmp	r3, #8
   b627a:	d1f8      	bne.n	b626e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b627c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b627e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6280:	2201      	movs	r2, #1
   b6282:	40d9      	lsrs	r1, r3
   b6284:	4620      	mov	r0, r4
   b6286:	f7ff ffb5 	bl	b61f4 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b628a:	7820      	ldrb	r0, [r4, #0]
}
   b628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6290:	f7ff bedc 	b.w	b604c <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6294:	7820      	ldrb	r0, [r4, #0]
   b6296:	4629      	mov	r1, r5
   b6298:	f7ff fd36 	bl	b5d08 <hal_spi_set_clock_divider>
   b629c:	e7f5      	b.n	b628a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b629e:	bd38      	pop	{r3, r4, r5, pc}
   b62a0:	000b87f8 	.word	0x000b87f8

000b62a4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b62a4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b62a6:	7800      	ldrb	r0, [r0, #0]
   b62a8:	f7ff fd36 	bl	b5d18 <hal_spi_transfer>
}
   b62ac:	b2c0      	uxtb	r0, r0
   b62ae:	bd08      	pop	{r3, pc}

000b62b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b62b0:	4b05      	ldr	r3, [pc, #20]	; (b62c8 <_GLOBAL__sub_I_System+0x18>)
   b62b2:	2202      	movs	r2, #2
   b62b4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b62b6:	4b05      	ldr	r3, [pc, #20]	; (b62cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b62b8:	4a05      	ldr	r2, [pc, #20]	; (b62d0 <_GLOBAL__sub_I_System+0x20>)
   b62ba:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b62bc:	2000      	movs	r0, #0
   b62be:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b62c2:	f7ff bdb1 	b.w	b5e28 <set_system_mode>
   b62c6:	bf00      	nop
   b62c8:	2003e6d8 	.word	0x2003e6d8
   b62cc:	2003e6cc 	.word	0x2003e6cc
   b62d0:	ffff0000 	.word	0xffff0000

000b62d4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b62d4:	b510      	push	{r4, lr}
   b62d6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b62d8:	6800      	ldr	r0, [r0, #0]
   b62da:	b108      	cbz	r0, b62e0 <_ZN6String10invalidateEv+0xc>
   b62dc:	f7ff fe48 	bl	b5f70 <free>
	buffer = NULL;
   b62e0:	2300      	movs	r3, #0
	capacity = len = 0;
   b62e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b62e6:	6023      	str	r3, [r4, #0]
}
   b62e8:	bd10      	pop	{r4, pc}

000b62ea <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b62ea:	b538      	push	{r3, r4, r5, lr}
   b62ec:	4604      	mov	r4, r0
   b62ee:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b62f0:	6800      	ldr	r0, [r0, #0]
   b62f2:	3101      	adds	r1, #1
   b62f4:	f7ff fe44 	bl	b5f80 <realloc>
	if (newbuffer) {
   b62f8:	b110      	cbz	r0, b6300 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b62fa:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b62fe:	2001      	movs	r0, #1
	}
	return 0;
}
   b6300:	bd38      	pop	{r3, r4, r5, pc}

000b6302 <_ZN6String7reserveEj>:
{
   b6302:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6304:	6803      	ldr	r3, [r0, #0]
{
   b6306:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6308:	b123      	cbz	r3, b6314 <_ZN6String7reserveEj+0x12>
   b630a:	6843      	ldr	r3, [r0, #4]
   b630c:	428b      	cmp	r3, r1
   b630e:	d301      	bcc.n	b6314 <_ZN6String7reserveEj+0x12>
   b6310:	2001      	movs	r0, #1
}
   b6312:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6314:	4620      	mov	r0, r4
   b6316:	f7ff ffe8 	bl	b62ea <_ZN6String12changeBufferEj>
   b631a:	2800      	cmp	r0, #0
   b631c:	d0f9      	beq.n	b6312 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b631e:	68a3      	ldr	r3, [r4, #8]
   b6320:	2b00      	cmp	r3, #0
   b6322:	d1f5      	bne.n	b6310 <_ZN6String7reserveEj+0xe>
   b6324:	6822      	ldr	r2, [r4, #0]
   b6326:	7013      	strb	r3, [r2, #0]
   b6328:	e7f2      	b.n	b6310 <_ZN6String7reserveEj+0xe>

000b632a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b632a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b632c:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b632e:	4611      	mov	r1, r2
   b6330:	9201      	str	r2, [sp, #4]
{
   b6332:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6334:	f7ff ffe5 	bl	b6302 <_ZN6String7reserveEj>
   b6338:	9a01      	ldr	r2, [sp, #4]
   b633a:	b928      	cbnz	r0, b6348 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b633c:	4620      	mov	r0, r4
   b633e:	f7ff ffc9 	bl	b62d4 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6342:	4620      	mov	r0, r4
   b6344:	b003      	add	sp, #12
   b6346:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6348:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b634a:	4629      	mov	r1, r5
   b634c:	6820      	ldr	r0, [r4, #0]
   b634e:	f001 fdcb 	bl	b7ee8 <memcpy>
	buffer[len] = 0;
   b6352:	6822      	ldr	r2, [r4, #0]
   b6354:	68a3      	ldr	r3, [r4, #8]
   b6356:	2100      	movs	r1, #0
   b6358:	54d1      	strb	r1, [r2, r3]
	return *this;
   b635a:	e7f2      	b.n	b6342 <_ZN6String4copyEPKcj+0x18>

000b635c <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b635c:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b635e:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6360:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6364:	4604      	mov	r4, r0
	len = 0;
   b6366:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6368:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b636a:	b141      	cbz	r1, b637e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b636c:	4608      	mov	r0, r1
   b636e:	9101      	str	r1, [sp, #4]
   b6370:	f001 fe08 	bl	b7f84 <strlen>
   b6374:	9901      	ldr	r1, [sp, #4]
   b6376:	4602      	mov	r2, r0
   b6378:	4620      	mov	r0, r4
   b637a:	f7ff ffd6 	bl	b632a <_ZN6String4copyEPKcj>
}
   b637e:	4620      	mov	r0, r4
   b6380:	b002      	add	sp, #8
   b6382:	bd10      	pop	{r4, pc}

000b6384 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6384:	4802      	ldr	r0, [pc, #8]	; (b6390 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6386:	2300      	movs	r3, #0
   b6388:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b638a:	f7ff bbbd 	b.w	b5b08 <os_mutex_recursive_create>
   b638e:	bf00      	nop
   b6390:	2003e6dc 	.word	0x2003e6dc

000b6394 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6396:	4606      	mov	r6, r0
   b6398:	460d      	mov	r5, r1
  size_t n = 0;
   b639a:	188f      	adds	r7, r1, r2
   b639c:	2400      	movs	r4, #0
  while (size--) {
   b639e:	42bd      	cmp	r5, r7
   b63a0:	d00c      	beq.n	b63bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b63a2:	6833      	ldr	r3, [r6, #0]
   b63a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b63a8:	689b      	ldr	r3, [r3, #8]
   b63aa:	4630      	mov	r0, r6
   b63ac:	4798      	blx	r3
     if (chunk>=0)
   b63ae:	1e03      	subs	r3, r0, #0
   b63b0:	db01      	blt.n	b63b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b63b2:	441c      	add	r4, r3
  while (size--) {
   b63b4:	e7f3      	b.n	b639e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b63b6:	2c00      	cmp	r4, #0
   b63b8:	bf08      	it	eq
   b63ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b63bc:	4620      	mov	r0, r4
   b63be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b63c0:	b513      	push	{r0, r1, r4, lr}
   b63c2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b63c4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b63c6:	b159      	cbz	r1, b63e0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b63c8:	9101      	str	r1, [sp, #4]
   b63ca:	f001 fddb 	bl	b7f84 <strlen>
   b63ce:	6823      	ldr	r3, [r4, #0]
   b63d0:	9901      	ldr	r1, [sp, #4]
   b63d2:	68db      	ldr	r3, [r3, #12]
   b63d4:	4602      	mov	r2, r0
   b63d6:	4620      	mov	r0, r4
    }
   b63d8:	b002      	add	sp, #8
   b63da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b63de:	4718      	bx	r3
    }
   b63e0:	b002      	add	sp, #8
   b63e2:	bd10      	pop	{r4, pc}

000b63e4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b63e4:	b508      	push	{r3, lr}
  return write(str);
   b63e6:	f7ff ffeb 	bl	b63c0 <_ZN5Print5writeEPKc>
}
   b63ea:	bd08      	pop	{r3, pc}

000b63ec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b63ec:	6803      	ldr	r3, [r0, #0]
   b63ee:	689b      	ldr	r3, [r3, #8]
   b63f0:	4718      	bx	r3

000b63f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b63f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b63f4:	210d      	movs	r1, #13
{
   b63f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b63f8:	f7ff fff8 	bl	b63ec <_ZN5Print5printEc>
  n += print('\n');
   b63fc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b63fe:	4604      	mov	r4, r0
  n += print('\n');
   b6400:	4628      	mov	r0, r5
   b6402:	f7ff fff3 	bl	b63ec <_ZN5Print5printEc>
  return n;
}
   b6406:	4420      	add	r0, r4
   b6408:	bd38      	pop	{r3, r4, r5, pc}

000b640a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b640a:	b530      	push	{r4, r5, lr}
   b640c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b640e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6410:	2a01      	cmp	r2, #1
  *str = '\0';
   b6412:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6416:	bf98      	it	ls
   b6418:	220a      	movls	r2, #10
   b641a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b641c:	460d      	mov	r5, r1
   b641e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6422:	fb01 5312 	mls	r3, r1, r2, r5
   b6426:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b642a:	2b09      	cmp	r3, #9
   b642c:	bf94      	ite	ls
   b642e:	3330      	addls	r3, #48	; 0x30
   b6430:	3337      	addhi	r3, #55	; 0x37
   b6432:	b2db      	uxtb	r3, r3
  } while(n);
   b6434:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6436:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b643a:	d9ef      	bls.n	b641c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b643c:	4621      	mov	r1, r4
   b643e:	f7ff ffbf 	bl	b63c0 <_ZN5Print5writeEPKc>
}
   b6442:	b00b      	add	sp, #44	; 0x2c
   b6444:	bd30      	pop	{r4, r5, pc}

000b6446 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b644a:	b086      	sub	sp, #24
   b644c:	af00      	add	r7, sp, #0
   b644e:	4605      	mov	r5, r0
   b6450:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6452:	1d38      	adds	r0, r7, #4
   b6454:	2114      	movs	r1, #20
{
   b6456:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6458:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b645a:	f7ff fd99 	bl	b5f90 <vsnprintf>

    if (n<bufsize)
   b645e:	2813      	cmp	r0, #19
   b6460:	d80e      	bhi.n	b6480 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6462:	1d39      	adds	r1, r7, #4
   b6464:	4628      	mov	r0, r5
   b6466:	f7ff ffab 	bl	b63c0 <_ZN5Print5writeEPKc>
   b646a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b646c:	b11e      	cbz	r6, b6476 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b646e:	4628      	mov	r0, r5
   b6470:	f7ff ffbf 	bl	b63f2 <_ZN5Print7printlnEv>
   b6474:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6476:	4620      	mov	r0, r4
   b6478:	3718      	adds	r7, #24
   b647a:	46bd      	mov	sp, r7
   b647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6480:	f100 0308 	add.w	r3, r0, #8
   b6484:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6488:	46e8      	mov	r8, sp
        char bigger[n+1];
   b648a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b648e:	4622      	mov	r2, r4
   b6490:	1c41      	adds	r1, r0, #1
   b6492:	683b      	ldr	r3, [r7, #0]
   b6494:	4668      	mov	r0, sp
   b6496:	f7ff fd7b 	bl	b5f90 <vsnprintf>
  return write(str);
   b649a:	4669      	mov	r1, sp
   b649c:	4628      	mov	r0, r5
   b649e:	f7ff ff8f 	bl	b63c0 <_ZN5Print5writeEPKc>
   b64a2:	4604      	mov	r4, r0
   b64a4:	46c5      	mov	sp, r8
   b64a6:	e7e1      	b.n	b646c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b64a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b64a8:	4b01      	ldr	r3, [pc, #4]	; (b64b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b64aa:	4a02      	ldr	r2, [pc, #8]	; (b64b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b64ac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b64ae:	4770      	bx	lr
   b64b0:	2003e6e0 	.word	0x2003e6e0
   b64b4:	000b8808 	.word	0x000b8808

000b64b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b64b8:	4b02      	ldr	r3, [pc, #8]	; (b64c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b64ba:	681a      	ldr	r2, [r3, #0]
   b64bc:	4b02      	ldr	r3, [pc, #8]	; (b64c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b64be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b64c0:	4770      	bx	lr
   b64c2:	bf00      	nop
   b64c4:	2003e534 	.word	0x2003e534
   b64c8:	2003e6e4 	.word	0x2003e6e4

000b64cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b64cc:	2100      	movs	r1, #0
   b64ce:	f7ff bcb3 	b.w	b5e38 <system_delay_ms>
	...

000b64d4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b64d4:	4b01      	ldr	r3, [pc, #4]	; (b64dc <_GLOBAL__sub_I_RGB+0x8>)
   b64d6:	2200      	movs	r2, #0
   b64d8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b64da:	4770      	bx	lr
   b64dc:	2003e6e8 	.word	0x2003e6e8

000b64e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b64e0:	4b01      	ldr	r3, [pc, #4]	; (b64e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b64e2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b64e4:	4770      	bx	lr
   b64e6:	bf00      	nop
   b64e8:	2003e538 	.word	0x2003e538

000b64ec <serialEventRun>:
{
   b64ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b64ee:	4b0b      	ldr	r3, [pc, #44]	; (b651c <serialEventRun+0x30>)
   b64f0:	b143      	cbz	r3, b6504 <serialEventRun+0x18>
   b64f2:	f000 f981 	bl	b67f8 <_Z16_fetch_usbserialv>
   b64f6:	6803      	ldr	r3, [r0, #0]
   b64f8:	691b      	ldr	r3, [r3, #16]
   b64fa:	4798      	blx	r3
   b64fc:	2800      	cmp	r0, #0
   b64fe:	dd01      	ble.n	b6504 <serialEventRun+0x18>
        serialEvent();
   b6500:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6504:	4b06      	ldr	r3, [pc, #24]	; (b6520 <serialEventRun+0x34>)
   b6506:	b143      	cbz	r3, b651a <serialEventRun+0x2e>
   b6508:	f000 feec 	bl	b72e4 <_Z22__fetch_global_Serial1v>
   b650c:	6803      	ldr	r3, [r0, #0]
   b650e:	691b      	ldr	r3, [r3, #16]
   b6510:	4798      	blx	r3
   b6512:	2800      	cmp	r0, #0
   b6514:	dd01      	ble.n	b651a <serialEventRun+0x2e>
        serialEvent1();
   b6516:	f3af 8000 	nop.w
}
   b651a:	bd08      	pop	{r3, pc}
	...

000b6524 <_post_loop>:
{
   b6524:	b508      	push	{r3, lr}
	serialEventRun();
   b6526:	f7ff ffe1 	bl	b64ec <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b652a:	f7ff fadd 	bl	b5ae8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b652e:	4b01      	ldr	r3, [pc, #4]	; (b6534 <_post_loop+0x10>)
   b6530:	6018      	str	r0, [r3, #0]
}
   b6532:	bd08      	pop	{r3, pc}
   b6534:	2003e740 	.word	0x2003e740

000b6538 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6538:	4805      	ldr	r0, [pc, #20]	; (b6550 <_Z33system_initialize_user_backup_ramv+0x18>)
   b653a:	4a06      	ldr	r2, [pc, #24]	; (b6554 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b653c:	4906      	ldr	r1, [pc, #24]	; (b6558 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b653e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6540:	1a12      	subs	r2, r2, r0
   b6542:	f001 fcd1 	bl	b7ee8 <memcpy>
    __backup_sram_signature = signature;
   b6546:	4b05      	ldr	r3, [pc, #20]	; (b655c <_Z33system_initialize_user_backup_ramv+0x24>)
   b6548:	4a05      	ldr	r2, [pc, #20]	; (b6560 <_Z33system_initialize_user_backup_ramv+0x28>)
   b654a:	601a      	str	r2, [r3, #0]
}
   b654c:	bd08      	pop	{r3, pc}
   b654e:	bf00      	nop
   b6550:	2003f400 	.word	0x2003f400
   b6554:	2003f404 	.word	0x2003f404
   b6558:	000b8b9c 	.word	0x000b8b9c
   b655c:	2003f400 	.word	0x2003f400
   b6560:	9a271c1e 	.word	0x9a271c1e

000b6564 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6564:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6566:	2300      	movs	r3, #0
   b6568:	9300      	str	r3, [sp, #0]
   b656a:	461a      	mov	r2, r3
   b656c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6570:	f7ff fc74 	bl	b5e5c <system_ctrl_set_result>
}
   b6574:	b003      	add	sp, #12
   b6576:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b657c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b657c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b657e:	8843      	ldrh	r3, [r0, #2]
   b6580:	2b0a      	cmp	r3, #10
   b6582:	d008      	beq.n	b6596 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6584:	2b50      	cmp	r3, #80	; 0x50
   b6586:	d10b      	bne.n	b65a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6588:	4b09      	ldr	r3, [pc, #36]	; (b65b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b658a:	681b      	ldr	r3, [r3, #0]
   b658c:	b14b      	cbz	r3, b65a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b658e:	b003      	add	sp, #12
   b6590:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6594:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6596:	f7ff ffe5 	bl	b6564 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b659a:	b003      	add	sp, #12
   b659c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b65a0:	2300      	movs	r3, #0
   b65a2:	9300      	str	r3, [sp, #0]
   b65a4:	461a      	mov	r2, r3
   b65a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b65aa:	f7ff fc57 	bl	b5e5c <system_ctrl_set_result>
}
   b65ae:	e7f4      	b.n	b659a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b65b0:	2003e6fc 	.word	0x2003e6fc

000b65b4 <module_user_init_hook>:
{
   b65b4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b65b6:	4812      	ldr	r0, [pc, #72]	; (b6600 <module_user_init_hook+0x4c>)
   b65b8:	2100      	movs	r1, #0
   b65ba:	f7ff fd01 	bl	b5fc0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b65be:	4b11      	ldr	r3, [pc, #68]	; (b6604 <module_user_init_hook+0x50>)
   b65c0:	681a      	ldr	r2, [r3, #0]
   b65c2:	4b11      	ldr	r3, [pc, #68]	; (b6608 <module_user_init_hook+0x54>)
   b65c4:	429a      	cmp	r2, r3
   b65c6:	4b11      	ldr	r3, [pc, #68]	; (b660c <module_user_init_hook+0x58>)
   b65c8:	bf0c      	ite	eq
   b65ca:	2201      	moveq	r2, #1
   b65cc:	2200      	movne	r2, #0
   b65ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b65d0:	d001      	beq.n	b65d6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b65d2:	f7ff ffb1 	bl	b6538 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b65d6:	f7ff fa6f 	bl	b5ab8 <HAL_RNG_GetRandomNumber>
   b65da:	4604      	mov	r4, r0
    srand(seed);
   b65dc:	f001 fc9a 	bl	b7f14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b65e0:	4b0b      	ldr	r3, [pc, #44]	; (b6610 <module_user_init_hook+0x5c>)
   b65e2:	b113      	cbz	r3, b65ea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b65e4:	4620      	mov	r0, r4
   b65e6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b65ea:	2100      	movs	r1, #0
   b65ec:	4808      	ldr	r0, [pc, #32]	; (b6610 <module_user_init_hook+0x5c>)
   b65ee:	f7ff fcaf 	bl	b5f50 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b65f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b65f6:	4807      	ldr	r0, [pc, #28]	; (b6614 <module_user_init_hook+0x60>)
   b65f8:	2100      	movs	r1, #0
   b65fa:	f7ff bc25 	b.w	b5e48 <system_ctrl_set_app_request_handler>
   b65fe:	bf00      	nop
   b6600:	000b64e1 	.word	0x000b64e1
   b6604:	2003f400 	.word	0x2003f400
   b6608:	9a271c1e 	.word	0x9a271c1e
   b660c:	2003e6f8 	.word	0x2003e6f8
   b6610:	00000000 	.word	0x00000000
   b6614:	000b657d 	.word	0x000b657d

000b6618 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6618:	4770      	bx	lr

000b661a <_ZN9IPAddressD0Ev>:
   b661a:	b510      	push	{r4, lr}
   b661c:	2118      	movs	r1, #24
   b661e:	4604      	mov	r4, r0
   b6620:	f7fd fd3b 	bl	b409a <_ZdlPvj>
   b6624:	4620      	mov	r0, r4
   b6626:	bd10      	pop	{r4, pc}

000b6628 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6628:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b662a:	7d03      	ldrb	r3, [r0, #20]
   b662c:	2b06      	cmp	r3, #6
{
   b662e:	b08d      	sub	sp, #52	; 0x34
   b6630:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6632:	f100 0704 	add.w	r7, r0, #4
   b6636:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b663a:	d012      	beq.n	b6662 <_ZNK9IPAddress7printToER5Print+0x3a>
   b663c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6640:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6644:	220a      	movs	r2, #10
   b6646:	4630      	mov	r0, r6
   b6648:	f7ff fedf 	bl	b640a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b664c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b664e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6650:	d019      	beq.n	b6686 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6652:	2c00      	cmp	r4, #0
   b6654:	d0f4      	beq.n	b6640 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6656:	212e      	movs	r1, #46	; 0x2e
   b6658:	4630      	mov	r0, r6
   b665a:	f7ff fec7 	bl	b63ec <_ZN5Print5printEc>
   b665e:	4404      	add	r4, r0
   b6660:	e7ee      	b.n	b6640 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6662:	232f      	movs	r3, #47	; 0x2f
   b6664:	466a      	mov	r2, sp
   b6666:	4639      	mov	r1, r7
   b6668:	200a      	movs	r0, #10
		buf[0] = 0;
   b666a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b666e:	f7ff fa53 	bl	b5b18 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6672:	4668      	mov	r0, sp
   b6674:	f001 fc86 	bl	b7f84 <strlen>
   b6678:	6833      	ldr	r3, [r6, #0]
   b667a:	4602      	mov	r2, r0
   b667c:	68db      	ldr	r3, [r3, #12]
   b667e:	4669      	mov	r1, sp
   b6680:	4630      	mov	r0, r6
   b6682:	4798      	blx	r3
   b6684:	4604      	mov	r4, r0
    }
    return n;
}
   b6686:	4620      	mov	r0, r4
   b6688:	b00d      	add	sp, #52	; 0x34
   b668a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b668c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b668c:	b510      	push	{r4, lr}
   b668e:	4b05      	ldr	r3, [pc, #20]	; (b66a4 <_ZN9IPAddressC1Ev+0x18>)
   b6690:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6692:	2211      	movs	r2, #17
   b6694:	f840 3b04 	str.w	r3, [r0], #4
   b6698:	2100      	movs	r1, #0
   b669a:	f001 fc33 	bl	b7f04 <memset>
}
   b669e:	4620      	mov	r0, r4
   b66a0:	bd10      	pop	{r4, pc}
   b66a2:	bf00      	nop
   b66a4:	000b8830 	.word	0x000b8830

000b66a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b66a8:	4603      	mov	r3, r0
   b66aa:	4a07      	ldr	r2, [pc, #28]	; (b66c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b66ac:	b510      	push	{r4, lr}
   b66ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b66b2:	f101 0210 	add.w	r2, r1, #16
   b66b6:	f851 4b04 	ldr.w	r4, [r1], #4
   b66ba:	f843 4b04 	str.w	r4, [r3], #4
   b66be:	4291      	cmp	r1, r2
   b66c0:	d1f9      	bne.n	b66b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b66c2:	780a      	ldrb	r2, [r1, #0]
   b66c4:	701a      	strb	r2, [r3, #0]
}
   b66c6:	bd10      	pop	{r4, pc}
   b66c8:	000b8830 	.word	0x000b8830

000b66cc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b66cc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b66ce:	2b04      	cmp	r3, #4
   b66d0:	d104      	bne.n	b66dc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b66d2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b66d4:	3800      	subs	r0, #0
   b66d6:	bf18      	it	ne
   b66d8:	2001      	movne	r0, #1
   b66da:	4770      	bx	lr
    } else if (version() == 6) {
   b66dc:	2b06      	cmp	r3, #6
   b66de:	d107      	bne.n	b66f0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b66e0:	6843      	ldr	r3, [r0, #4]
   b66e2:	b93b      	cbnz	r3, b66f4 <_ZNK9IPAddresscvbEv+0x28>
   b66e4:	6883      	ldr	r3, [r0, #8]
   b66e6:	b92b      	cbnz	r3, b66f4 <_ZNK9IPAddresscvbEv+0x28>
   b66e8:	68c3      	ldr	r3, [r0, #12]
   b66ea:	b91b      	cbnz	r3, b66f4 <_ZNK9IPAddresscvbEv+0x28>
   b66ec:	6900      	ldr	r0, [r0, #16]
   b66ee:	e7f1      	b.n	b66d4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b66f0:	2000      	movs	r0, #0
   b66f2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b66f4:	2001      	movs	r0, #1
}
   b66f6:	4770      	bx	lr

000b66f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b66f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b66fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b66fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6702:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6706:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b670a:	2304      	movs	r3, #4
   b670c:	6041      	str	r1, [r0, #4]
   b670e:	7503      	strb	r3, [r0, #20]
}
   b6710:	bd10      	pop	{r4, pc}
	...

000b6714 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6714:	b507      	push	{r0, r1, r2, lr}
   b6716:	4b06      	ldr	r3, [pc, #24]	; (b6730 <_ZN9IPAddressC1EPKh+0x1c>)
   b6718:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b671a:	78cb      	ldrb	r3, [r1, #3]
   b671c:	9300      	str	r3, [sp, #0]
   b671e:	788b      	ldrb	r3, [r1, #2]
   b6720:	784a      	ldrb	r2, [r1, #1]
   b6722:	7809      	ldrb	r1, [r1, #0]
   b6724:	f7ff ffe8 	bl	b66f8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6728:	b003      	add	sp, #12
   b672a:	f85d fb04 	ldr.w	pc, [sp], #4
   b672e:	bf00      	nop
   b6730:	000b8830 	.word	0x000b8830

000b6734 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6734:	7441      	strb	r1, [r0, #17]
}
   b6736:	4770      	bx	lr

000b6738 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6738:	4770      	bx	lr

000b673a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b673a:	4770      	bx	lr

000b673c <_ZN9USBSerial4readEv>:
{
   b673c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b673e:	2100      	movs	r1, #0
   b6740:	7c00      	ldrb	r0, [r0, #16]
   b6742:	f7ff fb41 	bl	b5dc8 <HAL_USB_USART_Receive_Data>
}
   b6746:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b674a:	bd08      	pop	{r3, pc}

000b674c <_ZN9USBSerial4peekEv>:
{
   b674c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b674e:	2101      	movs	r1, #1
   b6750:	7c00      	ldrb	r0, [r0, #16]
   b6752:	f7ff fb39 	bl	b5dc8 <HAL_USB_USART_Receive_Data>
}
   b6756:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b675a:	bd08      	pop	{r3, pc}

000b675c <_ZN9USBSerial17availableForWriteEv>:
{
   b675c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b675e:	7c00      	ldrb	r0, [r0, #16]
   b6760:	f7ff fb2a 	bl	b5db8 <HAL_USB_USART_Available_Data_For_Write>
}
   b6764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6768:	bd08      	pop	{r3, pc}

000b676a <_ZN9USBSerial9availableEv>:
{
   b676a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b676c:	7c00      	ldrb	r0, [r0, #16]
   b676e:	f7ff fb1b 	bl	b5da8 <HAL_USB_USART_Available_Data>
}
   b6772:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6776:	bd08      	pop	{r3, pc}

000b6778 <_ZN9USBSerial5writeEh>:
{
   b6778:	b513      	push	{r0, r1, r4, lr}
   b677a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b677c:	7c00      	ldrb	r0, [r0, #16]
{
   b677e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6780:	f7ff fb1a 	bl	b5db8 <HAL_USB_USART_Available_Data_For_Write>
   b6784:	2800      	cmp	r0, #0
   b6786:	9901      	ldr	r1, [sp, #4]
   b6788:	dc01      	bgt.n	b678e <_ZN9USBSerial5writeEh+0x16>
   b678a:	7c60      	ldrb	r0, [r4, #17]
   b678c:	b120      	cbz	r0, b6798 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b678e:	7c20      	ldrb	r0, [r4, #16]
   b6790:	f7ff fb22 	bl	b5dd8 <HAL_USB_USART_Send_Data>
   b6794:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6798:	b002      	add	sp, #8
   b679a:	bd10      	pop	{r4, pc}

000b679c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b679c:	7c00      	ldrb	r0, [r0, #16]
   b679e:	f7ff bb23 	b.w	b5de8 <HAL_USB_USART_Flush_Data>

000b67a2 <_ZN9USBSerialD0Ev>:
   b67a2:	b510      	push	{r4, lr}
   b67a4:	2114      	movs	r1, #20
   b67a6:	4604      	mov	r4, r0
   b67a8:	f7fd fc77 	bl	b409a <_ZdlPvj>
   b67ac:	4620      	mov	r0, r4
   b67ae:	bd10      	pop	{r4, pc}

000b67b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b67b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b67b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b67b6:	4604      	mov	r4, r0
   b67b8:	4608      	mov	r0, r1
   b67ba:	2100      	movs	r1, #0
   b67bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b67c0:	4b04      	ldr	r3, [pc, #16]	; (b67d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b67c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b67c4:	2301      	movs	r3, #1
  _serial = serial;
   b67c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b67c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b67ca:	4611      	mov	r1, r2
   b67cc:	f7ff fadc 	bl	b5d88 <HAL_USB_USART_Init>
}
   b67d0:	4620      	mov	r0, r4
   b67d2:	bd10      	pop	{r4, pc}
   b67d4:	000b8844 	.word	0x000b8844

000b67d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b67d8:	7c00      	ldrb	r0, [r0, #16]
   b67da:	2200      	movs	r2, #0
   b67dc:	f7ff badc 	b.w	b5d98 <HAL_USB_USART_Begin>

000b67e0 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b67e0:	7c00      	ldrb	r0, [r0, #16]
   b67e2:	f7ff bb09 	b.w	b5df8 <HAL_USB_USART_Is_Connected>

000b67e6 <_Z19acquireSerialBufferv>:
{
   b67e6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b67e8:	2214      	movs	r2, #20
{
   b67ea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b67ec:	2100      	movs	r1, #0
   b67ee:	f001 fb89 	bl	b7f04 <memset>
}
   b67f2:	4620      	mov	r0, r4
   b67f4:	bd10      	pop	{r4, pc}
	...

000b67f8 <_Z16_fetch_usbserialv>:
{
   b67f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b67fa:	4c0f      	ldr	r4, [pc, #60]	; (b6838 <_Z16_fetch_usbserialv+0x40>)
{
   b67fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b67fe:	a803      	add	r0, sp, #12
   b6800:	f7ff fff1 	bl	b67e6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6804:	7821      	ldrb	r1, [r4, #0]
   b6806:	f3bf 8f5b 	dmb	ish
   b680a:	f011 0101 	ands.w	r1, r1, #1
   b680e:	d10f      	bne.n	b6830 <_Z16_fetch_usbserialv+0x38>
   b6810:	4620      	mov	r0, r4
   b6812:	9101      	str	r1, [sp, #4]
   b6814:	f7fd fc50 	bl	b40b8 <__cxa_guard_acquire>
   b6818:	9901      	ldr	r1, [sp, #4]
   b681a:	b148      	cbz	r0, b6830 <_Z16_fetch_usbserialv+0x38>
   b681c:	aa03      	add	r2, sp, #12
   b681e:	4807      	ldr	r0, [pc, #28]	; (b683c <_Z16_fetch_usbserialv+0x44>)
   b6820:	f7ff ffc6 	bl	b67b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6824:	4620      	mov	r0, r4
   b6826:	f7fd fc4c 	bl	b40c2 <__cxa_guard_release>
   b682a:	4805      	ldr	r0, [pc, #20]	; (b6840 <_Z16_fetch_usbserialv+0x48>)
   b682c:	f001 fb56 	bl	b7edc <atexit>
	return _usbserial;
}
   b6830:	4802      	ldr	r0, [pc, #8]	; (b683c <_Z16_fetch_usbserialv+0x44>)
   b6832:	b008      	add	sp, #32
   b6834:	bd10      	pop	{r4, pc}
   b6836:	bf00      	nop
   b6838:	2003e700 	.word	0x2003e700
   b683c:	2003e704 	.word	0x2003e704
   b6840:	000b6739 	.word	0x000b6739

000b6844 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6844:	4770      	bx	lr

000b6846 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6846:	7441      	strb	r1, [r0, #17]
}
   b6848:	4770      	bx	lr

000b684a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b684a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b684c:	7c00      	ldrb	r0, [r0, #16]
   b684e:	f7ff f9ab 	bl	b5ba8 <hal_usart_available_data_for_write>
}
   b6852:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6856:	bd08      	pop	{r3, pc}

000b6858 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6858:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b685a:	7c00      	ldrb	r0, [r0, #16]
   b685c:	f7ff f97c 	bl	b5b58 <hal_usart_available>
}
   b6860:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6864:	bd08      	pop	{r3, pc}

000b6866 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6866:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6868:	7c00      	ldrb	r0, [r0, #16]
   b686a:	f7ff f985 	bl	b5b78 <hal_usart_peek>
}
   b686e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6872:	bd08      	pop	{r3, pc}

000b6874 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6874:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6876:	7c00      	ldrb	r0, [r0, #16]
   b6878:	f7ff f976 	bl	b5b68 <hal_usart_read>
}
   b687c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6880:	bd08      	pop	{r3, pc}

000b6882 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6882:	7c00      	ldrb	r0, [r0, #16]
   b6884:	f7ff b980 	b.w	b5b88 <hal_usart_flush>

000b6888 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6888:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b688a:	7c45      	ldrb	r5, [r0, #17]
{
   b688c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b688e:	b12d      	cbz	r5, b689c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6890:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6892:	b003      	add	sp, #12
   b6894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6898:	f7ff b956 	b.w	b5b48 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b689c:	7c00      	ldrb	r0, [r0, #16]
   b689e:	9101      	str	r1, [sp, #4]
   b68a0:	f7ff f982 	bl	b5ba8 <hal_usart_available_data_for_write>
   b68a4:	2800      	cmp	r0, #0
   b68a6:	9901      	ldr	r1, [sp, #4]
   b68a8:	dcf2      	bgt.n	b6890 <_ZN11USARTSerial5writeEh+0x8>
}
   b68aa:	4628      	mov	r0, r5
   b68ac:	b003      	add	sp, #12
   b68ae:	bd30      	pop	{r4, r5, pc}

000b68b0 <_ZN11USARTSerialD0Ev>:
   b68b0:	b510      	push	{r4, lr}
   b68b2:	2114      	movs	r1, #20
   b68b4:	4604      	mov	r4, r0
   b68b6:	f7fd fbf0 	bl	b409a <_ZdlPvj>
   b68ba:	4620      	mov	r0, r4
   b68bc:	bd10      	pop	{r4, pc}
	...

000b68c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b68c0:	b510      	push	{r4, lr}
   b68c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b68c6:	4604      	mov	r4, r0
   b68c8:	4608      	mov	r0, r1
   b68ca:	4611      	mov	r1, r2
   b68cc:	2200      	movs	r2, #0
   b68ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b68d2:	4b04      	ldr	r3, [pc, #16]	; (b68e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b68d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b68d6:	2301      	movs	r3, #1
  _serial = serial;
   b68d8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b68da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b68dc:	f7ff f96c 	bl	b5bb8 <hal_usart_init_ex>
}
   b68e0:	4620      	mov	r0, r4
   b68e2:	bd10      	pop	{r4, pc}
   b68e4:	000b8874 	.word	0x000b8874

000b68e8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b68e8:	4770      	bx	lr

000b68ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b68ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68ec:	4606      	mov	r6, r0
   b68ee:	4615      	mov	r5, r2
   b68f0:	460c      	mov	r4, r1
   b68f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b68f4:	42bc      	cmp	r4, r7
   b68f6:	d006      	beq.n	b6906 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b68f8:	6833      	ldr	r3, [r6, #0]
   b68fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b68fe:	689b      	ldr	r3, [r3, #8]
   b6900:	4630      	mov	r0, r6
   b6902:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6904:	e7f6      	b.n	b68f4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6906:	4628      	mov	r0, r5
   b6908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b690a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b690a:	7c00      	ldrb	r0, [r0, #16]
   b690c:	2200      	movs	r2, #0
   b690e:	f7ff b973 	b.w	b5bf8 <hal_i2c_write>

000b6912 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6912:	7c00      	ldrb	r0, [r0, #16]
   b6914:	2100      	movs	r1, #0
   b6916:	f7ff b977 	b.w	b5c08 <hal_i2c_available>

000b691a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b691a:	7c00      	ldrb	r0, [r0, #16]
   b691c:	2100      	movs	r1, #0
   b691e:	f7ff b97b 	b.w	b5c18 <hal_i2c_read>

000b6922 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6922:	7c00      	ldrb	r0, [r0, #16]
   b6924:	2100      	movs	r1, #0
   b6926:	f7ff b97f 	b.w	b5c28 <hal_i2c_peek>

000b692a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b692a:	7c00      	ldrb	r0, [r0, #16]
   b692c:	2100      	movs	r1, #0
   b692e:	f7ff b983 	b.w	b5c38 <hal_i2c_flush>

000b6932 <_ZN7TwoWireD0Ev>:
   b6932:	b510      	push	{r4, lr}
   b6934:	2114      	movs	r1, #20
   b6936:	4604      	mov	r4, r0
   b6938:	f7fd fbaf 	bl	b409a <_ZdlPvj>
   b693c:	4620      	mov	r0, r4
   b693e:	bd10      	pop	{r4, pc}

000b6940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6940:	b538      	push	{r3, r4, r5, lr}
   b6942:	4604      	mov	r4, r0
   b6944:	4615      	mov	r5, r2
   b6946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b694a:	2200      	movs	r2, #0
   b694c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6950:	4b09      	ldr	r3, [pc, #36]	; (b6978 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6952:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6954:	4608      	mov	r0, r1
   b6956:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6958:	4629      	mov	r1, r5
   b695a:	f7ff f97d 	bl	b5c58 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b695e:	30bf      	adds	r0, #191	; 0xbf
   b6960:	d108      	bne.n	b6974 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6962:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6964:	07db      	lsls	r3, r3, #31
   b6966:	d505      	bpl.n	b6974 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6968:	6868      	ldr	r0, [r5, #4]
   b696a:	f7ff fb01 	bl	b5f70 <free>
    free(conf.tx_buffer);
   b696e:	68e8      	ldr	r0, [r5, #12]
   b6970:	f7ff fafe 	bl	b5f70 <free>
}
   b6974:	4620      	mov	r0, r4
   b6976:	bd38      	pop	{r3, r4, r5, pc}
   b6978:	000b88a4 	.word	0x000b88a4

000b697c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b697c:	2300      	movs	r3, #0
   b697e:	7c00      	ldrb	r0, [r0, #16]
   b6980:	461a      	mov	r2, r3
   b6982:	4619      	mov	r1, r3
   b6984:	f7ff b920 	b.w	b5bc8 <hal_i2c_begin>

000b6988 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6988:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b698a:	2200      	movs	r2, #0
   b698c:	2314      	movs	r3, #20
   b698e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6992:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6996:	780b      	ldrb	r3, [r1, #0]
   b6998:	f88d 3008 	strb.w	r3, [sp, #8]
   b699c:	684b      	ldr	r3, [r1, #4]
   b699e:	9303      	str	r3, [sp, #12]
   b69a0:	68cb      	ldr	r3, [r1, #12]
   b69a2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b69a4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b69a6:	7a0b      	ldrb	r3, [r1, #8]
   b69a8:	9305      	str	r3, [sp, #20]
   b69aa:	a901      	add	r1, sp, #4
   b69ac:	f7ff f95c 	bl	b5c68 <hal_i2c_request_ex>
}
   b69b0:	b007      	add	sp, #28
   b69b2:	f85d fb04 	ldr.w	pc, [sp], #4

000b69b6 <_ZN7TwoWire11requestFromEhjh>:
{
   b69b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b69b8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b69ba:	f88d 1000 	strb.w	r1, [sp]
   b69be:	f04f 0164 	mov.w	r1, #100	; 0x64
   b69c2:	9103      	str	r1, [sp, #12]
   b69c4:	bf18      	it	ne
   b69c6:	2301      	movne	r3, #1
   b69c8:	4669      	mov	r1, sp
    size_ = size;
   b69ca:	9201      	str	r2, [sp, #4]
   b69cc:	f88d 3008 	strb.w	r3, [sp, #8]
   b69d0:	f7ff ffda 	bl	b6988 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b69d4:	b005      	add	sp, #20
   b69d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b69da <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b69da:	2301      	movs	r3, #1
   b69dc:	f7ff bfeb 	b.w	b69b6 <_ZN7TwoWire11requestFromEhjh>

000b69e0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b69e0:	7c00      	ldrb	r0, [r0, #16]
   b69e2:	2200      	movs	r2, #0
   b69e4:	f7ff b8f8 	b.w	b5bd8 <hal_i2c_begin_transmission>

000b69e8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b69e8:	b2c9      	uxtb	r1, r1
   b69ea:	f7ff bff9 	b.w	b69e0 <_ZN7TwoWire17beginTransmissionEh>

000b69ee <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b69ee:	7c00      	ldrb	r0, [r0, #16]
   b69f0:	2200      	movs	r2, #0
   b69f2:	f7ff b8f9 	b.w	b5be8 <hal_i2c_end_transmission>

000b69f6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b69f6:	2101      	movs	r1, #1
   b69f8:	f7ff bff9 	b.w	b69ee <_ZN7TwoWire15endTransmissionEh>

000b69fc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b69fc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b69fe:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6a00:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6a04:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6a06:	2201      	movs	r2, #1
   b6a08:	f04f 33ff 	mov.w	r3, #4294967295
   b6a0c:	f10d 0107 	add.w	r1, sp, #7
   b6a10:	47a0      	blx	r4
}
   b6a12:	b002      	add	sp, #8
   b6a14:	bd10      	pop	{r4, pc}

000b6a16 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6a16:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6a18:	6803      	ldr	r3, [r0, #0]
   b6a1a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6a1c:	f04f 33ff 	mov.w	r3, #4294967295
   b6a20:	46a4      	mov	ip, r4
}
   b6a22:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6a26:	4760      	bx	ip

000b6a28 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6a28:	b513      	push	{r0, r1, r4, lr}
   b6a2a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6a2c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6a2e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6a32:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6a34:	f10d 0107 	add.w	r1, sp, #7
   b6a38:	2201      	movs	r2, #1
   b6a3a:	47a0      	blx	r4
}
   b6a3c:	b002      	add	sp, #8
   b6a3e:	bd10      	pop	{r4, pc}

000b6a40 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6a40:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6a42:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a44:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6a4c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6a4e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a50:	d008      	beq.n	b6a64 <_ZN9TCPClient4readEv+0x24>
   b6a52:	6963      	ldr	r3, [r4, #20]
   b6a54:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6a58:	1c51      	adds	r1, r2, #1
   b6a5a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6a5e:	4413      	add	r3, r2
   b6a60:	7918      	ldrb	r0, [r3, #4]
}
   b6a62:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a64:	6803      	ldr	r3, [r0, #0]
   b6a66:	691b      	ldr	r3, [r3, #16]
   b6a68:	4798      	blx	r3
   b6a6a:	2800      	cmp	r0, #0
   b6a6c:	d1f1      	bne.n	b6a52 <_ZN9TCPClient4readEv+0x12>
   b6a6e:	f04f 30ff 	mov.w	r0, #4294967295
   b6a72:	e7f6      	b.n	b6a62 <_ZN9TCPClient4readEv+0x22>

000b6a74 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6a74:	4770      	bx	lr

000b6a76 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6a76:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6a78:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6a7a:	43c0      	mvns	r0, r0
   b6a7c:	0fc0      	lsrs	r0, r0, #31
   b6a7e:	4770      	bx	lr

000b6a80 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a80:	4770      	bx	lr
	...

000b6a84 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a84:	4b06      	ldr	r3, [pc, #24]	; (b6aa0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a86:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a88:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6a8a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a8e:	d005      	beq.n	b6a9c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a90:	4608      	mov	r0, r1
   b6a92:	f000 fc8d 	bl	b73b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a96:	2800      	cmp	r0, #0
   b6a98:	bf08      	it	eq
   b6a9a:	2400      	moveq	r4, #0
      }
   b6a9c:	4620      	mov	r0, r4
   b6a9e:	bd10      	pop	{r4, pc}
   b6aa0:	000b8800 	.word	0x000b8800

000b6aa4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6aa4:	b510      	push	{r4, lr}
   b6aa6:	21ac      	movs	r1, #172	; 0xac
   b6aa8:	4604      	mov	r4, r0
   b6aaa:	f7fd faf6 	bl	b409a <_ZdlPvj>
   b6aae:	4620      	mov	r0, r4
   b6ab0:	bd10      	pop	{r4, pc}

000b6ab2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6ab2:	21ac      	movs	r1, #172	; 0xac
   b6ab4:	f7fd baf1 	b.w	b409a <_ZdlPvj>

000b6ab8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6abc:	f04f 0800 	mov.w	r8, #0
   b6ac0:	b086      	sub	sp, #24
   b6ac2:	461c      	mov	r4, r3
   b6ac4:	f8c0 8004 	str.w	r8, [r0, #4]
   b6ac8:	4605      	mov	r5, r0
   b6aca:	460e      	mov	r6, r1
   b6acc:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6ace:	4641      	mov	r1, r8
   b6ad0:	2210      	movs	r2, #16
   b6ad2:	a802      	add	r0, sp, #8
   b6ad4:	f001 fa16 	bl	b7f04 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6ad8:	1c63      	adds	r3, r4, #1
   b6ada:	d009      	beq.n	b6af0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6ae0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6ae4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6ae8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6aec:	435c      	muls	r4, r3
   b6aee:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6af0:	6968      	ldr	r0, [r5, #20]
   b6af2:	2310      	movs	r3, #16
   b6af4:	9300      	str	r3, [sp, #0]
   b6af6:	6800      	ldr	r0, [r0, #0]
   b6af8:	ab02      	add	r3, sp, #8
   b6afa:	f241 0205 	movw	r2, #4101	; 0x1005
   b6afe:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6b02:	f7ff f8b9 	bl	b5c78 <sock_setsockopt>
    if (ret < 0) {
   b6b06:	2800      	cmp	r0, #0
   b6b08:	da07      	bge.n	b6b1a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6b0a:	f7ff fa49 	bl	b5fa0 <__errno>
   b6b0e:	6803      	ldr	r3, [r0, #0]
   b6b10:	606b      	str	r3, [r5, #4]
        return 0;
   b6b12:	2000      	movs	r0, #0
}
   b6b14:	b006      	add	sp, #24
   b6b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6b1a:	6968      	ldr	r0, [r5, #20]
   b6b1c:	2300      	movs	r3, #0
   b6b1e:	6800      	ldr	r0, [r0, #0]
   b6b20:	463a      	mov	r2, r7
   b6b22:	4631      	mov	r1, r6
   b6b24:	f7ff f8c8 	bl	b5cb8 <sock_send>
    if (ret < 0) {
   b6b28:	1e03      	subs	r3, r0, #0
   b6b2a:	dbee      	blt.n	b6b0a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6b2c:	4618      	mov	r0, r3
   b6b2e:	e7f1      	b.n	b6b14 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6b30 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6b30:	b530      	push	{r4, r5, lr}
   b6b32:	b087      	sub	sp, #28
   b6b34:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6b36:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6b38:	4668      	mov	r0, sp
   b6b3a:	f7ff fdeb 	bl	b6714 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b40:	3404      	adds	r4, #4
   b6b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b44:	682b      	ldr	r3, [r5, #0]
   b6b46:	7023      	strb	r3, [r4, #0]
    }
   b6b48:	b007      	add	sp, #28
   b6b4a:	bd30      	pop	{r4, r5, pc}

000b6b4c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6b4c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6b4e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6b50:	4b05      	ldr	r3, [pc, #20]	; (b6b68 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6b52:	4604      	mov	r4, r0
   b6b54:	358c      	adds	r5, #140	; 0x8c
   b6b56:	f844 3b04 	str.w	r3, [r4], #4
   b6b5a:	4606      	mov	r6, r0
   b6b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b60:	682b      	ldr	r3, [r5, #0]
   b6b62:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6b64:	4630      	mov	r0, r6
   b6b66:	bd70      	pop	{r4, r5, r6, pc}
   b6b68:	000b8830 	.word	0x000b8830

000b6b6c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b70:	4698      	mov	r8, r3
    stop();
   b6b72:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b74:	b093      	sub	sp, #76	; 0x4c
   b6b76:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6b78:	2400      	movs	r4, #0
    stop();
   b6b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b7c:	4606      	mov	r6, r0
   b6b7e:	4617      	mov	r7, r2
    stop();
   b6b80:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6b82:	4628      	mov	r0, r5
   b6b84:	466b      	mov	r3, sp
   b6b86:	4622      	mov	r2, r4
   b6b88:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6b8a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6b8c:	f7fe ff64 	bl	b5a58 <netdb_getaddrinfo>
   b6b90:	4605      	mov	r5, r0
   b6b92:	2800      	cmp	r0, #0
   b6b94:	d163      	bne.n	b6c5e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6b96:	9b00      	ldr	r3, [sp, #0]
   b6b98:	2b00      	cmp	r3, #0
   b6b9a:	d04b      	beq.n	b6c34 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6b9c:	695b      	ldr	r3, [r3, #20]
   b6b9e:	2b00      	cmp	r3, #0
   b6ba0:	d048      	beq.n	b6c34 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6ba2:	a806      	add	r0, sp, #24
   b6ba4:	f7ff fd72 	bl	b668c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6ba8:	9b00      	ldr	r3, [sp, #0]
   b6baa:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6bac:	7863      	ldrb	r3, [r4, #1]
   b6bae:	2b02      	cmp	r3, #2
   b6bb0:	d104      	bne.n	b6bbc <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6bb2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6bb4:	a806      	add	r0, sp, #24
   b6bb6:	f7ff ffbb 	bl	b6b30 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6bba:	e026      	b.n	b6c0a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6bbc:	2b0a      	cmp	r3, #10
   b6bbe:	d124      	bne.n	b6c0a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6bc0:	2211      	movs	r2, #17
   b6bc2:	4629      	mov	r1, r5
   b6bc4:	a801      	add	r0, sp, #4
   b6bc6:	f001 f99d 	bl	b7f04 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6bca:	68a3      	ldr	r3, [r4, #8]
   b6bcc:	2b00      	cmp	r3, #0
   b6bce:	d038      	beq.n	b6c42 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6bd0:	f104 0308 	add.w	r3, r4, #8
   b6bd4:	f10d 0c04 	add.w	ip, sp, #4
   b6bd8:	3418      	adds	r4, #24
   b6bda:	6818      	ldr	r0, [r3, #0]
   b6bdc:	6859      	ldr	r1, [r3, #4]
   b6bde:	4662      	mov	r2, ip
   b6be0:	c203      	stmia	r2!, {r0, r1}
   b6be2:	3308      	adds	r3, #8
   b6be4:	42a3      	cmp	r3, r4
   b6be6:	4694      	mov	ip, r2
   b6be8:	d1f7      	bne.n	b6bda <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6bea:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6bec:	a901      	add	r1, sp, #4
   b6bee:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6bf0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6bf4:	f7ff fd58 	bl	b66a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6bf8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6bfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6c00:	ac07      	add	r4, sp, #28
   b6c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c04:	f8dc 3000 	ldr.w	r3, [ip]
   b6c08:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6c0a:	a806      	add	r0, sp, #24
   b6c0c:	f7ff fd5e 	bl	b66cc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6c10:	b180      	cbz	r0, b6c34 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6c12:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6c14:	ad07      	add	r5, sp, #28
   b6c16:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6c1a:	4b12      	ldr	r3, [pc, #72]	; (b6c64 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6c1c:	930c      	str	r3, [sp, #48]	; 0x30
   b6c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c20:	ac0d      	add	r4, sp, #52	; 0x34
   b6c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c24:	682b      	ldr	r3, [r5, #0]
   b6c26:	7023      	strb	r3, [r4, #0]
   b6c28:	463a      	mov	r2, r7
   b6c2a:	4643      	mov	r3, r8
   b6c2c:	a90c      	add	r1, sp, #48	; 0x30
   b6c2e:	4630      	mov	r0, r6
   b6c30:	47c8      	blx	r9
   b6c32:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6c34:	9800      	ldr	r0, [sp, #0]
   b6c36:	f7fe ff07 	bl	b5a48 <netdb_freeaddrinfo>
}
   b6c3a:	4628      	mov	r0, r5
   b6c3c:	b013      	add	sp, #76	; 0x4c
   b6c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6c42:	68e3      	ldr	r3, [r4, #12]
   b6c44:	2b00      	cmp	r3, #0
   b6c46:	d1c3      	bne.n	b6bd0 <_ZN9TCPClient7connectEPKctm+0x64>
   b6c48:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6c4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6c50:	f7fe ff6a 	bl	b5b28 <inet_htonl>
   b6c54:	4581      	cmp	r9, r0
   b6c56:	d1bb      	bne.n	b6bd0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6c58:	f104 0114 	add.w	r1, r4, #20
   b6c5c:	e7aa      	b.n	b6bb4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6c5e:	4625      	mov	r5, r4
   b6c60:	e7e8      	b.n	b6c34 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6c62:	bf00      	nop
   b6c64:	000b8830 	.word	0x000b8830

000b6c68 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6c68:	b538      	push	{r3, r4, r5, lr}
   b6c6a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6c6c:	681a      	ldr	r2, [r3, #0]
   b6c6e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6c70:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6c72:	da10      	bge.n	b6c96 <_ZN9TCPClient9connectedEv+0x2e>
   b6c74:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6c78:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6c7c:	429a      	cmp	r2, r3
   b6c7e:	d10a      	bne.n	b6c96 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6c80:	6803      	ldr	r3, [r0, #0]
   b6c82:	691b      	ldr	r3, [r3, #16]
   b6c84:	4798      	blx	r3
        if (!rv) {
   b6c86:	4604      	mov	r4, r0
   b6c88:	b928      	cbnz	r0, b6c96 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6c8a:	682b      	ldr	r3, [r5, #0]
   b6c8c:	4628      	mov	r0, r5
   b6c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c90:	4798      	blx	r3
        rv = available();
   b6c92:	4620      	mov	r0, r4
}
   b6c94:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6c96:	2001      	movs	r0, #1
   b6c98:	e7fc      	b.n	b6c94 <_ZN9TCPClient9connectedEv+0x2c>

000b6c9a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6c9a:	b510      	push	{r4, lr}
   b6c9c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6c9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6ca2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6ca6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6ca8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6caa:	d005      	beq.n	b6cb8 <_ZN9TCPClient4peekEv+0x1e>
   b6cac:	6963      	ldr	r3, [r4, #20]
   b6cae:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6cb2:	4413      	add	r3, r2
   b6cb4:	7918      	ldrb	r0, [r3, #4]
}
   b6cb6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6cb8:	6803      	ldr	r3, [r0, #0]
   b6cba:	691b      	ldr	r3, [r3, #16]
   b6cbc:	4798      	blx	r3
   b6cbe:	2800      	cmp	r0, #0
   b6cc0:	d1f4      	bne.n	b6cac <_ZN9TCPClient4peekEv+0x12>
   b6cc2:	f04f 30ff 	mov.w	r0, #4294967295
   b6cc6:	e7f6      	b.n	b6cb6 <_ZN9TCPClient4peekEv+0x1c>

000b6cc8 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cca:	6943      	ldr	r3, [r0, #20]
   b6ccc:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6cce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6cd2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6cd6:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6cd8:	4605      	mov	r5, r0
   b6cda:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6cdc:	d016      	beq.n	b6d0c <_ZN9TCPClient4readEPhj+0x44>
   b6cde:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6ce0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6ce4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6ce8:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6cea:	42bc      	cmp	r4, r7
   b6cec:	bf28      	it	cs
   b6cee:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6cf0:	3304      	adds	r3, #4
   b6cf2:	4622      	mov	r2, r4
   b6cf4:	4419      	add	r1, r3
   b6cf6:	4630      	mov	r0, r6
   b6cf8:	f001 f8f6 	bl	b7ee8 <memcpy>
   b6cfc:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6cfe:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6d02:	4423      	add	r3, r4
   b6d04:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6d08:	4620      	mov	r0, r4
   b6d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6d0c:	6803      	ldr	r3, [r0, #0]
   b6d0e:	691b      	ldr	r3, [r3, #16]
   b6d10:	4798      	blx	r3
   b6d12:	2800      	cmp	r0, #0
   b6d14:	d1e3      	bne.n	b6cde <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6d16:	f04f 34ff 	mov.w	r4, #4294967295
   b6d1a:	e7f5      	b.n	b6d08 <_ZN9TCPClient4readEPhj+0x40>

000b6d1c <_ZN9TCPClient12flush_bufferEv>:
   b6d1c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6d1e:	2300      	movs	r3, #0
   b6d20:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6d24:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6d26:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6d2a:	4770      	bx	lr

000b6d2c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d30:	461f      	mov	r7, r3
    stop();
   b6d32:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d34:	460c      	mov	r4, r1
    stop();
   b6d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d38:	b08a      	sub	sp, #40	; 0x28
   b6d3a:	4605      	mov	r5, r0
   b6d3c:	4616      	mov	r6, r2
    stop();
   b6d3e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6d40:	7d23      	ldrb	r3, [r4, #20]
   b6d42:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6d46:	2b04      	cmp	r3, #4
   b6d48:	bf0c      	ite	eq
   b6d4a:	2002      	moveq	r0, #2
   b6d4c:	200a      	movne	r0, #10
   b6d4e:	2206      	movs	r2, #6
   b6d50:	2101      	movs	r1, #1
   b6d52:	f7fe ffb9 	bl	b5cc8 <sock_socket>
   b6d56:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6d5a:	696b      	ldr	r3, [r5, #20]
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	2b00      	cmp	r3, #0
   b6d60:	da08      	bge.n	b6d74 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6d62:	682b      	ldr	r3, [r5, #0]
   b6d64:	4628      	mov	r0, r5
   b6d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6d68:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6d6a:	4798      	blx	r3
}
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	b00a      	add	sp, #40	; 0x28
   b6d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6d74:	4628      	mov	r0, r5
   b6d76:	f7ff ffd1 	bl	b6d1c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6d7a:	b1b7      	cbz	r7, b6daa <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6d7c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6d7e:	a903      	add	r1, sp, #12
   b6d80:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6d82:	9303      	str	r3, [sp, #12]
   b6d84:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6d88:	f7fe fe8e 	bl	b5aa8 <if_index_to_name>
   b6d8c:	2800      	cmp	r0, #0
   b6d8e:	d1e8      	bne.n	b6d62 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6d90:	6968      	ldr	r0, [r5, #20]
   b6d92:	2306      	movs	r3, #6
   b6d94:	9300      	str	r3, [sp, #0]
   b6d96:	6800      	ldr	r0, [r0, #0]
   b6d98:	ab03      	add	r3, sp, #12
   b6d9a:	f241 020b 	movw	r2, #4107	; 0x100b
   b6d9e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6da2:	f7fe ff69 	bl	b5c78 <sock_setsockopt>
   b6da6:	2800      	cmp	r0, #0
   b6da8:	d1db      	bne.n	b6d62 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6daa:	221c      	movs	r2, #28
   b6dac:	2100      	movs	r1, #0
   b6dae:	a803      	add	r0, sp, #12
   b6db0:	f001 f8a8 	bl	b7f04 <memset>
    if (ip.version() == 4) {
   b6db4:	7d23      	ldrb	r3, [r4, #20]
   b6db6:	2b04      	cmp	r3, #4
   b6db8:	d11d      	bne.n	b6df6 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6dba:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6dbe:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6dc0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6dc4:	f7fe feb8 	bl	b5b38 <inet_htons>
   b6dc8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6dcc:	6860      	ldr	r0, [r4, #4]
   b6dce:	f7fe feab 	bl	b5b28 <inet_htonl>
   b6dd2:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6dd4:	696b      	ldr	r3, [r5, #20]
   b6dd6:	221c      	movs	r2, #28
   b6dd8:	6818      	ldr	r0, [r3, #0]
   b6dda:	a903      	add	r1, sp, #12
   b6ddc:	f7fe ff5c 	bl	b5c98 <sock_connect>
   b6de0:	2800      	cmp	r0, #0
   b6de2:	d1be      	bne.n	b6d62 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6de4:	3404      	adds	r4, #4
   b6de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6de8:	696d      	ldr	r5, [r5, #20]
   b6dea:	358c      	adds	r5, #140	; 0x8c
   b6dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6dee:	6823      	ldr	r3, [r4, #0]
   b6df0:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6df2:	2401      	movs	r4, #1
   b6df4:	e7ba      	b.n	b6d6c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6df6:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6dfa:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6dfc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6e00:	f7fe fe9a 	bl	b5b38 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6e04:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6e06:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6e0a:	1d23      	adds	r3, r4, #4
   b6e0c:	f104 0714 	add.w	r7, r4, #20
   b6e10:	6818      	ldr	r0, [r3, #0]
   b6e12:	6859      	ldr	r1, [r3, #4]
   b6e14:	4632      	mov	r2, r6
   b6e16:	c203      	stmia	r2!, {r0, r1}
   b6e18:	3308      	adds	r3, #8
   b6e1a:	42bb      	cmp	r3, r7
   b6e1c:	4616      	mov	r6, r2
   b6e1e:	d1f7      	bne.n	b6e10 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6e20:	e7d8      	b.n	b6dd4 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6e24 <_ZN9TCPClient9availableEv>:
{
   b6e24:	b530      	push	{r4, r5, lr}
   b6e26:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6e28:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6e2c:	b08b      	sub	sp, #44	; 0x2c
   b6e2e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6e30:	b12b      	cbz	r3, b6e3e <_ZN9TCPClient9availableEv+0x1a>
   b6e32:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6e36:	429a      	cmp	r2, r3
   b6e38:	d101      	bne.n	b6e3e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6e3a:	f7ff ff6f 	bl	b6d1c <_ZN9TCPClient12flush_bufferEv>
   b6e3e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6e40:	6808      	ldr	r0, [r1, #0]
   b6e42:	2800      	cmp	r0, #0
   b6e44:	db18      	blt.n	b6e78 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6e46:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6e4a:	2d7f      	cmp	r5, #127	; 0x7f
   b6e4c:	d814      	bhi.n	b6e78 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6e4e:	3104      	adds	r1, #4
   b6e50:	2308      	movs	r3, #8
   b6e52:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6e56:	4429      	add	r1, r5
   b6e58:	f7fe ff26 	bl	b5ca8 <sock_recv>
            if (ret > 0) {
   b6e5c:	2800      	cmp	r0, #0
   b6e5e:	dd13      	ble.n	b6e88 <_ZN9TCPClient9availableEv+0x64>
   b6e60:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6e62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6e66:	b90a      	cbnz	r2, b6e6c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6e68:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6e6c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6e6e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6e72:	4410      	add	r0, r2
   b6e74:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6e78:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6e7a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6e7e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6e82:	1ac0      	subs	r0, r0, r3
   b6e84:	b00b      	add	sp, #44	; 0x2c
   b6e86:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6e88:	f7ff f88a 	bl	b5fa0 <__errno>
   b6e8c:	6803      	ldr	r3, [r0, #0]
   b6e8e:	2b0b      	cmp	r3, #11
   b6e90:	d0f2      	beq.n	b6e78 <_ZN9TCPClient9availableEv+0x54>
   b6e92:	f7ff f885 	bl	b5fa0 <__errno>
   b6e96:	6803      	ldr	r3, [r0, #0]
   b6e98:	2b0b      	cmp	r3, #11
   b6e9a:	d0ed      	beq.n	b6e78 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6e9c:	2320      	movs	r3, #32
   b6e9e:	2500      	movs	r5, #0
   b6ea0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6ea4:	f7ff f87c 	bl	b5fa0 <__errno>
   b6ea8:	6803      	ldr	r3, [r0, #0]
   b6eaa:	9301      	str	r3, [sp, #4]
   b6eac:	4b08      	ldr	r3, [pc, #32]	; (b6ed0 <_ZN9TCPClient9availableEv+0xac>)
   b6eae:	4909      	ldr	r1, [pc, #36]	; (b6ed4 <_ZN9TCPClient9availableEv+0xb0>)
   b6eb0:	9300      	str	r3, [sp, #0]
   b6eb2:	aa02      	add	r2, sp, #8
   b6eb4:	462b      	mov	r3, r5
   b6eb6:	2032      	movs	r0, #50	; 0x32
   b6eb8:	f7fe ffae 	bl	b5e18 <log_message>
                    sock_close(d_->sock);
   b6ebc:	6963      	ldr	r3, [r4, #20]
   b6ebe:	6818      	ldr	r0, [r3, #0]
   b6ec0:	f7fe fee2 	bl	b5c88 <sock_close>
   b6ec4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6ec6:	f04f 32ff 	mov.w	r2, #4294967295
   b6eca:	601a      	str	r2, [r3, #0]
   b6ecc:	e7d4      	b.n	b6e78 <_ZN9TCPClient9availableEv+0x54>
   b6ece:	bf00      	nop
   b6ed0:	000b88cb 	.word	0x000b88cb
   b6ed4:	000b88c4 	.word	0x000b88c4

000b6ed8 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6ed8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6eda:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6edc:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6ede:	6818      	ldr	r0, [r3, #0]
   b6ee0:	2800      	cmp	r0, #0
   b6ee2:	db01      	blt.n	b6ee8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6ee4:	f7fe fed0 	bl	b5c88 <sock_close>
   b6ee8:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6eea:	f04f 32ff 	mov.w	r2, #4294967295
   b6eee:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6ef0:	6960      	ldr	r0, [r4, #20]
   b6ef2:	2211      	movs	r2, #17
   b6ef4:	2100      	movs	r1, #0
   b6ef6:	308c      	adds	r0, #140	; 0x8c
   b6ef8:	f001 f804 	bl	b7f04 <memset>
    flush_buffer();
   b6efc:	4620      	mov	r0, r4
}
   b6efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6f02:	f7ff bf0b 	b.w	b6d1c <_ZN9TCPClient12flush_bufferEv>

000b6f06 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6f06:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6f08:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6f0a:	4604      	mov	r4, r0
          total(0) {
   b6f0c:	6001      	str	r1, [r0, #0]
   b6f0e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6f12:	3088      	adds	r0, #136	; 0x88
   b6f14:	f7ff fbba 	bl	b668c <_ZN9IPAddressC1Ev>
}
   b6f18:	4620      	mov	r0, r4
   b6f1a:	bd10      	pop	{r4, pc}

000b6f1c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f1e:	2300      	movs	r3, #0
   b6f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6f24:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6f28:	4a0e      	ldr	r2, [pc, #56]	; (b6f64 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6f2a:	6103      	str	r3, [r0, #16]
   b6f2c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6f2e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6f30:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6f32:	20ac      	movs	r0, #172	; 0xac
   b6f34:	9101      	str	r1, [sp, #4]
   b6f36:	f7fd f8ac 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6f3a:	1e05      	subs	r5, r0, #0
   b6f3c:	f105 060c 	add.w	r6, r5, #12
   b6f40:	d008      	beq.n	b6f54 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6f42:	2301      	movs	r3, #1
   b6f44:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6f48:	4b07      	ldr	r3, [pc, #28]	; (b6f68 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6f4a:	9901      	ldr	r1, [sp, #4]
   b6f4c:	602b      	str	r3, [r5, #0]
   b6f4e:	4630      	mov	r0, r6
   b6f50:	f7ff ffd9 	bl	b6f06 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6f54:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6f56:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6f5a:	f7ff fedf 	bl	b6d1c <_ZN9TCPClient12flush_bufferEv>
}
   b6f5e:	b002      	add	sp, #8
   b6f60:	bd70      	pop	{r4, r5, r6, pc}
   b6f62:	bf00      	nop
   b6f64:	000b8900 	.word	0x000b8900
   b6f68:	000b88e4 	.word	0x000b88e4

000b6f6c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6f6c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6f6e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6f72:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6f74:	f7ff ffd2 	bl	b6f1c <_ZN9TCPClientC1Ei>
}
   b6f78:	4620      	mov	r0, r4
   b6f7a:	bd10      	pop	{r4, pc}

000b6f7c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6f7c:	b510      	push	{r4, lr}
   b6f7e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6f80:	6800      	ldr	r0, [r0, #0]
   b6f82:	2800      	cmp	r0, #0
   b6f84:	db01      	blt.n	b6f8a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6f86:	f7fe fe7f 	bl	b5c88 <sock_close>
    }
}
   b6f8a:	4620      	mov	r0, r4
   b6f8c:	bd10      	pop	{r4, pc}

000b6f8e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6f8e:	300c      	adds	r0, #12
   b6f90:	f7ff bff4 	b.w	b6f7c <_ZN9TCPClient4DataD1Ev>

000b6f94 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6f94:	2200      	movs	r2, #0
   b6f96:	6840      	ldr	r0, [r0, #4]
   b6f98:	4611      	mov	r1, r2
   b6f9a:	f7fe bf81 	b.w	b5ea0 <network_ready>

000b6f9e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6f9e:	2200      	movs	r2, #0
   b6fa0:	6840      	ldr	r0, [r0, #4]
   b6fa2:	4611      	mov	r1, r2
   b6fa4:	f7fe bf9c 	b.w	b5ee0 <network_listening>

000b6fa8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6fa8:	2200      	movs	r2, #0
   b6faa:	6840      	ldr	r0, [r0, #4]
   b6fac:	4611      	mov	r1, r2
   b6fae:	f7fe bfaf 	b.w	b5f10 <network_get_listen_timeout>

000b6fb2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6fb2:	6840      	ldr	r0, [r0, #4]
   b6fb4:	2200      	movs	r2, #0
   b6fb6:	f7fe bfa3 	b.w	b5f00 <network_set_listen_timeout>

000b6fba <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6fba:	6840      	ldr	r0, [r0, #4]
   b6fbc:	2200      	movs	r2, #0
   b6fbe:	f081 0101 	eor.w	r1, r1, #1
   b6fc2:	f7fe bf85 	b.w	b5ed0 <network_listen>

000b6fc6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6fc6:	2300      	movs	r3, #0
   b6fc8:	6840      	ldr	r0, [r0, #4]
   b6fca:	461a      	mov	r2, r3
   b6fcc:	4619      	mov	r1, r3
   b6fce:	f7fe bf77 	b.w	b5ec0 <network_off>

000b6fd2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6fd2:	2300      	movs	r3, #0
   b6fd4:	6840      	ldr	r0, [r0, #4]
   b6fd6:	461a      	mov	r2, r3
   b6fd8:	4619      	mov	r1, r3
   b6fda:	f7fe bf69 	b.w	b5eb0 <network_on>

000b6fde <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6fde:	2200      	movs	r2, #0
   b6fe0:	6840      	ldr	r0, [r0, #4]
   b6fe2:	4611      	mov	r1, r2
   b6fe4:	f7fe bf4c 	b.w	b5e80 <network_connecting>

000b6fe8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6fe8:	6840      	ldr	r0, [r0, #4]
   b6fea:	2200      	movs	r2, #0
   b6fec:	2102      	movs	r1, #2
   b6fee:	f7fe bf4f 	b.w	b5e90 <network_disconnect>

000b6ff2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6ff2:	2300      	movs	r3, #0
   b6ff4:	6840      	ldr	r0, [r0, #4]
   b6ff6:	461a      	mov	r2, r3
   b6ff8:	f7fe bf3a 	b.w	b5e70 <network_connect>

000b6ffc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6ffc:	4b02      	ldr	r3, [pc, #8]	; (b7008 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6ffe:	2204      	movs	r2, #4
   b7000:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7002:	4a02      	ldr	r2, [pc, #8]	; (b700c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7004:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7006:	4770      	bx	lr
   b7008:	2003e718 	.word	0x2003e718
   b700c:	000b894c 	.word	0x000b894c

000b7010 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7010:	2300      	movs	r3, #0
   b7012:	6840      	ldr	r0, [r0, #4]
   b7014:	461a      	mov	r2, r3
   b7016:	f7fe bf2b 	b.w	b5e70 <network_connect>

000b701a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b701a:	6840      	ldr	r0, [r0, #4]
   b701c:	2200      	movs	r2, #0
   b701e:	2102      	movs	r1, #2
   b7020:	f7fe bf36 	b.w	b5e90 <network_disconnect>

000b7024 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7024:	2200      	movs	r2, #0
   b7026:	6840      	ldr	r0, [r0, #4]
   b7028:	4611      	mov	r1, r2
   b702a:	f7fe bf29 	b.w	b5e80 <network_connecting>

000b702e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b702e:	2200      	movs	r2, #0
   b7030:	6840      	ldr	r0, [r0, #4]
   b7032:	4611      	mov	r1, r2
   b7034:	f7fe bf34 	b.w	b5ea0 <network_ready>

000b7038 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7038:	2300      	movs	r3, #0
   b703a:	6840      	ldr	r0, [r0, #4]
   b703c:	461a      	mov	r2, r3
   b703e:	4619      	mov	r1, r3
   b7040:	f7fe bf36 	b.w	b5eb0 <network_on>

000b7044 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7044:	2300      	movs	r3, #0
   b7046:	6840      	ldr	r0, [r0, #4]
   b7048:	461a      	mov	r2, r3
   b704a:	4619      	mov	r1, r3
   b704c:	f7fe bf38 	b.w	b5ec0 <network_off>

000b7050 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7050:	6840      	ldr	r0, [r0, #4]
   b7052:	2100      	movs	r1, #0
   b7054:	f7fe bf64 	b.w	b5f20 <network_is_on>

000b7058 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7058:	6840      	ldr	r0, [r0, #4]
   b705a:	2100      	movs	r1, #0
   b705c:	f7fe bf68 	b.w	b5f30 <network_is_off>

000b7060 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7060:	6840      	ldr	r0, [r0, #4]
   b7062:	2200      	movs	r2, #0
   b7064:	f081 0101 	eor.w	r1, r1, #1
   b7068:	f7fe bf32 	b.w	b5ed0 <network_listen>

000b706c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b706c:	6840      	ldr	r0, [r0, #4]
   b706e:	2200      	movs	r2, #0
   b7070:	f7fe bf46 	b.w	b5f00 <network_set_listen_timeout>

000b7074 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7074:	2200      	movs	r2, #0
   b7076:	6840      	ldr	r0, [r0, #4]
   b7078:	4611      	mov	r1, r2
   b707a:	f7fe bf49 	b.w	b5f10 <network_get_listen_timeout>

000b707e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b707e:	2200      	movs	r2, #0
   b7080:	6840      	ldr	r0, [r0, #4]
   b7082:	4611      	mov	r1, r2
   b7084:	f7fe bf2c 	b.w	b5ee0 <network_listening>

000b7088 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b708c:	b095      	sub	sp, #84	; 0x54
   b708e:	4614      	mov	r4, r2
   b7090:	460d      	mov	r5, r1
   b7092:	4607      	mov	r7, r0
    IPAddress addr;
   b7094:	f7ff fafa 	bl	b668c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7098:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b709a:	221c      	movs	r2, #28
   b709c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b709e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b70a0:	f000 ff30 	bl	b7f04 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b70a4:	2340      	movs	r3, #64	; 0x40
   b70a6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b70a8:	4620      	mov	r0, r4
   b70aa:	466b      	mov	r3, sp
   b70ac:	aa0c      	add	r2, sp, #48	; 0x30
   b70ae:	2100      	movs	r1, #0
   b70b0:	f7fe fcd2 	bl	b5a58 <netdb_getaddrinfo>
    if (!r) {
   b70b4:	4604      	mov	r4, r0
   b70b6:	2800      	cmp	r0, #0
   b70b8:	d14b      	bne.n	b7152 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b70ba:	4602      	mov	r2, r0
   b70bc:	2101      	movs	r1, #1
   b70be:	6868      	ldr	r0, [r5, #4]
   b70c0:	f7fe feee 	bl	b5ea0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b70c4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b70c6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b70c8:	4622      	mov	r2, r4
   b70ca:	6868      	ldr	r0, [r5, #4]
   b70cc:	f7fe fee8 	bl	b5ea0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70d0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b70d2:	4681      	mov	r9, r0
        bool ok = false;
   b70d4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70d6:	2e00      	cmp	r6, #0
   b70d8:	d03b      	beq.n	b7152 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b70da:	2900      	cmp	r1, #0
   b70dc:	d139      	bne.n	b7152 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b70de:	6873      	ldr	r3, [r6, #4]
   b70e0:	2b02      	cmp	r3, #2
   b70e2:	d003      	beq.n	b70ec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b70e4:	2b0a      	cmp	r3, #10
   b70e6:	d011      	beq.n	b710c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70e8:	69f6      	ldr	r6, [r6, #28]
   b70ea:	e7f4      	b.n	b70d6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b70ec:	f1b8 0f00 	cmp.w	r8, #0
   b70f0:	d0fa      	beq.n	b70e8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b70f2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b70f4:	a806      	add	r0, sp, #24
   b70f6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b70f8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b70fa:	f7ff fb0b 	bl	b6714 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b70fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7100:	1d3c      	adds	r4, r7, #4
   b7102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7104:	682b      	ldr	r3, [r5, #0]
   b7106:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7108:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b710a:	e7ed      	b.n	b70e8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b710c:	f1b9 0f00 	cmp.w	r9, #0
   b7110:	d0ea      	beq.n	b70e8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7112:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7114:	2210      	movs	r2, #16
   b7116:	a801      	add	r0, sp, #4
   b7118:	f000 fef4 	bl	b7f04 <memset>
                    a.v = 6;
   b711c:	2306      	movs	r3, #6
   b711e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7122:	ad01      	add	r5, sp, #4
   b7124:	f104 0308 	add.w	r3, r4, #8
   b7128:	3418      	adds	r4, #24
   b712a:	6818      	ldr	r0, [r3, #0]
   b712c:	6859      	ldr	r1, [r3, #4]
   b712e:	462a      	mov	r2, r5
   b7130:	c203      	stmia	r2!, {r0, r1}
   b7132:	3308      	adds	r3, #8
   b7134:	42a3      	cmp	r3, r4
   b7136:	4615      	mov	r5, r2
   b7138:	d1f7      	bne.n	b712a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b713a:	a901      	add	r1, sp, #4
   b713c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b713e:	ad07      	add	r5, sp, #28
   b7140:	f7ff fab2 	bl	b66a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7146:	1d3c      	adds	r4, r7, #4
   b7148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b714a:	682b      	ldr	r3, [r5, #0]
   b714c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b714e:	4649      	mov	r1, r9
   b7150:	e7ca      	b.n	b70e8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7152:	9800      	ldr	r0, [sp, #0]
   b7154:	f7fe fc78 	bl	b5a48 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7158:	4638      	mov	r0, r7
   b715a:	b015      	add	sp, #84	; 0x54
   b715c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7160 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7160:	4b02      	ldr	r3, [pc, #8]	; (b716c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7162:	4a03      	ldr	r2, [pc, #12]	; (b7170 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7164:	601a      	str	r2, [r3, #0]
   b7166:	2200      	movs	r2, #0
   b7168:	605a      	str	r2, [r3, #4]

} // spark
   b716a:	4770      	bx	lr
   b716c:	2003e720 	.word	0x2003e720
   b7170:	000b8988 	.word	0x000b8988

000b7174 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7174:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7176:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7178:	d902      	bls.n	b7180 <pinAvailable+0xc>
    return false;
   b717a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b717c:	b002      	add	sp, #8
   b717e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7180:	f1a0 030b 	sub.w	r3, r0, #11
   b7184:	2b02      	cmp	r3, #2
   b7186:	d81a      	bhi.n	b71be <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7188:	4c17      	ldr	r4, [pc, #92]	; (b71e8 <pinAvailable+0x74>)
   b718a:	7821      	ldrb	r1, [r4, #0]
   b718c:	f3bf 8f5b 	dmb	ish
   b7190:	f011 0101 	ands.w	r1, r1, #1
   b7194:	d10b      	bne.n	b71ae <pinAvailable+0x3a>
   b7196:	4620      	mov	r0, r4
   b7198:	9101      	str	r1, [sp, #4]
   b719a:	f7fc ff8d 	bl	b40b8 <__cxa_guard_acquire>
   b719e:	9901      	ldr	r1, [sp, #4]
   b71a0:	b128      	cbz	r0, b71ae <pinAvailable+0x3a>
   b71a2:	4812      	ldr	r0, [pc, #72]	; (b71ec <pinAvailable+0x78>)
   b71a4:	f7fe ff58 	bl	b6058 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b71a8:	4620      	mov	r0, r4
   b71aa:	f7fc ff8a 	bl	b40c2 <__cxa_guard_release>
   b71ae:	4b0f      	ldr	r3, [pc, #60]	; (b71ec <pinAvailable+0x78>)
   b71b0:	7818      	ldrb	r0, [r3, #0]
   b71b2:	f7fe fdc1 	bl	b5d38 <hal_spi_is_enabled>
   b71b6:	2800      	cmp	r0, #0
   b71b8:	d1df      	bne.n	b717a <pinAvailable+0x6>
  return true; // 'pin' is available
   b71ba:	2001      	movs	r0, #1
   b71bc:	e7de      	b.n	b717c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b71be:	2801      	cmp	r0, #1
   b71c0:	d809      	bhi.n	b71d6 <pinAvailable+0x62>
   b71c2:	f000 f8cf 	bl	b7364 <_Z19__fetch_global_Wirev>
   b71c6:	2100      	movs	r1, #0
   b71c8:	7c00      	ldrb	r0, [r0, #16]
   b71ca:	f7fe fd3d 	bl	b5c48 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b71ce:	f080 0001 	eor.w	r0, r0, #1
   b71d2:	b2c0      	uxtb	r0, r0
   b71d4:	e7d2      	b.n	b717c <pinAvailable+0x8>
   b71d6:	3809      	subs	r0, #9
   b71d8:	2801      	cmp	r0, #1
   b71da:	d8ee      	bhi.n	b71ba <pinAvailable+0x46>
   b71dc:	f000 f882 	bl	b72e4 <_Z22__fetch_global_Serial1v>
   b71e0:	7c00      	ldrb	r0, [r0, #16]
   b71e2:	f7fe fcd9 	bl	b5b98 <hal_usart_is_enabled>
   b71e6:	e7f2      	b.n	b71ce <pinAvailable+0x5a>
   b71e8:	2003e6b8 	.word	0x2003e6b8
   b71ec:	2003e6bc 	.word	0x2003e6bc

000b71f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b71f0:	2823      	cmp	r0, #35	; 0x23
{
   b71f2:	b538      	push	{r3, r4, r5, lr}
   b71f4:	4604      	mov	r4, r0
   b71f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b71f8:	d80a      	bhi.n	b7210 <pinMode+0x20>
   b71fa:	29ff      	cmp	r1, #255	; 0xff
   b71fc:	d008      	beq.n	b7210 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b71fe:	f7ff ffb9 	bl	b7174 <pinAvailable>
   b7202:	b128      	cbz	r0, b7210 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7204:	4629      	mov	r1, r5
   b7206:	4620      	mov	r0, r4
}
   b7208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b720c:	f7fe bc2c 	b.w	b5a68 <HAL_Pin_Mode>
}
   b7210:	bd38      	pop	{r3, r4, r5, pc}

000b7212 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7212:	b538      	push	{r3, r4, r5, lr}
   b7214:	4604      	mov	r4, r0
   b7216:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7218:	f7fe fc2e 	bl	b5a78 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b721c:	28ff      	cmp	r0, #255	; 0xff
   b721e:	d010      	beq.n	b7242 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7220:	2806      	cmp	r0, #6
   b7222:	d804      	bhi.n	b722e <digitalWrite+0x1c>
   b7224:	234d      	movs	r3, #77	; 0x4d
   b7226:	fa23 f000 	lsr.w	r0, r3, r0
   b722a:	07c3      	lsls	r3, r0, #31
   b722c:	d409      	bmi.n	b7242 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b722e:	4620      	mov	r0, r4
   b7230:	f7ff ffa0 	bl	b7174 <pinAvailable>
   b7234:	b128      	cbz	r0, b7242 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7236:	4629      	mov	r1, r5
   b7238:	4620      	mov	r0, r4
}
   b723a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b723e:	f7fe bc23 	b.w	b5a88 <HAL_GPIO_Write>
}
   b7242:	bd38      	pop	{r3, r4, r5, pc}

000b7244 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7244:	b510      	push	{r4, lr}
   b7246:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7248:	f7fe fc16 	bl	b5a78 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b724c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b724e:	b2db      	uxtb	r3, r3
   b7250:	2b01      	cmp	r3, #1
   b7252:	d908      	bls.n	b7266 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7254:	4620      	mov	r0, r4
   b7256:	f7ff ff8d 	bl	b7174 <pinAvailable>
   b725a:	b120      	cbz	r0, b7266 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b725c:	4620      	mov	r0, r4
}
   b725e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7262:	f7fe bc19 	b.w	b5a98 <HAL_GPIO_Read>
}
   b7266:	2000      	movs	r0, #0
   b7268:	bd10      	pop	{r4, pc}

000b726a <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b726a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b726e:	4690      	mov	r8, r2
   b7270:	461f      	mov	r7, r3
   b7272:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7274:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b7276:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b7278:	f1c4 0107 	rsb	r1, r4, #7
   b727c:	f1b8 0f00 	cmp.w	r8, #0
   b7280:	d112      	bne.n	b72a8 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7282:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7286:	f001 0101 	and.w	r1, r1, #1
   b728a:	4630      	mov	r0, r6
   b728c:	f7ff ffc1 	bl	b7212 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7290:	2101      	movs	r1, #1
   b7292:	4628      	mov	r0, r5
   b7294:	f7ff ffbd 	bl	b7212 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b7298:	2100      	movs	r1, #0
   b729a:	4628      	mov	r0, r5
   b729c:	f7ff ffb9 	bl	b7212 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b72a0:	3c01      	subs	r4, #1
   b72a2:	d2e9      	bcs.n	b7278 <shiftOut+0xe>
  }
}
   b72a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b72a8:	fa47 f104 	asr.w	r1, r7, r4
   b72ac:	e7eb      	b.n	b7286 <shiftOut+0x1c>

000b72ae <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b72ae:	4770      	bx	lr

000b72b0 <_Z20acquireSerial1Bufferv>:
{
   b72b0:	b538      	push	{r3, r4, r5, lr}
   b72b2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b72b4:	2514      	movs	r5, #20
   b72b6:	462a      	mov	r2, r5
   b72b8:	2100      	movs	r1, #0
   b72ba:	f000 fe23 	bl	b7f04 <memset>
   b72be:	8025      	strh	r5, [r4, #0]
   b72c0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72c2:	4907      	ldr	r1, [pc, #28]	; (b72e0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b72c4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72c6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b72c8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72ca:	f000 f86f 	bl	b73ac <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72ce:	4904      	ldr	r1, [pc, #16]	; (b72e0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b72d0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72d2:	4628      	mov	r0, r5
   b72d4:	f000 f86a 	bl	b73ac <_ZnajRKSt9nothrow_t>
    };
   b72d8:	60e0      	str	r0, [r4, #12]
}
   b72da:	4620      	mov	r0, r4
   b72dc:	bd38      	pop	{r3, r4, r5, pc}
   b72de:	bf00      	nop
   b72e0:	000b89bc 	.word	0x000b89bc

000b72e4 <_Z22__fetch_global_Serial1v>:
{
   b72e4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b72e6:	4d0e      	ldr	r5, [pc, #56]	; (b7320 <_Z22__fetch_global_Serial1v+0x3c>)
   b72e8:	7829      	ldrb	r1, [r5, #0]
   b72ea:	f3bf 8f5b 	dmb	ish
   b72ee:	f011 0401 	ands.w	r4, r1, #1
{
   b72f2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b72f4:	d111      	bne.n	b731a <_Z22__fetch_global_Serial1v+0x36>
   b72f6:	4628      	mov	r0, r5
   b72f8:	f7fc fede 	bl	b40b8 <__cxa_guard_acquire>
   b72fc:	b168      	cbz	r0, b731a <_Z22__fetch_global_Serial1v+0x36>
   b72fe:	a801      	add	r0, sp, #4
   b7300:	f7ff ffd6 	bl	b72b0 <_Z20acquireSerial1Bufferv>
   b7304:	aa01      	add	r2, sp, #4
   b7306:	4621      	mov	r1, r4
   b7308:	4806      	ldr	r0, [pc, #24]	; (b7324 <_Z22__fetch_global_Serial1v+0x40>)
   b730a:	f7ff fad9 	bl	b68c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b730e:	4628      	mov	r0, r5
   b7310:	f7fc fed7 	bl	b40c2 <__cxa_guard_release>
   b7314:	4804      	ldr	r0, [pc, #16]	; (b7328 <_Z22__fetch_global_Serial1v+0x44>)
   b7316:	f000 fde1 	bl	b7edc <atexit>
    return serial1;
}
   b731a:	4802      	ldr	r0, [pc, #8]	; (b7324 <_Z22__fetch_global_Serial1v+0x40>)
   b731c:	b007      	add	sp, #28
   b731e:	bd30      	pop	{r4, r5, pc}
   b7320:	2003e728 	.word	0x2003e728
   b7324:	2003e72c 	.word	0x2003e72c
   b7328:	000b72af 	.word	0x000b72af

000b732c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b732c:	4770      	bx	lr
	...

000b7330 <_Z17acquireWireBufferv>:
{
   b7330:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7332:	4b0a      	ldr	r3, [pc, #40]	; (b735c <_Z17acquireWireBufferv+0x2c>)
   b7334:	6003      	str	r3, [r0, #0]
   b7336:	2301      	movs	r3, #1
{
   b7338:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b733a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b733c:	4908      	ldr	r1, [pc, #32]	; (b7360 <_Z17acquireWireBufferv+0x30>)
   b733e:	2020      	movs	r0, #32
   b7340:	f000 f834 	bl	b73ac <_ZnajRKSt9nothrow_t>
	};
   b7344:	2520      	movs	r5, #32
   b7346:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7348:	4905      	ldr	r1, [pc, #20]	; (b7360 <_Z17acquireWireBufferv+0x30>)
	};
   b734a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b734c:	4628      	mov	r0, r5
   b734e:	f000 f82d 	bl	b73ac <_ZnajRKSt9nothrow_t>
	};
   b7352:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7356:	4620      	mov	r0, r4
   b7358:	bd38      	pop	{r3, r4, r5, pc}
   b735a:	bf00      	nop
   b735c:	00010018 	.word	0x00010018
   b7360:	000b89bc 	.word	0x000b89bc

000b7364 <_Z19__fetch_global_Wirev>:
{
   b7364:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7366:	4d0e      	ldr	r5, [pc, #56]	; (b73a0 <_Z19__fetch_global_Wirev+0x3c>)
   b7368:	7829      	ldrb	r1, [r5, #0]
   b736a:	f3bf 8f5b 	dmb	ish
   b736e:	f011 0401 	ands.w	r4, r1, #1
{
   b7372:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7374:	d111      	bne.n	b739a <_Z19__fetch_global_Wirev+0x36>
   b7376:	4628      	mov	r0, r5
   b7378:	f7fc fe9e 	bl	b40b8 <__cxa_guard_acquire>
   b737c:	b168      	cbz	r0, b739a <_Z19__fetch_global_Wirev+0x36>
   b737e:	4668      	mov	r0, sp
   b7380:	f7ff ffd6 	bl	b7330 <_Z17acquireWireBufferv>
   b7384:	466a      	mov	r2, sp
   b7386:	4621      	mov	r1, r4
   b7388:	4806      	ldr	r0, [pc, #24]	; (b73a4 <_Z19__fetch_global_Wirev+0x40>)
   b738a:	f7ff fad9 	bl	b6940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b738e:	4628      	mov	r0, r5
   b7390:	f7fc fe97 	bl	b40c2 <__cxa_guard_release>
   b7394:	4804      	ldr	r0, [pc, #16]	; (b73a8 <_Z19__fetch_global_Wirev+0x44>)
   b7396:	f000 fda1 	bl	b7edc <atexit>
	return wire;
}
   b739a:	4802      	ldr	r0, [pc, #8]	; (b73a4 <_Z19__fetch_global_Wirev+0x40>)
   b739c:	b007      	add	sp, #28
   b739e:	bd30      	pop	{r4, r5, pc}
   b73a0:	2003e744 	.word	0x2003e744
   b73a4:	2003e748 	.word	0x2003e748
   b73a8:	000b732d 	.word	0x000b732d

000b73ac <_ZnajRKSt9nothrow_t>:
   b73ac:	f7fc be73 	b.w	b4096 <_Znaj>

000b73b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b73b0:	4901      	ldr	r1, [pc, #4]	; (b73b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b73b2:	f000 b8f9 	b.w	b75a8 <_ZNKSt9type_infoeqERKS_>
   b73b6:	bf00      	nop
   b73b8:	000b89d8 	.word	0x000b89d8

000b73bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b73bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b73be:	2400      	movs	r4, #0
   b73c0:	2310      	movs	r3, #16
   b73c2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b73c6:	6803      	ldr	r3, [r0, #0]
   b73c8:	4615      	mov	r5, r2
   b73ca:	699e      	ldr	r6, [r3, #24]
   b73cc:	6812      	ldr	r2, [r2, #0]
   b73ce:	466b      	mov	r3, sp
   b73d0:	e9cd 4400 	strd	r4, r4, [sp]
   b73d4:	47b0      	blx	r6
   b73d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b73da:	f003 0306 	and.w	r3, r3, #6
   b73de:	2b06      	cmp	r3, #6
   b73e0:	bf03      	ittte	eq
   b73e2:	9b00      	ldreq	r3, [sp, #0]
   b73e4:	602b      	streq	r3, [r5, #0]
   b73e6:	2001      	moveq	r0, #1
   b73e8:	4620      	movne	r0, r4
   b73ea:	b004      	add	sp, #16
   b73ec:	bd70      	pop	{r4, r5, r6, pc}

000b73ee <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b73ee:	9800      	ldr	r0, [sp, #0]
   b73f0:	4290      	cmp	r0, r2
   b73f2:	bf14      	ite	ne
   b73f4:	2001      	movne	r0, #1
   b73f6:	2006      	moveq	r0, #6
   b73f8:	4770      	bx	lr
	...

000b73fc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b73fc:	b510      	push	{r4, lr}
   b73fe:	4b03      	ldr	r3, [pc, #12]	; (b740c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7400:	6003      	str	r3, [r0, #0]
   b7402:	4604      	mov	r4, r0
   b7404:	f000 f8cd 	bl	b75a2 <_ZNSt9type_infoD1Ev>
   b7408:	4620      	mov	r0, r4
   b740a:	bd10      	pop	{r4, pc}
   b740c:	000b8a18 	.word	0x000b8a18

000b7410 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7410:	b510      	push	{r4, lr}
   b7412:	4604      	mov	r4, r0
   b7414:	f7ff fff2 	bl	b73fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7418:	4620      	mov	r0, r4
   b741a:	2108      	movs	r1, #8
   b741c:	f7fc fe3d 	bl	b409a <_ZdlPvj>
   b7420:	4620      	mov	r0, r4
   b7422:	bd10      	pop	{r4, pc}

000b7424 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7428:	461f      	mov	r7, r3
   b742a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b742e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7432:	4598      	cmp	r8, r3
   b7434:	4606      	mov	r6, r0
   b7436:	4615      	mov	r5, r2
   b7438:	d107      	bne.n	b744a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b743a:	9907      	ldr	r1, [sp, #28]
   b743c:	f000 f8b4 	bl	b75a8 <_ZNKSt9type_infoeqERKS_>
   b7440:	b118      	cbz	r0, b744a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7442:	7165      	strb	r5, [r4, #5]
   b7444:	2000      	movs	r0, #0
   b7446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b744a:	4639      	mov	r1, r7
   b744c:	4630      	mov	r0, r6
   b744e:	f000 f8ab 	bl	b75a8 <_ZNKSt9type_infoeqERKS_>
   b7452:	2800      	cmp	r0, #0
   b7454:	d0f6      	beq.n	b7444 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7456:	2301      	movs	r3, #1
   b7458:	f8c4 8000 	str.w	r8, [r4]
   b745c:	7125      	strb	r5, [r4, #4]
   b745e:	71a3      	strb	r3, [r4, #6]
   b7460:	e7f0      	b.n	b7444 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7462 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7462:	b538      	push	{r3, r4, r5, lr}
   b7464:	4615      	mov	r5, r2
   b7466:	461c      	mov	r4, r3
   b7468:	f000 f89e 	bl	b75a8 <_ZNKSt9type_infoeqERKS_>
   b746c:	b120      	cbz	r0, b7478 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b746e:	2308      	movs	r3, #8
   b7470:	60e3      	str	r3, [r4, #12]
   b7472:	2306      	movs	r3, #6
   b7474:	6025      	str	r5, [r4, #0]
   b7476:	7123      	strb	r3, [r4, #4]
   b7478:	bd38      	pop	{r3, r4, r5, pc}

000b747a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b747a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b747c:	4605      	mov	r5, r0
   b747e:	460c      	mov	r4, r1
   b7480:	9201      	str	r2, [sp, #4]
   b7482:	461e      	mov	r6, r3
   b7484:	f000 f890 	bl	b75a8 <_ZNKSt9type_infoeqERKS_>
   b7488:	b950      	cbnz	r0, b74a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b748a:	2e03      	cmp	r6, #3
   b748c:	d808      	bhi.n	b74a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b748e:	6823      	ldr	r3, [r4, #0]
   b7490:	9a01      	ldr	r2, [sp, #4]
   b7492:	695b      	ldr	r3, [r3, #20]
   b7494:	4629      	mov	r1, r5
   b7496:	4620      	mov	r0, r4
   b7498:	b002      	add	sp, #8
   b749a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b749e:	4718      	bx	r3
   b74a0:	b002      	add	sp, #8
   b74a2:	bd70      	pop	{r4, r5, r6, pc}

000b74a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b74a4:	b510      	push	{r4, lr}
   b74a6:	4b03      	ldr	r3, [pc, #12]	; (b74b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b74a8:	6003      	str	r3, [r0, #0]
   b74aa:	4604      	mov	r4, r0
   b74ac:	f7ff ffa6 	bl	b73fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b74b0:	4620      	mov	r0, r4
   b74b2:	bd10      	pop	{r4, pc}
   b74b4:	000b8a78 	.word	0x000b8a78

000b74b8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b74b8:	b510      	push	{r4, lr}
   b74ba:	4604      	mov	r4, r0
   b74bc:	f7ff fff2 	bl	b74a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b74c0:	4620      	mov	r0, r4
   b74c2:	210c      	movs	r1, #12
   b74c4:	f7fc fde9 	bl	b409a <_ZdlPvj>
   b74c8:	4620      	mov	r0, r4
   b74ca:	bd10      	pop	{r4, pc}

000b74cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b74cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b74ce:	9f08      	ldr	r7, [sp, #32]
   b74d0:	4297      	cmp	r7, r2
   b74d2:	4605      	mov	r5, r0
   b74d4:	460e      	mov	r6, r1
   b74d6:	4614      	mov	r4, r2
   b74d8:	d00a      	beq.n	b74f0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b74da:	68a8      	ldr	r0, [r5, #8]
   b74dc:	6802      	ldr	r2, [r0, #0]
   b74de:	9708      	str	r7, [sp, #32]
   b74e0:	6a15      	ldr	r5, [r2, #32]
   b74e2:	4631      	mov	r1, r6
   b74e4:	4622      	mov	r2, r4
   b74e6:	46ac      	mov	ip, r5
   b74e8:	b003      	add	sp, #12
   b74ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b74ee:	4760      	bx	ip
   b74f0:	4619      	mov	r1, r3
   b74f2:	9301      	str	r3, [sp, #4]
   b74f4:	f000 f858 	bl	b75a8 <_ZNKSt9type_infoeqERKS_>
   b74f8:	9b01      	ldr	r3, [sp, #4]
   b74fa:	2800      	cmp	r0, #0
   b74fc:	d0ed      	beq.n	b74da <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b74fe:	2006      	movs	r0, #6
   b7500:	b003      	add	sp, #12
   b7502:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7504 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7504:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7508:	460d      	mov	r5, r1
   b750a:	4619      	mov	r1, r3
   b750c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7510:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7514:	4681      	mov	r9, r0
   b7516:	4617      	mov	r7, r2
   b7518:	4698      	mov	r8, r3
   b751a:	f000 f845 	bl	b75a8 <_ZNKSt9type_infoeqERKS_>
   b751e:	b190      	cbz	r0, b7546 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7520:	2d00      	cmp	r5, #0
   b7522:	6034      	str	r4, [r6, #0]
   b7524:	7137      	strb	r7, [r6, #4]
   b7526:	db09      	blt.n	b753c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7528:	1961      	adds	r1, r4, r5
   b752a:	458a      	cmp	sl, r1
   b752c:	bf0c      	ite	eq
   b752e:	2106      	moveq	r1, #6
   b7530:	2101      	movne	r1, #1
   b7532:	71b1      	strb	r1, [r6, #6]
   b7534:	2000      	movs	r0, #0
   b7536:	b001      	add	sp, #4
   b7538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b753c:	3502      	adds	r5, #2
   b753e:	d1f9      	bne.n	b7534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7540:	2301      	movs	r3, #1
   b7542:	71b3      	strb	r3, [r6, #6]
   b7544:	e7f6      	b.n	b7534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7546:	4554      	cmp	r4, sl
   b7548:	d106      	bne.n	b7558 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b754a:	4659      	mov	r1, fp
   b754c:	4648      	mov	r0, r9
   b754e:	f000 f82b 	bl	b75a8 <_ZNKSt9type_infoeqERKS_>
   b7552:	b108      	cbz	r0, b7558 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7554:	7177      	strb	r7, [r6, #5]
   b7556:	e7ed      	b.n	b7534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7558:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b755c:	6803      	ldr	r3, [r0, #0]
   b755e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7562:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7566:	69dc      	ldr	r4, [r3, #28]
   b7568:	463a      	mov	r2, r7
   b756a:	4643      	mov	r3, r8
   b756c:	4629      	mov	r1, r5
   b756e:	46a4      	mov	ip, r4
   b7570:	b001      	add	sp, #4
   b7572:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7576:	4760      	bx	ip

000b7578 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b757c:	4607      	mov	r7, r0
   b757e:	460c      	mov	r4, r1
   b7580:	4615      	mov	r5, r2
   b7582:	461e      	mov	r6, r3
   b7584:	f7ff ff6d 	bl	b7462 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7588:	b948      	cbnz	r0, b759e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b758a:	68b8      	ldr	r0, [r7, #8]
   b758c:	6803      	ldr	r3, [r0, #0]
   b758e:	699f      	ldr	r7, [r3, #24]
   b7590:	462a      	mov	r2, r5
   b7592:	4633      	mov	r3, r6
   b7594:	4621      	mov	r1, r4
   b7596:	46bc      	mov	ip, r7
   b7598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b759c:	4760      	bx	ip
   b759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b75a2 <_ZNSt9type_infoD1Ev>:
   b75a2:	4770      	bx	lr

000b75a4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b75a4:	2000      	movs	r0, #0
   b75a6:	4770      	bx	lr

000b75a8 <_ZNKSt9type_infoeqERKS_>:
   b75a8:	4281      	cmp	r1, r0
   b75aa:	b508      	push	{r3, lr}
   b75ac:	d00e      	beq.n	b75cc <_ZNKSt9type_infoeqERKS_+0x24>
   b75ae:	6840      	ldr	r0, [r0, #4]
   b75b0:	7803      	ldrb	r3, [r0, #0]
   b75b2:	2b2a      	cmp	r3, #42	; 0x2a
   b75b4:	d00c      	beq.n	b75d0 <_ZNKSt9type_infoeqERKS_+0x28>
   b75b6:	6849      	ldr	r1, [r1, #4]
   b75b8:	780b      	ldrb	r3, [r1, #0]
   b75ba:	2b2a      	cmp	r3, #42	; 0x2a
   b75bc:	bf08      	it	eq
   b75be:	3101      	addeq	r1, #1
   b75c0:	f000 fcd6 	bl	b7f70 <strcmp>
   b75c4:	fab0 f080 	clz	r0, r0
   b75c8:	0940      	lsrs	r0, r0, #5
   b75ca:	bd08      	pop	{r3, pc}
   b75cc:	2001      	movs	r0, #1
   b75ce:	e7fc      	b.n	b75ca <_ZNKSt9type_infoeqERKS_+0x22>
   b75d0:	2000      	movs	r0, #0
   b75d2:	e7fa      	b.n	b75ca <_ZNKSt9type_infoeqERKS_+0x22>

000b75d4 <__aeabi_drsub>:
   b75d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b75d8:	e002      	b.n	b75e0 <__adddf3>
   b75da:	bf00      	nop

000b75dc <__aeabi_dsub>:
   b75dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b75e0 <__adddf3>:
   b75e0:	b530      	push	{r4, r5, lr}
   b75e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b75e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b75ea:	ea94 0f05 	teq	r4, r5
   b75ee:	bf08      	it	eq
   b75f0:	ea90 0f02 	teqeq	r0, r2
   b75f4:	bf1f      	itttt	ne
   b75f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b75fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   b75fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7602:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7606:	f000 80e2 	beq.w	b77ce <__adddf3+0x1ee>
   b760a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b760e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7612:	bfb8      	it	lt
   b7614:	426d      	neglt	r5, r5
   b7616:	dd0c      	ble.n	b7632 <__adddf3+0x52>
   b7618:	442c      	add	r4, r5
   b761a:	ea80 0202 	eor.w	r2, r0, r2
   b761e:	ea81 0303 	eor.w	r3, r1, r3
   b7622:	ea82 0000 	eor.w	r0, r2, r0
   b7626:	ea83 0101 	eor.w	r1, r3, r1
   b762a:	ea80 0202 	eor.w	r2, r0, r2
   b762e:	ea81 0303 	eor.w	r3, r1, r3
   b7632:	2d36      	cmp	r5, #54	; 0x36
   b7634:	bf88      	it	hi
   b7636:	bd30      	pophi	{r4, r5, pc}
   b7638:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b763c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7640:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7644:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7648:	d002      	beq.n	b7650 <__adddf3+0x70>
   b764a:	4240      	negs	r0, r0
   b764c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7650:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7654:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7658:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b765c:	d002      	beq.n	b7664 <__adddf3+0x84>
   b765e:	4252      	negs	r2, r2
   b7660:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7664:	ea94 0f05 	teq	r4, r5
   b7668:	f000 80a7 	beq.w	b77ba <__adddf3+0x1da>
   b766c:	f1a4 0401 	sub.w	r4, r4, #1
   b7670:	f1d5 0e20 	rsbs	lr, r5, #32
   b7674:	db0d      	blt.n	b7692 <__adddf3+0xb2>
   b7676:	fa02 fc0e 	lsl.w	ip, r2, lr
   b767a:	fa22 f205 	lsr.w	r2, r2, r5
   b767e:	1880      	adds	r0, r0, r2
   b7680:	f141 0100 	adc.w	r1, r1, #0
   b7684:	fa03 f20e 	lsl.w	r2, r3, lr
   b7688:	1880      	adds	r0, r0, r2
   b768a:	fa43 f305 	asr.w	r3, r3, r5
   b768e:	4159      	adcs	r1, r3
   b7690:	e00e      	b.n	b76b0 <__adddf3+0xd0>
   b7692:	f1a5 0520 	sub.w	r5, r5, #32
   b7696:	f10e 0e20 	add.w	lr, lr, #32
   b769a:	2a01      	cmp	r2, #1
   b769c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b76a0:	bf28      	it	cs
   b76a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b76a6:	fa43 f305 	asr.w	r3, r3, r5
   b76aa:	18c0      	adds	r0, r0, r3
   b76ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b76b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b76b4:	d507      	bpl.n	b76c6 <__adddf3+0xe6>
   b76b6:	f04f 0e00 	mov.w	lr, #0
   b76ba:	f1dc 0c00 	rsbs	ip, ip, #0
   b76be:	eb7e 0000 	sbcs.w	r0, lr, r0
   b76c2:	eb6e 0101 	sbc.w	r1, lr, r1
   b76c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b76ca:	d31b      	bcc.n	b7704 <__adddf3+0x124>
   b76cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b76d0:	d30c      	bcc.n	b76ec <__adddf3+0x10c>
   b76d2:	0849      	lsrs	r1, r1, #1
   b76d4:	ea5f 0030 	movs.w	r0, r0, rrx
   b76d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b76dc:	f104 0401 	add.w	r4, r4, #1
   b76e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b76e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b76e8:	f080 809a 	bcs.w	b7820 <__adddf3+0x240>
   b76ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b76f0:	bf08      	it	eq
   b76f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b76f6:	f150 0000 	adcs.w	r0, r0, #0
   b76fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b76fe:	ea41 0105 	orr.w	r1, r1, r5
   b7702:	bd30      	pop	{r4, r5, pc}
   b7704:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7708:	4140      	adcs	r0, r0
   b770a:	eb41 0101 	adc.w	r1, r1, r1
   b770e:	3c01      	subs	r4, #1
   b7710:	bf28      	it	cs
   b7712:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7716:	d2e9      	bcs.n	b76ec <__adddf3+0x10c>
   b7718:	f091 0f00 	teq	r1, #0
   b771c:	bf04      	itt	eq
   b771e:	4601      	moveq	r1, r0
   b7720:	2000      	moveq	r0, #0
   b7722:	fab1 f381 	clz	r3, r1
   b7726:	bf08      	it	eq
   b7728:	3320      	addeq	r3, #32
   b772a:	f1a3 030b 	sub.w	r3, r3, #11
   b772e:	f1b3 0220 	subs.w	r2, r3, #32
   b7732:	da0c      	bge.n	b774e <__adddf3+0x16e>
   b7734:	320c      	adds	r2, #12
   b7736:	dd08      	ble.n	b774a <__adddf3+0x16a>
   b7738:	f102 0c14 	add.w	ip, r2, #20
   b773c:	f1c2 020c 	rsb	r2, r2, #12
   b7740:	fa01 f00c 	lsl.w	r0, r1, ip
   b7744:	fa21 f102 	lsr.w	r1, r1, r2
   b7748:	e00c      	b.n	b7764 <__adddf3+0x184>
   b774a:	f102 0214 	add.w	r2, r2, #20
   b774e:	bfd8      	it	le
   b7750:	f1c2 0c20 	rsble	ip, r2, #32
   b7754:	fa01 f102 	lsl.w	r1, r1, r2
   b7758:	fa20 fc0c 	lsr.w	ip, r0, ip
   b775c:	bfdc      	itt	le
   b775e:	ea41 010c 	orrle.w	r1, r1, ip
   b7762:	4090      	lslle	r0, r2
   b7764:	1ae4      	subs	r4, r4, r3
   b7766:	bfa2      	ittt	ge
   b7768:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b776c:	4329      	orrge	r1, r5
   b776e:	bd30      	popge	{r4, r5, pc}
   b7770:	ea6f 0404 	mvn.w	r4, r4
   b7774:	3c1f      	subs	r4, #31
   b7776:	da1c      	bge.n	b77b2 <__adddf3+0x1d2>
   b7778:	340c      	adds	r4, #12
   b777a:	dc0e      	bgt.n	b779a <__adddf3+0x1ba>
   b777c:	f104 0414 	add.w	r4, r4, #20
   b7780:	f1c4 0220 	rsb	r2, r4, #32
   b7784:	fa20 f004 	lsr.w	r0, r0, r4
   b7788:	fa01 f302 	lsl.w	r3, r1, r2
   b778c:	ea40 0003 	orr.w	r0, r0, r3
   b7790:	fa21 f304 	lsr.w	r3, r1, r4
   b7794:	ea45 0103 	orr.w	r1, r5, r3
   b7798:	bd30      	pop	{r4, r5, pc}
   b779a:	f1c4 040c 	rsb	r4, r4, #12
   b779e:	f1c4 0220 	rsb	r2, r4, #32
   b77a2:	fa20 f002 	lsr.w	r0, r0, r2
   b77a6:	fa01 f304 	lsl.w	r3, r1, r4
   b77aa:	ea40 0003 	orr.w	r0, r0, r3
   b77ae:	4629      	mov	r1, r5
   b77b0:	bd30      	pop	{r4, r5, pc}
   b77b2:	fa21 f004 	lsr.w	r0, r1, r4
   b77b6:	4629      	mov	r1, r5
   b77b8:	bd30      	pop	{r4, r5, pc}
   b77ba:	f094 0f00 	teq	r4, #0
   b77be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b77c2:	bf06      	itte	eq
   b77c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b77c8:	3401      	addeq	r4, #1
   b77ca:	3d01      	subne	r5, #1
   b77cc:	e74e      	b.n	b766c <__adddf3+0x8c>
   b77ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b77d2:	bf18      	it	ne
   b77d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b77d8:	d029      	beq.n	b782e <__adddf3+0x24e>
   b77da:	ea94 0f05 	teq	r4, r5
   b77de:	bf08      	it	eq
   b77e0:	ea90 0f02 	teqeq	r0, r2
   b77e4:	d005      	beq.n	b77f2 <__adddf3+0x212>
   b77e6:	ea54 0c00 	orrs.w	ip, r4, r0
   b77ea:	bf04      	itt	eq
   b77ec:	4619      	moveq	r1, r3
   b77ee:	4610      	moveq	r0, r2
   b77f0:	bd30      	pop	{r4, r5, pc}
   b77f2:	ea91 0f03 	teq	r1, r3
   b77f6:	bf1e      	ittt	ne
   b77f8:	2100      	movne	r1, #0
   b77fa:	2000      	movne	r0, #0
   b77fc:	bd30      	popne	{r4, r5, pc}
   b77fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7802:	d105      	bne.n	b7810 <__adddf3+0x230>
   b7804:	0040      	lsls	r0, r0, #1
   b7806:	4149      	adcs	r1, r1
   b7808:	bf28      	it	cs
   b780a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b780e:	bd30      	pop	{r4, r5, pc}
   b7810:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7814:	bf3c      	itt	cc
   b7816:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b781a:	bd30      	popcc	{r4, r5, pc}
   b781c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7820:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7824:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7828:	f04f 0000 	mov.w	r0, #0
   b782c:	bd30      	pop	{r4, r5, pc}
   b782e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7832:	bf1a      	itte	ne
   b7834:	4619      	movne	r1, r3
   b7836:	4610      	movne	r0, r2
   b7838:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b783c:	bf1c      	itt	ne
   b783e:	460b      	movne	r3, r1
   b7840:	4602      	movne	r2, r0
   b7842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7846:	bf06      	itte	eq
   b7848:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b784c:	ea91 0f03 	teqeq	r1, r3
   b7850:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7854:	bd30      	pop	{r4, r5, pc}
   b7856:	bf00      	nop

000b7858 <__aeabi_ui2d>:
   b7858:	f090 0f00 	teq	r0, #0
   b785c:	bf04      	itt	eq
   b785e:	2100      	moveq	r1, #0
   b7860:	4770      	bxeq	lr
   b7862:	b530      	push	{r4, r5, lr}
   b7864:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7868:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b786c:	f04f 0500 	mov.w	r5, #0
   b7870:	f04f 0100 	mov.w	r1, #0
   b7874:	e750      	b.n	b7718 <__adddf3+0x138>
   b7876:	bf00      	nop

000b7878 <__aeabi_i2d>:
   b7878:	f090 0f00 	teq	r0, #0
   b787c:	bf04      	itt	eq
   b787e:	2100      	moveq	r1, #0
   b7880:	4770      	bxeq	lr
   b7882:	b530      	push	{r4, r5, lr}
   b7884:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7888:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b788c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7890:	bf48      	it	mi
   b7892:	4240      	negmi	r0, r0
   b7894:	f04f 0100 	mov.w	r1, #0
   b7898:	e73e      	b.n	b7718 <__adddf3+0x138>
   b789a:	bf00      	nop

000b789c <__aeabi_f2d>:
   b789c:	0042      	lsls	r2, r0, #1
   b789e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b78a2:	ea4f 0131 	mov.w	r1, r1, rrx
   b78a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b78aa:	bf1f      	itttt	ne
   b78ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b78b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b78b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b78b8:	4770      	bxne	lr
   b78ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b78be:	bf08      	it	eq
   b78c0:	4770      	bxeq	lr
   b78c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b78c6:	bf04      	itt	eq
   b78c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b78cc:	4770      	bxeq	lr
   b78ce:	b530      	push	{r4, r5, lr}
   b78d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b78d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b78d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b78dc:	e71c      	b.n	b7718 <__adddf3+0x138>
   b78de:	bf00      	nop

000b78e0 <__aeabi_ul2d>:
   b78e0:	ea50 0201 	orrs.w	r2, r0, r1
   b78e4:	bf08      	it	eq
   b78e6:	4770      	bxeq	lr
   b78e8:	b530      	push	{r4, r5, lr}
   b78ea:	f04f 0500 	mov.w	r5, #0
   b78ee:	e00a      	b.n	b7906 <__aeabi_l2d+0x16>

000b78f0 <__aeabi_l2d>:
   b78f0:	ea50 0201 	orrs.w	r2, r0, r1
   b78f4:	bf08      	it	eq
   b78f6:	4770      	bxeq	lr
   b78f8:	b530      	push	{r4, r5, lr}
   b78fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b78fe:	d502      	bpl.n	b7906 <__aeabi_l2d+0x16>
   b7900:	4240      	negs	r0, r0
   b7902:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7906:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b790a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b790e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7912:	f43f aed8 	beq.w	b76c6 <__adddf3+0xe6>
   b7916:	f04f 0203 	mov.w	r2, #3
   b791a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b791e:	bf18      	it	ne
   b7920:	3203      	addne	r2, #3
   b7922:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7926:	bf18      	it	ne
   b7928:	3203      	addne	r2, #3
   b792a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b792e:	f1c2 0320 	rsb	r3, r2, #32
   b7932:	fa00 fc03 	lsl.w	ip, r0, r3
   b7936:	fa20 f002 	lsr.w	r0, r0, r2
   b793a:	fa01 fe03 	lsl.w	lr, r1, r3
   b793e:	ea40 000e 	orr.w	r0, r0, lr
   b7942:	fa21 f102 	lsr.w	r1, r1, r2
   b7946:	4414      	add	r4, r2
   b7948:	e6bd      	b.n	b76c6 <__adddf3+0xe6>
   b794a:	bf00      	nop

000b794c <__aeabi_frsub>:
   b794c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b7950:	e002      	b.n	b7958 <__addsf3>
   b7952:	bf00      	nop

000b7954 <__aeabi_fsub>:
   b7954:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7958 <__addsf3>:
   b7958:	0042      	lsls	r2, r0, #1
   b795a:	bf1f      	itttt	ne
   b795c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b7960:	ea92 0f03 	teqne	r2, r3
   b7964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b7968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b796c:	d06a      	beq.n	b7a44 <__addsf3+0xec>
   b796e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b7972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b7976:	bfc1      	itttt	gt
   b7978:	18d2      	addgt	r2, r2, r3
   b797a:	4041      	eorgt	r1, r0
   b797c:	4048      	eorgt	r0, r1
   b797e:	4041      	eorgt	r1, r0
   b7980:	bfb8      	it	lt
   b7982:	425b      	neglt	r3, r3
   b7984:	2b19      	cmp	r3, #25
   b7986:	bf88      	it	hi
   b7988:	4770      	bxhi	lr
   b798a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b798e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b7996:	bf18      	it	ne
   b7998:	4240      	negne	r0, r0
   b799a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b799e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b79a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b79a6:	bf18      	it	ne
   b79a8:	4249      	negne	r1, r1
   b79aa:	ea92 0f03 	teq	r2, r3
   b79ae:	d03f      	beq.n	b7a30 <__addsf3+0xd8>
   b79b0:	f1a2 0201 	sub.w	r2, r2, #1
   b79b4:	fa41 fc03 	asr.w	ip, r1, r3
   b79b8:	eb10 000c 	adds.w	r0, r0, ip
   b79bc:	f1c3 0320 	rsb	r3, r3, #32
   b79c0:	fa01 f103 	lsl.w	r1, r1, r3
   b79c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b79c8:	d502      	bpl.n	b79d0 <__addsf3+0x78>
   b79ca:	4249      	negs	r1, r1
   b79cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b79d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b79d4:	d313      	bcc.n	b79fe <__addsf3+0xa6>
   b79d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b79da:	d306      	bcc.n	b79ea <__addsf3+0x92>
   b79dc:	0840      	lsrs	r0, r0, #1
   b79de:	ea4f 0131 	mov.w	r1, r1, rrx
   b79e2:	f102 0201 	add.w	r2, r2, #1
   b79e6:	2afe      	cmp	r2, #254	; 0xfe
   b79e8:	d251      	bcs.n	b7a8e <__addsf3+0x136>
   b79ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b79ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b79f2:	bf08      	it	eq
   b79f4:	f020 0001 	biceq.w	r0, r0, #1
   b79f8:	ea40 0003 	orr.w	r0, r0, r3
   b79fc:	4770      	bx	lr
   b79fe:	0049      	lsls	r1, r1, #1
   b7a00:	eb40 0000 	adc.w	r0, r0, r0
   b7a04:	3a01      	subs	r2, #1
   b7a06:	bf28      	it	cs
   b7a08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b7a0c:	d2ed      	bcs.n	b79ea <__addsf3+0x92>
   b7a0e:	fab0 fc80 	clz	ip, r0
   b7a12:	f1ac 0c08 	sub.w	ip, ip, #8
   b7a16:	ebb2 020c 	subs.w	r2, r2, ip
   b7a1a:	fa00 f00c 	lsl.w	r0, r0, ip
   b7a1e:	bfaa      	itet	ge
   b7a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7a24:	4252      	neglt	r2, r2
   b7a26:	4318      	orrge	r0, r3
   b7a28:	bfbc      	itt	lt
   b7a2a:	40d0      	lsrlt	r0, r2
   b7a2c:	4318      	orrlt	r0, r3
   b7a2e:	4770      	bx	lr
   b7a30:	f092 0f00 	teq	r2, #0
   b7a34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7a38:	bf06      	itte	eq
   b7a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b7a3e:	3201      	addeq	r2, #1
   b7a40:	3b01      	subne	r3, #1
   b7a42:	e7b5      	b.n	b79b0 <__addsf3+0x58>
   b7a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b7a4c:	bf18      	it	ne
   b7a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7a52:	d021      	beq.n	b7a98 <__addsf3+0x140>
   b7a54:	ea92 0f03 	teq	r2, r3
   b7a58:	d004      	beq.n	b7a64 <__addsf3+0x10c>
   b7a5a:	f092 0f00 	teq	r2, #0
   b7a5e:	bf08      	it	eq
   b7a60:	4608      	moveq	r0, r1
   b7a62:	4770      	bx	lr
   b7a64:	ea90 0f01 	teq	r0, r1
   b7a68:	bf1c      	itt	ne
   b7a6a:	2000      	movne	r0, #0
   b7a6c:	4770      	bxne	lr
   b7a6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b7a72:	d104      	bne.n	b7a7e <__addsf3+0x126>
   b7a74:	0040      	lsls	r0, r0, #1
   b7a76:	bf28      	it	cs
   b7a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b7a7c:	4770      	bx	lr
   b7a7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b7a82:	bf3c      	itt	cc
   b7a84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b7a88:	4770      	bxcc	lr
   b7a8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b7a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7a96:	4770      	bx	lr
   b7a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b7a9c:	bf16      	itet	ne
   b7a9e:	4608      	movne	r0, r1
   b7aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b7aa4:	4601      	movne	r1, r0
   b7aa6:	0242      	lsls	r2, r0, #9
   b7aa8:	bf06      	itte	eq
   b7aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b7aae:	ea90 0f01 	teqeq	r0, r1
   b7ab2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b7ab6:	4770      	bx	lr

000b7ab8 <__aeabi_ui2f>:
   b7ab8:	f04f 0300 	mov.w	r3, #0
   b7abc:	e004      	b.n	b7ac8 <__aeabi_i2f+0x8>
   b7abe:	bf00      	nop

000b7ac0 <__aeabi_i2f>:
   b7ac0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b7ac4:	bf48      	it	mi
   b7ac6:	4240      	negmi	r0, r0
   b7ac8:	ea5f 0c00 	movs.w	ip, r0
   b7acc:	bf08      	it	eq
   b7ace:	4770      	bxeq	lr
   b7ad0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b7ad4:	4601      	mov	r1, r0
   b7ad6:	f04f 0000 	mov.w	r0, #0
   b7ada:	e01c      	b.n	b7b16 <__aeabi_l2f+0x2a>

000b7adc <__aeabi_ul2f>:
   b7adc:	ea50 0201 	orrs.w	r2, r0, r1
   b7ae0:	bf08      	it	eq
   b7ae2:	4770      	bxeq	lr
   b7ae4:	f04f 0300 	mov.w	r3, #0
   b7ae8:	e00a      	b.n	b7b00 <__aeabi_l2f+0x14>
   b7aea:	bf00      	nop

000b7aec <__aeabi_l2f>:
   b7aec:	ea50 0201 	orrs.w	r2, r0, r1
   b7af0:	bf08      	it	eq
   b7af2:	4770      	bxeq	lr
   b7af4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b7af8:	d502      	bpl.n	b7b00 <__aeabi_l2f+0x14>
   b7afa:	4240      	negs	r0, r0
   b7afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b00:	ea5f 0c01 	movs.w	ip, r1
   b7b04:	bf02      	ittt	eq
   b7b06:	4684      	moveq	ip, r0
   b7b08:	4601      	moveq	r1, r0
   b7b0a:	2000      	moveq	r0, #0
   b7b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b7b10:	bf08      	it	eq
   b7b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b7b16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b7b1a:	fabc f28c 	clz	r2, ip
   b7b1e:	3a08      	subs	r2, #8
   b7b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7b24:	db10      	blt.n	b7b48 <__aeabi_l2f+0x5c>
   b7b26:	fa01 fc02 	lsl.w	ip, r1, r2
   b7b2a:	4463      	add	r3, ip
   b7b2c:	fa00 fc02 	lsl.w	ip, r0, r2
   b7b30:	f1c2 0220 	rsb	r2, r2, #32
   b7b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7b38:	fa20 f202 	lsr.w	r2, r0, r2
   b7b3c:	eb43 0002 	adc.w	r0, r3, r2
   b7b40:	bf08      	it	eq
   b7b42:	f020 0001 	biceq.w	r0, r0, #1
   b7b46:	4770      	bx	lr
   b7b48:	f102 0220 	add.w	r2, r2, #32
   b7b4c:	fa01 fc02 	lsl.w	ip, r1, r2
   b7b50:	f1c2 0220 	rsb	r2, r2, #32
   b7b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7b58:	fa21 f202 	lsr.w	r2, r1, r2
   b7b5c:	eb43 0002 	adc.w	r0, r3, r2
   b7b60:	bf08      	it	eq
   b7b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b7b66:	4770      	bx	lr

000b7b68 <__aeabi_ldivmod>:
   b7b68:	b97b      	cbnz	r3, b7b8a <__aeabi_ldivmod+0x22>
   b7b6a:	b972      	cbnz	r2, b7b8a <__aeabi_ldivmod+0x22>
   b7b6c:	2900      	cmp	r1, #0
   b7b6e:	bfbe      	ittt	lt
   b7b70:	2000      	movlt	r0, #0
   b7b72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b7b76:	e006      	blt.n	b7b86 <__aeabi_ldivmod+0x1e>
   b7b78:	bf08      	it	eq
   b7b7a:	2800      	cmpeq	r0, #0
   b7b7c:	bf1c      	itt	ne
   b7b7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b7b82:	f04f 30ff 	movne.w	r0, #4294967295
   b7b86:	f000 b9a7 	b.w	b7ed8 <__aeabi_idiv0>
   b7b8a:	f1ad 0c08 	sub.w	ip, sp, #8
   b7b8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7b92:	2900      	cmp	r1, #0
   b7b94:	db09      	blt.n	b7baa <__aeabi_ldivmod+0x42>
   b7b96:	2b00      	cmp	r3, #0
   b7b98:	db1a      	blt.n	b7bd0 <__aeabi_ldivmod+0x68>
   b7b9a:	f000 f835 	bl	b7c08 <__udivmoddi4>
   b7b9e:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7ba6:	b004      	add	sp, #16
   b7ba8:	4770      	bx	lr
   b7baa:	4240      	negs	r0, r0
   b7bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7bb0:	2b00      	cmp	r3, #0
   b7bb2:	db1b      	blt.n	b7bec <__aeabi_ldivmod+0x84>
   b7bb4:	f000 f828 	bl	b7c08 <__udivmoddi4>
   b7bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7bc0:	b004      	add	sp, #16
   b7bc2:	4240      	negs	r0, r0
   b7bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7bc8:	4252      	negs	r2, r2
   b7bca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7bce:	4770      	bx	lr
   b7bd0:	4252      	negs	r2, r2
   b7bd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7bd6:	f000 f817 	bl	b7c08 <__udivmoddi4>
   b7bda:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7bde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7be2:	b004      	add	sp, #16
   b7be4:	4240      	negs	r0, r0
   b7be6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7bea:	4770      	bx	lr
   b7bec:	4252      	negs	r2, r2
   b7bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7bf2:	f000 f809 	bl	b7c08 <__udivmoddi4>
   b7bf6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7bfe:	b004      	add	sp, #16
   b7c00:	4252      	negs	r2, r2
   b7c02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7c06:	4770      	bx	lr

000b7c08 <__udivmoddi4>:
   b7c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7c0c:	9d08      	ldr	r5, [sp, #32]
   b7c0e:	4604      	mov	r4, r0
   b7c10:	468e      	mov	lr, r1
   b7c12:	2b00      	cmp	r3, #0
   b7c14:	d14d      	bne.n	b7cb2 <__udivmoddi4+0xaa>
   b7c16:	428a      	cmp	r2, r1
   b7c18:	4694      	mov	ip, r2
   b7c1a:	d969      	bls.n	b7cf0 <__udivmoddi4+0xe8>
   b7c1c:	fab2 f282 	clz	r2, r2
   b7c20:	b152      	cbz	r2, b7c38 <__udivmoddi4+0x30>
   b7c22:	fa01 f302 	lsl.w	r3, r1, r2
   b7c26:	f1c2 0120 	rsb	r1, r2, #32
   b7c2a:	fa20 f101 	lsr.w	r1, r0, r1
   b7c2e:	fa0c fc02 	lsl.w	ip, ip, r2
   b7c32:	ea41 0e03 	orr.w	lr, r1, r3
   b7c36:	4094      	lsls	r4, r2
   b7c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b7c3c:	0c21      	lsrs	r1, r4, #16
   b7c3e:	fbbe f6f8 	udiv	r6, lr, r8
   b7c42:	fa1f f78c 	uxth.w	r7, ip
   b7c46:	fb08 e316 	mls	r3, r8, r6, lr
   b7c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b7c4e:	fb06 f107 	mul.w	r1, r6, r7
   b7c52:	4299      	cmp	r1, r3
   b7c54:	d90a      	bls.n	b7c6c <__udivmoddi4+0x64>
   b7c56:	eb1c 0303 	adds.w	r3, ip, r3
   b7c5a:	f106 30ff 	add.w	r0, r6, #4294967295
   b7c5e:	f080 811f 	bcs.w	b7ea0 <__udivmoddi4+0x298>
   b7c62:	4299      	cmp	r1, r3
   b7c64:	f240 811c 	bls.w	b7ea0 <__udivmoddi4+0x298>
   b7c68:	3e02      	subs	r6, #2
   b7c6a:	4463      	add	r3, ip
   b7c6c:	1a5b      	subs	r3, r3, r1
   b7c6e:	b2a4      	uxth	r4, r4
   b7c70:	fbb3 f0f8 	udiv	r0, r3, r8
   b7c74:	fb08 3310 	mls	r3, r8, r0, r3
   b7c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b7c7c:	fb00 f707 	mul.w	r7, r0, r7
   b7c80:	42a7      	cmp	r7, r4
   b7c82:	d90a      	bls.n	b7c9a <__udivmoddi4+0x92>
   b7c84:	eb1c 0404 	adds.w	r4, ip, r4
   b7c88:	f100 33ff 	add.w	r3, r0, #4294967295
   b7c8c:	f080 810a 	bcs.w	b7ea4 <__udivmoddi4+0x29c>
   b7c90:	42a7      	cmp	r7, r4
   b7c92:	f240 8107 	bls.w	b7ea4 <__udivmoddi4+0x29c>
   b7c96:	4464      	add	r4, ip
   b7c98:	3802      	subs	r0, #2
   b7c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b7c9e:	1be4      	subs	r4, r4, r7
   b7ca0:	2600      	movs	r6, #0
   b7ca2:	b11d      	cbz	r5, b7cac <__udivmoddi4+0xa4>
   b7ca4:	40d4      	lsrs	r4, r2
   b7ca6:	2300      	movs	r3, #0
   b7ca8:	e9c5 4300 	strd	r4, r3, [r5]
   b7cac:	4631      	mov	r1, r6
   b7cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7cb2:	428b      	cmp	r3, r1
   b7cb4:	d909      	bls.n	b7cca <__udivmoddi4+0xc2>
   b7cb6:	2d00      	cmp	r5, #0
   b7cb8:	f000 80ef 	beq.w	b7e9a <__udivmoddi4+0x292>
   b7cbc:	2600      	movs	r6, #0
   b7cbe:	e9c5 0100 	strd	r0, r1, [r5]
   b7cc2:	4630      	mov	r0, r6
   b7cc4:	4631      	mov	r1, r6
   b7cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7cca:	fab3 f683 	clz	r6, r3
   b7cce:	2e00      	cmp	r6, #0
   b7cd0:	d14a      	bne.n	b7d68 <__udivmoddi4+0x160>
   b7cd2:	428b      	cmp	r3, r1
   b7cd4:	d302      	bcc.n	b7cdc <__udivmoddi4+0xd4>
   b7cd6:	4282      	cmp	r2, r0
   b7cd8:	f200 80f9 	bhi.w	b7ece <__udivmoddi4+0x2c6>
   b7cdc:	1a84      	subs	r4, r0, r2
   b7cde:	eb61 0303 	sbc.w	r3, r1, r3
   b7ce2:	2001      	movs	r0, #1
   b7ce4:	469e      	mov	lr, r3
   b7ce6:	2d00      	cmp	r5, #0
   b7ce8:	d0e0      	beq.n	b7cac <__udivmoddi4+0xa4>
   b7cea:	e9c5 4e00 	strd	r4, lr, [r5]
   b7cee:	e7dd      	b.n	b7cac <__udivmoddi4+0xa4>
   b7cf0:	b902      	cbnz	r2, b7cf4 <__udivmoddi4+0xec>
   b7cf2:	deff      	udf	#255	; 0xff
   b7cf4:	fab2 f282 	clz	r2, r2
   b7cf8:	2a00      	cmp	r2, #0
   b7cfa:	f040 8092 	bne.w	b7e22 <__udivmoddi4+0x21a>
   b7cfe:	eba1 010c 	sub.w	r1, r1, ip
   b7d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7d06:	fa1f fe8c 	uxth.w	lr, ip
   b7d0a:	2601      	movs	r6, #1
   b7d0c:	0c20      	lsrs	r0, r4, #16
   b7d0e:	fbb1 f3f7 	udiv	r3, r1, r7
   b7d12:	fb07 1113 	mls	r1, r7, r3, r1
   b7d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7d1a:	fb0e f003 	mul.w	r0, lr, r3
   b7d1e:	4288      	cmp	r0, r1
   b7d20:	d908      	bls.n	b7d34 <__udivmoddi4+0x12c>
   b7d22:	eb1c 0101 	adds.w	r1, ip, r1
   b7d26:	f103 38ff 	add.w	r8, r3, #4294967295
   b7d2a:	d202      	bcs.n	b7d32 <__udivmoddi4+0x12a>
   b7d2c:	4288      	cmp	r0, r1
   b7d2e:	f200 80cb 	bhi.w	b7ec8 <__udivmoddi4+0x2c0>
   b7d32:	4643      	mov	r3, r8
   b7d34:	1a09      	subs	r1, r1, r0
   b7d36:	b2a4      	uxth	r4, r4
   b7d38:	fbb1 f0f7 	udiv	r0, r1, r7
   b7d3c:	fb07 1110 	mls	r1, r7, r0, r1
   b7d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7d44:	fb0e fe00 	mul.w	lr, lr, r0
   b7d48:	45a6      	cmp	lr, r4
   b7d4a:	d908      	bls.n	b7d5e <__udivmoddi4+0x156>
   b7d4c:	eb1c 0404 	adds.w	r4, ip, r4
   b7d50:	f100 31ff 	add.w	r1, r0, #4294967295
   b7d54:	d202      	bcs.n	b7d5c <__udivmoddi4+0x154>
   b7d56:	45a6      	cmp	lr, r4
   b7d58:	f200 80bb 	bhi.w	b7ed2 <__udivmoddi4+0x2ca>
   b7d5c:	4608      	mov	r0, r1
   b7d5e:	eba4 040e 	sub.w	r4, r4, lr
   b7d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7d66:	e79c      	b.n	b7ca2 <__udivmoddi4+0x9a>
   b7d68:	f1c6 0720 	rsb	r7, r6, #32
   b7d6c:	40b3      	lsls	r3, r6
   b7d6e:	fa22 fc07 	lsr.w	ip, r2, r7
   b7d72:	ea4c 0c03 	orr.w	ip, ip, r3
   b7d76:	fa20 f407 	lsr.w	r4, r0, r7
   b7d7a:	fa01 f306 	lsl.w	r3, r1, r6
   b7d7e:	431c      	orrs	r4, r3
   b7d80:	40f9      	lsrs	r1, r7
   b7d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b7d86:	fa00 f306 	lsl.w	r3, r0, r6
   b7d8a:	fbb1 f8f9 	udiv	r8, r1, r9
   b7d8e:	0c20      	lsrs	r0, r4, #16
   b7d90:	fa1f fe8c 	uxth.w	lr, ip
   b7d94:	fb09 1118 	mls	r1, r9, r8, r1
   b7d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7d9c:	fb08 f00e 	mul.w	r0, r8, lr
   b7da0:	4288      	cmp	r0, r1
   b7da2:	fa02 f206 	lsl.w	r2, r2, r6
   b7da6:	d90b      	bls.n	b7dc0 <__udivmoddi4+0x1b8>
   b7da8:	eb1c 0101 	adds.w	r1, ip, r1
   b7dac:	f108 3aff 	add.w	sl, r8, #4294967295
   b7db0:	f080 8088 	bcs.w	b7ec4 <__udivmoddi4+0x2bc>
   b7db4:	4288      	cmp	r0, r1
   b7db6:	f240 8085 	bls.w	b7ec4 <__udivmoddi4+0x2bc>
   b7dba:	f1a8 0802 	sub.w	r8, r8, #2
   b7dbe:	4461      	add	r1, ip
   b7dc0:	1a09      	subs	r1, r1, r0
   b7dc2:	b2a4      	uxth	r4, r4
   b7dc4:	fbb1 f0f9 	udiv	r0, r1, r9
   b7dc8:	fb09 1110 	mls	r1, r9, r0, r1
   b7dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b7dd0:	fb00 fe0e 	mul.w	lr, r0, lr
   b7dd4:	458e      	cmp	lr, r1
   b7dd6:	d908      	bls.n	b7dea <__udivmoddi4+0x1e2>
   b7dd8:	eb1c 0101 	adds.w	r1, ip, r1
   b7ddc:	f100 34ff 	add.w	r4, r0, #4294967295
   b7de0:	d26c      	bcs.n	b7ebc <__udivmoddi4+0x2b4>
   b7de2:	458e      	cmp	lr, r1
   b7de4:	d96a      	bls.n	b7ebc <__udivmoddi4+0x2b4>
   b7de6:	3802      	subs	r0, #2
   b7de8:	4461      	add	r1, ip
   b7dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b7dee:	fba0 9402 	umull	r9, r4, r0, r2
   b7df2:	eba1 010e 	sub.w	r1, r1, lr
   b7df6:	42a1      	cmp	r1, r4
   b7df8:	46c8      	mov	r8, r9
   b7dfa:	46a6      	mov	lr, r4
   b7dfc:	d356      	bcc.n	b7eac <__udivmoddi4+0x2a4>
   b7dfe:	d053      	beq.n	b7ea8 <__udivmoddi4+0x2a0>
   b7e00:	b15d      	cbz	r5, b7e1a <__udivmoddi4+0x212>
   b7e02:	ebb3 0208 	subs.w	r2, r3, r8
   b7e06:	eb61 010e 	sbc.w	r1, r1, lr
   b7e0a:	fa01 f707 	lsl.w	r7, r1, r7
   b7e0e:	fa22 f306 	lsr.w	r3, r2, r6
   b7e12:	40f1      	lsrs	r1, r6
   b7e14:	431f      	orrs	r7, r3
   b7e16:	e9c5 7100 	strd	r7, r1, [r5]
   b7e1a:	2600      	movs	r6, #0
   b7e1c:	4631      	mov	r1, r6
   b7e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e22:	f1c2 0320 	rsb	r3, r2, #32
   b7e26:	40d8      	lsrs	r0, r3
   b7e28:	fa0c fc02 	lsl.w	ip, ip, r2
   b7e2c:	fa21 f303 	lsr.w	r3, r1, r3
   b7e30:	4091      	lsls	r1, r2
   b7e32:	4301      	orrs	r1, r0
   b7e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7e38:	fa1f fe8c 	uxth.w	lr, ip
   b7e3c:	fbb3 f0f7 	udiv	r0, r3, r7
   b7e40:	fb07 3610 	mls	r6, r7, r0, r3
   b7e44:	0c0b      	lsrs	r3, r1, #16
   b7e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b7e4a:	fb00 f60e 	mul.w	r6, r0, lr
   b7e4e:	429e      	cmp	r6, r3
   b7e50:	fa04 f402 	lsl.w	r4, r4, r2
   b7e54:	d908      	bls.n	b7e68 <__udivmoddi4+0x260>
   b7e56:	eb1c 0303 	adds.w	r3, ip, r3
   b7e5a:	f100 38ff 	add.w	r8, r0, #4294967295
   b7e5e:	d22f      	bcs.n	b7ec0 <__udivmoddi4+0x2b8>
   b7e60:	429e      	cmp	r6, r3
   b7e62:	d92d      	bls.n	b7ec0 <__udivmoddi4+0x2b8>
   b7e64:	3802      	subs	r0, #2
   b7e66:	4463      	add	r3, ip
   b7e68:	1b9b      	subs	r3, r3, r6
   b7e6a:	b289      	uxth	r1, r1
   b7e6c:	fbb3 f6f7 	udiv	r6, r3, r7
   b7e70:	fb07 3316 	mls	r3, r7, r6, r3
   b7e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b7e78:	fb06 f30e 	mul.w	r3, r6, lr
   b7e7c:	428b      	cmp	r3, r1
   b7e7e:	d908      	bls.n	b7e92 <__udivmoddi4+0x28a>
   b7e80:	eb1c 0101 	adds.w	r1, ip, r1
   b7e84:	f106 38ff 	add.w	r8, r6, #4294967295
   b7e88:	d216      	bcs.n	b7eb8 <__udivmoddi4+0x2b0>
   b7e8a:	428b      	cmp	r3, r1
   b7e8c:	d914      	bls.n	b7eb8 <__udivmoddi4+0x2b0>
   b7e8e:	3e02      	subs	r6, #2
   b7e90:	4461      	add	r1, ip
   b7e92:	1ac9      	subs	r1, r1, r3
   b7e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b7e98:	e738      	b.n	b7d0c <__udivmoddi4+0x104>
   b7e9a:	462e      	mov	r6, r5
   b7e9c:	4628      	mov	r0, r5
   b7e9e:	e705      	b.n	b7cac <__udivmoddi4+0xa4>
   b7ea0:	4606      	mov	r6, r0
   b7ea2:	e6e3      	b.n	b7c6c <__udivmoddi4+0x64>
   b7ea4:	4618      	mov	r0, r3
   b7ea6:	e6f8      	b.n	b7c9a <__udivmoddi4+0x92>
   b7ea8:	454b      	cmp	r3, r9
   b7eaa:	d2a9      	bcs.n	b7e00 <__udivmoddi4+0x1f8>
   b7eac:	ebb9 0802 	subs.w	r8, r9, r2
   b7eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
   b7eb4:	3801      	subs	r0, #1
   b7eb6:	e7a3      	b.n	b7e00 <__udivmoddi4+0x1f8>
   b7eb8:	4646      	mov	r6, r8
   b7eba:	e7ea      	b.n	b7e92 <__udivmoddi4+0x28a>
   b7ebc:	4620      	mov	r0, r4
   b7ebe:	e794      	b.n	b7dea <__udivmoddi4+0x1e2>
   b7ec0:	4640      	mov	r0, r8
   b7ec2:	e7d1      	b.n	b7e68 <__udivmoddi4+0x260>
   b7ec4:	46d0      	mov	r8, sl
   b7ec6:	e77b      	b.n	b7dc0 <__udivmoddi4+0x1b8>
   b7ec8:	3b02      	subs	r3, #2
   b7eca:	4461      	add	r1, ip
   b7ecc:	e732      	b.n	b7d34 <__udivmoddi4+0x12c>
   b7ece:	4630      	mov	r0, r6
   b7ed0:	e709      	b.n	b7ce6 <__udivmoddi4+0xde>
   b7ed2:	4464      	add	r4, ip
   b7ed4:	3802      	subs	r0, #2
   b7ed6:	e742      	b.n	b7d5e <__udivmoddi4+0x156>

000b7ed8 <__aeabi_idiv0>:
   b7ed8:	4770      	bx	lr
   b7eda:	bf00      	nop

000b7edc <atexit>:
   b7edc:	2300      	movs	r3, #0
   b7ede:	4601      	mov	r1, r0
   b7ee0:	461a      	mov	r2, r3
   b7ee2:	4618      	mov	r0, r3
   b7ee4:	f000 b856 	b.w	b7f94 <__register_exitproc>

000b7ee8 <memcpy>:
   b7ee8:	440a      	add	r2, r1
   b7eea:	4291      	cmp	r1, r2
   b7eec:	f100 33ff 	add.w	r3, r0, #4294967295
   b7ef0:	d100      	bne.n	b7ef4 <memcpy+0xc>
   b7ef2:	4770      	bx	lr
   b7ef4:	b510      	push	{r4, lr}
   b7ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7efa:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7efe:	4291      	cmp	r1, r2
   b7f00:	d1f9      	bne.n	b7ef6 <memcpy+0xe>
   b7f02:	bd10      	pop	{r4, pc}

000b7f04 <memset>:
   b7f04:	4402      	add	r2, r0
   b7f06:	4603      	mov	r3, r0
   b7f08:	4293      	cmp	r3, r2
   b7f0a:	d100      	bne.n	b7f0e <memset+0xa>
   b7f0c:	4770      	bx	lr
   b7f0e:	f803 1b01 	strb.w	r1, [r3], #1
   b7f12:	e7f9      	b.n	b7f08 <memset+0x4>

000b7f14 <srand>:
   b7f14:	b538      	push	{r3, r4, r5, lr}
   b7f16:	4b10      	ldr	r3, [pc, #64]	; (b7f58 <srand+0x44>)
   b7f18:	681d      	ldr	r5, [r3, #0]
   b7f1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f1c:	4604      	mov	r4, r0
   b7f1e:	b9b3      	cbnz	r3, b7f4e <srand+0x3a>
   b7f20:	2018      	movs	r0, #24
   b7f22:	f7fe f81d 	bl	b5f60 <malloc>
   b7f26:	4602      	mov	r2, r0
   b7f28:	63a8      	str	r0, [r5, #56]	; 0x38
   b7f2a:	b920      	cbnz	r0, b7f36 <srand+0x22>
   b7f2c:	4b0b      	ldr	r3, [pc, #44]	; (b7f5c <srand+0x48>)
   b7f2e:	480c      	ldr	r0, [pc, #48]	; (b7f60 <srand+0x4c>)
   b7f30:	2142      	movs	r1, #66	; 0x42
   b7f32:	f7fe f83d 	bl	b5fb0 <__assert_func>
   b7f36:	490b      	ldr	r1, [pc, #44]	; (b7f64 <srand+0x50>)
   b7f38:	4b0b      	ldr	r3, [pc, #44]	; (b7f68 <srand+0x54>)
   b7f3a:	e9c0 1300 	strd	r1, r3, [r0]
   b7f3e:	4b0b      	ldr	r3, [pc, #44]	; (b7f6c <srand+0x58>)
   b7f40:	6083      	str	r3, [r0, #8]
   b7f42:	230b      	movs	r3, #11
   b7f44:	8183      	strh	r3, [r0, #12]
   b7f46:	2100      	movs	r1, #0
   b7f48:	2001      	movs	r0, #1
   b7f4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7f4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f50:	2200      	movs	r2, #0
   b7f52:	611c      	str	r4, [r3, #16]
   b7f54:	615a      	str	r2, [r3, #20]
   b7f56:	bd38      	pop	{r3, r4, r5, pc}
   b7f58:	2003e538 	.word	0x2003e538
   b7f5c:	000b8ab1 	.word	0x000b8ab1
   b7f60:	000b8ac8 	.word	0x000b8ac8
   b7f64:	abcd330e 	.word	0xabcd330e
   b7f68:	e66d1234 	.word	0xe66d1234
   b7f6c:	0005deec 	.word	0x0005deec

000b7f70 <strcmp>:
   b7f70:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7f74:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7f78:	2a01      	cmp	r2, #1
   b7f7a:	bf28      	it	cs
   b7f7c:	429a      	cmpcs	r2, r3
   b7f7e:	d0f7      	beq.n	b7f70 <strcmp>
   b7f80:	1ad0      	subs	r0, r2, r3
   b7f82:	4770      	bx	lr

000b7f84 <strlen>:
   b7f84:	4603      	mov	r3, r0
   b7f86:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7f8a:	2a00      	cmp	r2, #0
   b7f8c:	d1fb      	bne.n	b7f86 <strlen+0x2>
   b7f8e:	1a18      	subs	r0, r3, r0
   b7f90:	3801      	subs	r0, #1
   b7f92:	4770      	bx	lr

000b7f94 <__register_exitproc>:
   b7f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f98:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8054 <__register_exitproc+0xc0>
   b7f9c:	4606      	mov	r6, r0
   b7f9e:	f8d8 0000 	ldr.w	r0, [r8]
   b7fa2:	461f      	mov	r7, r3
   b7fa4:	460d      	mov	r5, r1
   b7fa6:	4691      	mov	r9, r2
   b7fa8:	f000 f856 	bl	b8058 <__retarget_lock_acquire_recursive>
   b7fac:	4b25      	ldr	r3, [pc, #148]	; (b8044 <__register_exitproc+0xb0>)
   b7fae:	681c      	ldr	r4, [r3, #0]
   b7fb0:	b934      	cbnz	r4, b7fc0 <__register_exitproc+0x2c>
   b7fb2:	4c25      	ldr	r4, [pc, #148]	; (b8048 <__register_exitproc+0xb4>)
   b7fb4:	601c      	str	r4, [r3, #0]
   b7fb6:	4b25      	ldr	r3, [pc, #148]	; (b804c <__register_exitproc+0xb8>)
   b7fb8:	b113      	cbz	r3, b7fc0 <__register_exitproc+0x2c>
   b7fba:	681b      	ldr	r3, [r3, #0]
   b7fbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7fc0:	6863      	ldr	r3, [r4, #4]
   b7fc2:	2b1f      	cmp	r3, #31
   b7fc4:	dd07      	ble.n	b7fd6 <__register_exitproc+0x42>
   b7fc6:	f8d8 0000 	ldr.w	r0, [r8]
   b7fca:	f000 f847 	bl	b805c <__retarget_lock_release_recursive>
   b7fce:	f04f 30ff 	mov.w	r0, #4294967295
   b7fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7fd6:	b34e      	cbz	r6, b802c <__register_exitproc+0x98>
   b7fd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7fdc:	b988      	cbnz	r0, b8002 <__register_exitproc+0x6e>
   b7fde:	4b1c      	ldr	r3, [pc, #112]	; (b8050 <__register_exitproc+0xbc>)
   b7fe0:	b923      	cbnz	r3, b7fec <__register_exitproc+0x58>
   b7fe2:	f8d8 0000 	ldr.w	r0, [r8]
   b7fe6:	f000 f838 	bl	b805a <__retarget_lock_release>
   b7fea:	e7f0      	b.n	b7fce <__register_exitproc+0x3a>
   b7fec:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7ff0:	f7fd ffb6 	bl	b5f60 <malloc>
   b7ff4:	2800      	cmp	r0, #0
   b7ff6:	d0f4      	beq.n	b7fe2 <__register_exitproc+0x4e>
   b7ff8:	2300      	movs	r3, #0
   b7ffa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7ffe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8002:	6863      	ldr	r3, [r4, #4]
   b8004:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8008:	2201      	movs	r2, #1
   b800a:	409a      	lsls	r2, r3
   b800c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8010:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8014:	4313      	orrs	r3, r2
   b8016:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b801a:	2e02      	cmp	r6, #2
   b801c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8020:	bf02      	ittt	eq
   b8022:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8026:	4313      	orreq	r3, r2
   b8028:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b802c:	6863      	ldr	r3, [r4, #4]
   b802e:	f8d8 0000 	ldr.w	r0, [r8]
   b8032:	1c5a      	adds	r2, r3, #1
   b8034:	3302      	adds	r3, #2
   b8036:	6062      	str	r2, [r4, #4]
   b8038:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b803c:	f000 f80e 	bl	b805c <__retarget_lock_release_recursive>
   b8040:	2000      	movs	r0, #0
   b8042:	e7c6      	b.n	b7fd2 <__register_exitproc+0x3e>
   b8044:	2003e7e8 	.word	0x2003e7e8
   b8048:	2003e75c 	.word	0x2003e75c
   b804c:	00000000 	.word	0x00000000
   b8050:	000b5f61 	.word	0x000b5f61
   b8054:	2003e59c 	.word	0x2003e59c

000b8058 <__retarget_lock_acquire_recursive>:
   b8058:	4770      	bx	lr

000b805a <__retarget_lock_release>:
   b805a:	4770      	bx	lr

000b805c <__retarget_lock_release_recursive>:
   b805c:	4770      	bx	lr

000b805e <link_code_end>:
	...

000b8060 <dynalib_user>:
   b8060:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8070:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8080:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b8090:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b80a0:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b80b0:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b80c0:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b80d0:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b80e0:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b80f0:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b8100:	6174 6574 4820 5454 2f50 2e31 0031 656b     tate HTTP/1.1.ke
   b8110:	7065 612d 696c 6576 4800 736f 3a74 0020     ep-alive.Host: .
   b8120:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
   b8130:	4300 6e6f 6574 746e 542d 7079 3a65 7420     .Content-Type: t
   b8140:	7865 2f74 6c70 6961 3b6e 6863 7261 6573     ext/plain;charse
   b8150:	3d74 5455 2d46 0038 7246 6d6f 4820 6575     t=UTF-8.From Hue
   b8160:	4200 7361 6369 7420 7365 3a74 4900 546f     .Basic test:.IoT
   b8170:	654e 7774 726f 006b 7574 6e72 6e69 2067     Network.turning 
   b8180:	7570 706d 6f20 6666 2520 0a69 4200 454d     pump off %i..BME
   b8190:	3832 2030 7461 6120 6464 6572 7373 3020     280 at address 0
   b81a0:	2578 3230 2058 6166 6c69 6465 7420 206f     x%02X failed to 
   b81b0:	7473 7261 0074 6554 706d 2520 2e30 6631     start.Temp %0.1f
   b81c0:	480a 6d75 6469 7469 2079 3025 312e 0a66     .Humidity %0.1f.
   b81d0:	7250 7365 7573 6572 2520 3066 312e 4200     Pressure %f0.1.B
   b81e0:	7475 6f74 206e 7369 6e20 746f 7020 6572     utton is not pre
   b81f0:	7373 6465 0a20 6400 6665 7561 746c 0020     ssed ..default .
   b8200:	534d 0042 534c 0042 533c 4950 6553 7474     MSB.LSB.<SPISett
   b8210:	6e69 7367 6420 6665 7561 746c 003e 533c     ings default>.<S
   b8220:	4950 6553 7474 6e69 7367 2520 2573 2075     PISettings %s%u 
   b8230:	7325 4d20 444f 2545 3e75 0000               %s MODE%u>..

000b823c <_ZTVN8particle11SPISettingsE>:
	...
   b8244:	46d1 000b 46bf 000b 46c1 000b               .F...F...F..

000b8250 <_ZTV16Adafruit_SSD1306>:
	...
   b8258:	52ad 000b 533d 000b 59a9 000b 6395 000b     .R..=S...Y...c..
   b8268:	52b1 000b 56c1 000b 5139 000b 4fc9 000b     .R...V..9Q...O..
   b8278:	577f 000b 581d 000b 5853 000b 586f 000b     .W...X..SX..oX..

000b8288 <_ZL4font>:
   b8288:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8298:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b82a8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b82b8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b82c8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b82d8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b82e8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b82f8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8308:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8318:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8328:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8338:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8348:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8358:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8368:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8378:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8388:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8398:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b83a8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b83b8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b83c8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b83d8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b83e8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b83f8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8408:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8418:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8428:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8438:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8448:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8458:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8468:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8478:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8488:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8498:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b84a8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b84b8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b84c8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b84d8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b84e8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b84f8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8508:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8518:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b8528:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8538:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8548:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8558:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8568:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8578:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8588:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8598:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b85a8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b85b8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b85c8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b85d8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b85e8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b85f8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8608:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b8618:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b8628:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b8638:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b8648:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b8658:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b8668:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8678:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8688:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b8698:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b86a8:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b86b8:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b86c8:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b86d8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b86e8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b86f8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b8708:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b8718:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b8728:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b8738:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b8748:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b8758:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b8768:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8778:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b8784 <_ZTV12Adafruit_GFX>:
	...
   b8794:	59a9 000b 6395 000b 40a1 000b 56c1 000b     .Y...c...@...V..
   b87a4:	57e7 000b 5803 000b 577f 000b 581d 000b     .W...X...W...X..
   b87b4:	5853 000b 586f 000b                         SX..oX..

000b87bc <_ZTVN5spark13EthernetClassE>:
	...
   b87c4:	602f 000b 6025 000b 601b 000b 6011 000b     /`..%`...`...`..
   b87d4:	6005 000b 5ff9 000b 7051 000b 7059 000b     .`..._..Qp..Yp..
   b87e4:	5fed 000b 5fe5 000b 5fdb 000b 5fd1 000b     ._..._..._..._..
   b87f4:	7089 000b                                   .p..

000b87f8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b87f8:	0800 1810 2820 3830                         .... (08

000b8800 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b8808:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b8818:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b8828 <_ZTV9IPAddress>:
	...
   b8830:	6629 000b 6619 000b 661b 000b               )f...f...f..

000b883c <_ZTV9USBSerial>:
	...
   b8844:	673b 000b 67a3 000b 6779 000b 6395 000b     ;g...g..yg...c..
   b8854:	676b 000b 673d 000b 674d 000b 679d 000b     kg..=g..Mg...g..
   b8864:	675d 000b 6735 000b                         ]g..5g..

000b886c <_ZTV11USARTSerial>:
	...
   b8874:	6845 000b 68b1 000b 6889 000b 6395 000b     Eh...h...h...c..
   b8884:	6859 000b 6875 000b 6867 000b 6883 000b     Yh..uh..gh...h..
   b8894:	6847 000b 684b 000b                         Gh..Kh..

000b889c <_ZTV7TwoWire>:
	...
   b88a4:	68e9 000b 6933 000b 690b 000b 68eb 000b     .h..3i...i...h..
   b88b4:	6913 000b 691b 000b 6923 000b 692b 000b     .i...i..#i..+i..
   b88c4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b88d4:	2072 203d 6425 0000                         r = %d..

000b88dc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b88e4:	6a81 000b 6aa5 000b 6f8f 000b 6ab3 000b     .j...j...o...j..
   b88f4:	6a85 000b                                   .j..

000b88f8 <_ZTV9TCPClient>:
	...
   b8900:	40e5 000b 4119 000b 69fd 000b 6a17 000b     .@...A...i...j..
   b8910:	6e25 000b 6a41 000b 6c9b 000b 6a75 000b     %n..Aj...l..uj..
   b8920:	6d2d 000b 6b6d 000b 6cc9 000b 6ed9 000b     -m..mk...l...n..
   b8930:	6c69 000b 6a77 000b 6a29 000b 6ab9 000b     il..wj..)j...j..
   b8940:	6b4d 000b                                   Mk..

000b8944 <_ZTVN5spark9WiFiClassE>:
	...
   b894c:	6ff3 000b 6fe9 000b 6fdf 000b 6f95 000b     .o...o...o...o..
   b895c:	6fd3 000b 6fc7 000b 7051 000b 7059 000b     .o...o..Qp..Yp..
   b896c:	6fbb 000b 6fb3 000b 6fa9 000b 6f9f 000b     .o...o...o...o..
   b897c:	7089 000b                                   .p..

000b8980 <_ZTVN5spark12NetworkClassE>:
	...
   b8988:	7011 000b 701b 000b 7025 000b 702f 000b     .p...p..%p../p..
   b8998:	7039 000b 7045 000b 7051 000b 7059 000b     9p..Ep..Qp..Yp..
   b89a8:	7061 000b 706d 000b 7075 000b 707f 000b     ap..mp..up...p..
   b89b8:	7089 000b                                   .p..

000b89bc <_ZSt7nothrow>:
	...

000b89bd <_ZTSSt19_Sp_make_shared_tag>:
   b89bd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b89cd:	6572 5f64 6174 0067 0000                     red_tag....

000b89d8 <_ZTISt19_Sp_make_shared_tag>:
   b89d8:	8a18 000b 89bd 000b                         ........

000b89e0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b89e0:	8a78 000b 89ec 000b 8a9c 000b               x...........

000b89ec <_ZTSN10__cxxabiv117__class_type_infoE>:
   b89ec:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b89fc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8a0c:	0045 0000                                   E...

000b8a10 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8a10:	0000 0000 89e0 000b 73fd 000b 7411 000b     .........s...t..
   b8a20:	75a5 000b 75a5 000b 747b 000b 73bd 000b     .u...u..{t...s..
   b8a30:	7463 000b 7425 000b 73ef 000b               ct..%t...s..

000b8a3c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8a3c:	8a78 000b 8a48 000b 89e0 000b               x...H.......

000b8a48 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8a48:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8a58:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8a68:	666e 456f 0000 0000                         nfoE....

000b8a70 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8a70:	0000 0000 8a3c 000b 74a5 000b 74b9 000b     ....<....t...t..
   b8a80:	75a5 000b 75a5 000b 747b 000b 73bd 000b     .u...u..{t...s..
   b8a90:	7579 000b 7505 000b 74cd 000b               yu...u...t..

000b8a9c <_ZTISt9type_info>:
   b8a9c:	8a18 000b 8aa4 000b                         ........

000b8aa4 <_ZTSSt9type_info>:
   b8aa4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8ab4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8ac4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8ad4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8ae4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8af4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8b04:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8b14:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8b24:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8b34:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8b45 <link_const_variable_data_end>:
   b8b45:	00          	.byte	0x00
	...

000b8b48 <link_constructors_location>:
   b8b48:	000b43a1 	.word	0x000b43a1
   b8b4c:	000b6039 	.word	0x000b6039
   b8b50:	000b62b1 	.word	0x000b62b1
   b8b54:	000b6385 	.word	0x000b6385
   b8b58:	000b64a9 	.word	0x000b64a9
   b8b5c:	000b64b9 	.word	0x000b64b9
   b8b60:	000b64d5 	.word	0x000b64d5
   b8b64:	000b6ffd 	.word	0x000b6ffd
   b8b68:	000b7161 	.word	0x000b7161

000b8b6c <link_constructors_end>:
   b8b6c:	00000000 	.word	0x00000000
