
c:/Users/daniu/Documents/iot/CapStoneDChavez/CapStoneDChavez/CapStoneDChavez/target/4.0.2/argon/CapStoneDChavez.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006fa0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bafc0  000bafc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bafe4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005ec  2003defc  000bafe8  0001defc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000308  2003e4e8  2003e4e8  0002e4e8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bb5d4  000bb5d4  0002b5d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bb5fc  000bb5fc  0002b5fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013c44f  00000000  00000000  0002b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000168dc  00000000  00000000  00167a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003b99b  00000000  00000000  0017e32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002fc0  00000000  00000000  001b9cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a740  00000000  00000000  001bcc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042086  00000000  00000000  001c73c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004c9bf  00000000  00000000  0020944c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138efc  00000000  00000000  00255e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008f6c  00000000  00000000  0038ed08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 f8b6 	bl	b81a2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 f8d8 	bl	b81f2 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003defc 	.word	0x2003defc
   b404c:	000bafe8 	.word	0x000bafe8
   b4050:	2003e4e8 	.word	0x2003e4e8
   b4054:	2003e4e8 	.word	0x2003e4e8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fbe9 	bl	b6838 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000baf9c 	.word	0x000baf9c
   b4080:	000bafc0 	.word	0x000bafc0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b830 	b.w	b40e8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8c3 	bl	b4214 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bb89 	b.w	b67a8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b8c9 	b.w	b622c <malloc>

000b409a <_Znaj>:
   b409a:	f002 b8c7 	b.w	b622c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 b8cd 	b.w	b623c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 f81a 	bl	b60e4 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5da5 	.word	0x000b5da5
   b40b8:	000ba154 	.word	0x000ba154

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	b40e      	push	{r1, r2, r3}
   b40ce:	b503      	push	{r0, r1, lr}
   b40d0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40d2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40da:	f002 fae0 	bl	b669e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40de:	b002      	add	sp, #8
   b40e0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e4:	b003      	add	sp, #12
   b40e6:	4770      	bx	lr

000b40e8 <setup>:
bool MQTT_ping();

class Button; //declaring a class for this button
int BUTTON_PRESSED(D3); 

void setup() {
   b40e8:	b538      	push	{r3, r4, r5, lr}
Serial.begin(9600); //starting serial connection
   b40ea:	f002 fcc7 	bl	b6a7c <_Z16_fetch_usbserialv>
   b40ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40f2:	f002 fcb3 	bl	b6a5c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40f6:	2000      	movs	r0, #0
   b40f8:	f001 fe6c 	bl	b5dd4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b40fc:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b4100:	4604      	mov	r4, r0
   b4102:	2000      	movs	r0, #0
   b4104:	f001 fe66 	bl	b5dd4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4108:	1b00      	subs	r0, r0, r4
   b410a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b410e:	42a8      	cmp	r0, r5
   b4110:	f171 0300 	sbcs.w	r3, r1, #0
   b4114:	d207      	bcs.n	b4126 <setup+0x3e>
waitFor(Serial.isConnected,15000); //wait for connection
   b4116:	f002 fcb1 	bl	b6a7c <_Z16_fetch_usbserialv>
   b411a:	f002 fca3 	bl	b6a64 <_ZN9USBSerial11isConnectedEv>
   b411e:	b910      	cbnz	r0, b4126 <setup+0x3e>
            spark_process();
   b4120:	f002 f874 	bl	b620c <spark_process>
        while (_while() && !_condition()) {
   b4124:	e7ed      	b.n	b4102 <setup+0x1a>
   b4126:	f002 fca9 	bl	b6a7c <_Z16_fetch_usbserialv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b412a:	4d2f      	ldr	r5, [pc, #188]	; (b41e8 <setup+0x100>)
   b412c:	f002 fc9a 	bl	b6a64 <_ZN9USBSerial11isConnectedEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4130:	2300      	movs	r3, #0
   b4132:	461a      	mov	r2, r3
   b4134:	4619      	mov	r1, r3
   b4136:	6868      	ldr	r0, [r5, #4]
   b4138:	f002 f828 	bl	b618c <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b413c:	2300      	movs	r3, #0
   b413e:	6868      	ldr	r0, [r5, #4]
   b4140:	4619      	mov	r1, r3
   b4142:	461a      	mov	r2, r3
   b4144:	f002 f802 	bl	b614c <network_connect>
WiFi.on(); //wifi stuff
WiFi.connect();
bme.begin(0x76); //starting BME 
   b4148:	4828      	ldr	r0, [pc, #160]	; (b41ec <setup+0x104>)
   b414a:	2176      	movs	r1, #118	; 0x76
   b414c:	f000 fe09 	bl	b4d62 <_ZN15Adafruit_BME2805beginEh>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   b4150:	2200      	movs	r2, #0
   b4152:	6868      	ldr	r0, [r5, #4]
   b4154:	4611      	mov	r1, r2
   b4156:	f002 f801 	bl	b615c <network_connecting>
while(WiFi.connecting());
   b415a:	4604      	mov	r4, r0
   b415c:	2800      	cmp	r0, #0
   b415e:	d1f7      	bne.n	b4150 <setup+0x68>
{
Serial.printf(".");
   b4160:	f002 fc8c 	bl	b6a7c <_Z16_fetch_usbserialv>
   b4164:	4922      	ldr	r1, [pc, #136]	; (b41f0 <setup+0x108>)
   b4166:	f7ff ffb1 	bl	b40cc <_ZN5Print6printfEPKcz>
}
  Serial.printf("\n\n");
   b416a:	f002 fc87 	bl	b6a7c <_Z16_fetch_usbserialv>
   b416e:	4921      	ldr	r1, [pc, #132]	; (b41f4 <setup+0x10c>)
   b4170:	f7ff ffac 	bl	b40cc <_ZN5Print6printfEPKcz>

  mqtt.connect();//Setup MQTT broker
   b4174:	4820      	ldr	r0, [pc, #128]	; (b41f8 <setup+0x110>)
   b4176:	f001 fd6b 	bl	b5c50 <_ZN13Adafruit_MQTT7connectEv>
  mqtt.subscribe(&buttonOnOff); //buttonOnOff at adafruit.io
   b417a:	4920      	ldr	r1, [pc, #128]	; (b41fc <setup+0x114>)
   b417c:	481e      	ldr	r0, [pc, #120]	; (b41f8 <setup+0x110>)
   b417e:	f001 fc59 	bl	b5a34 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
      display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //OLED Setup
   b4182:	223c      	movs	r2, #60	; 0x3c
   b4184:	481e      	ldr	r0, [pc, #120]	; (b4200 <setup+0x118>)
   b4186:	2102      	movs	r1, #2
   b4188:	f001 f89a 	bl	b52c0 <_ZN16Adafruit_SSD13065beginEhh>
      display.setRotation(rot);
   b418c:	4b1d      	ldr	r3, [pc, #116]	; (b4204 <setup+0x11c>)
   b418e:	481c      	ldr	r0, [pc, #112]	; (b4200 <setup+0x118>)
   b4190:	7819      	ldrb	r1, [r3, #0]
   b4192:	f001 fb1d 	bl	b57d0 <_ZN12Adafruit_GFX11setRotationEh>
      display.clearDisplay();
   b4196:	481a      	ldr	r0, [pc, #104]	; (b4200 <setup+0x118>)
   b4198:	f000 ffc6 	bl	b5128 <_ZN16Adafruit_SSD130612clearDisplayEv>
      delay(1000);
   b419c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b41a0:	f002 fac0 	bl	b6724 <delay>
      display.setTextSize(1);
   b41a4:	4816      	ldr	r0, [pc, #88]	; (b4200 <setup+0x118>)
   b41a6:	2101      	movs	r1, #1
   b41a8:	f001 fb08 	bl	b57bc <_ZN12Adafruit_GFX11setTextSizeEh>
      display.setTextColor(WHITE);
   b41ac:	2101      	movs	r1, #1
   b41ae:	4814      	ldr	r0, [pc, #80]	; (b4200 <setup+0x118>)
   b41b0:	f001 fb09 	bl	b57c6 <_ZN12Adafruit_GFX12setTextColorEt>
      display.display();
   b41b4:	4812      	ldr	r0, [pc, #72]	; (b4200 <setup+0x118>)
   b41b6:	f001 f813 	bl	b51e0 <_ZN16Adafruit_SSD13067displayEv>
        
        myStepper.setSpeed(5); //initializing the Stepper & motor speed setting
   b41ba:	4813      	ldr	r0, [pc, #76]	; (b4208 <setup+0x120>)
   b41bc:	2105      	movs	r1, #5
   b41be:	f000 f915 	bl	b43ec <_ZN7Stepper8setSpeedEl>
            pinMode(relayPin, OUTPUT); //intitialize the relay switch
   b41c2:	2101      	movs	r1, #1
   b41c4:	200c      	movs	r0, #12
   b41c6:	f003 f955 	bl	b7474 <pinMode>
              pinMode(D3, INPUT); // Initialize the physical button
   b41ca:	4621      	mov	r1, r4
   b41cc:	2003      	movs	r0, #3
   b41ce:	f003 f951 	bl	b7474 <pinMode>

                Serial.printf("Basic test:");
   b41d2:	f002 fc53 	bl	b6a7c <_Z16_fetch_usbserialv>
   b41d6:	490d      	ldr	r1, [pc, #52]	; (b420c <setup+0x124>)
   b41d8:	f7ff ff78 	bl	b40cc <_ZN5Print6printfEPKcz>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41dc:	f001 fdf2 	bl	b5dc4 <HAL_Timer_Get_Milli_Seconds>
                currentTime = millis();
   b41e0:	4b0b      	ldr	r3, [pc, #44]	; (b4210 <setup+0x128>)
   b41e2:	6018      	str	r0, [r3, #0]
  }
   b41e4:	bd38      	pop	{r3, r4, r5, pc}
   b41e6:	bf00      	nop
   b41e8:	2003e718 	.word	0x2003e718
   b41ec:	2003e504 	.word	0x2003e504
   b41f0:	000ba169 	.word	0x000ba169
   b41f4:	000ba16b 	.word	0x000ba16b
   b41f8:	2003e5a8 	.word	0x2003e5a8
   b41fc:	2003e548 	.word	0x2003e548
   b4200:	2003e584 	.word	0x2003e584
   b4204:	2003e6b4 	.word	0x2003e6b4
   b4208:	2003e67c 	.word	0x2003e67c
   b420c:	000ba16e 	.word	0x000ba16e
   b4210:	2003e580 	.word	0x2003e580

000b4214 <loop>:

void loop() {
   b4214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4218:	f001 fdd4 	bl	b5dc4 <HAL_Timer_Get_Milli_Seconds>
  // Get the current time.
  unsigned long currentTime = millis();

  // Read the humidity from the BME280 sensor.
  float humidRH = bme.readHumidity();
   b421c:	4833      	ldr	r0, [pc, #204]	; (b42ec <loop+0xd8>)
   b421e:	f000 fcfd 	bl	b4c1c <_ZN15Adafruit_BME28012readHumidityEv>
  float tempC; 

  // Check if the humidity is below 28%.
  if (humidRH < 28) {
   b4222:	eef3 7a0c 	vmov.f32	s15, #60	; 0x41e00000  28.0
   b4226:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b422a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b422e:	d540      	bpl.n	b42b2 <loop+0x9e>
    // Close the door and turn on the relay.
    myStepper.step(-1024);
   b4230:	492f      	ldr	r1, [pc, #188]	; (b42f0 <loop+0xdc>)
   b4232:	4830      	ldr	r0, [pc, #192]	; (b42f4 <loop+0xe0>)
   b4234:	f000 f9ac 	bl	b4590 <_ZN7Stepper4stepEi>
    digitalWrite(relayPin, HIGH);
   b4238:	2101      	movs	r1, #1
   b423a:	200c      	movs	r0, #12
   b423c:	f003 f92b 	bl	b7496 <digitalWrite>
    Serial.printf("Humidity too low Closing Door and Starting Relay/Pump\n");
   b4240:	f002 fc1c 	bl	b6a7c <_Z16_fetch_usbserialv>
   b4244:	492c      	ldr	r1, [pc, #176]	; (b42f8 <loop+0xe4>)
   b4246:	f7ff ff41 	bl	b40cc <_ZN5Print6printfEPKcz>
    display.printf("Humidity too low Closing Door and Starting Relay/Pump\n");
   b424a:	492b      	ldr	r1, [pc, #172]	; (b42f8 <loop+0xe4>)
   b424c:	482b      	ldr	r0, [pc, #172]	; (b42fc <loop+0xe8>)
  }

  // Check the value of the buttonOnOff feed on Adafruit.io.
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(100))) {
    if (subscription == &buttonOnOff) {
   b424e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b4308 <loop+0xf4>
    display.printf("Humidity too low Closing Door and Starting Relay/Pump\n");
   b4252:	f7ff ff3b 	bl	b40cc <_ZN5Print6printfEPKcz>
      // Read the value of the feed.
      bool value = atof((char *)buttonOnOff.lastread);
   b4256:	2600      	movs	r6, #0
   b4258:	2700      	movs	r7, #0
  while ((subscription = mqtt.readSubscription(100))) {
   b425a:	4c29      	ldr	r4, [pc, #164]	; (b4300 <loop+0xec>)
   b425c:	2164      	movs	r1, #100	; 0x64
   b425e:	4620      	mov	r0, r4
   b4260:	f001 fc03 	bl	b5a6a <_ZN13Adafruit_MQTT16readSubscriptionEs>
   b4264:	2800      	cmp	r0, #0
   b4266:	d03e      	beq.n	b42e6 <loop+0xd2>
    if (subscription == &buttonOnOff) {
   b4268:	4540      	cmp	r0, r8
   b426a:	d1f7      	bne.n	b425c <loop+0x48>
      bool value = atof((char *)buttonOnOff.lastread);
   b426c:	f108 0005 	add.w	r0, r8, #5
   b4270:	f003 ff94 	bl	b819c <atof>
   b4274:	ec55 4b10 	vmov	r4, r5, d0
   b4278:	4632      	mov	r2, r6
   b427a:	463b      	mov	r3, r7
   b427c:	ee10 0a10 	vmov	r0, s0
   b4280:	4629      	mov	r1, r5
   b4282:	f003 ff15 	bl	b80b0 <__aeabi_dcmpeq>

      // Set the physical button to the same state.
      digitalWrite(D3, value);
   b4286:	fab0 f180 	clz	r1, r0
   b428a:	0949      	lsrs	r1, r1, #5
   b428c:	2003      	movs	r0, #3
   b428e:	f003 f902 	bl	b7496 <digitalWrite>

      // Check if the button is pressed.
      if (value == true) {
   b4292:	4632      	mov	r2, r6
   b4294:	463b      	mov	r3, r7
   b4296:	4620      	mov	r0, r4
   b4298:	4629      	mov	r1, r5
   b429a:	f003 ff09 	bl	b80b0 <__aeabi_dcmpeq>
   b429e:	b9c0      	cbnz	r0, b42d2 <loop+0xbe>
        // Close the door and turn on the pump.
        myStepper.step(-1024);
   b42a0:	4913      	ldr	r1, [pc, #76]	; (b42f0 <loop+0xdc>)
   b42a2:	4814      	ldr	r0, [pc, #80]	; (b42f4 <loop+0xe0>)
   b42a4:	f000 f974 	bl	b4590 <_ZN7Stepper4stepEi>
        digitalWrite(relayPin, HIGH);
   b42a8:	2101      	movs	r1, #1
   b42aa:	200c      	movs	r0, #12
   b42ac:	f003 f8f3 	bl	b7496 <digitalWrite>
   b42b0:	e7d3      	b.n	b425a <loop+0x46>
    digitalWrite(relayPin, LOW);
   b42b2:	2100      	movs	r1, #0
   b42b4:	200c      	movs	r0, #12
   b42b6:	f003 f8ee 	bl	b7496 <digitalWrite>
    myStepper.step(1024);
   b42ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
   b42be:	480d      	ldr	r0, [pc, #52]	; (b42f4 <loop+0xe0>)
   b42c0:	f000 f966 	bl	b4590 <_ZN7Stepper4stepEi>
    Serial.printf("Humidity is above 28%. Stopping Relay/Pump and Opening Door\n");
   b42c4:	f002 fbda 	bl	b6a7c <_Z16_fetch_usbserialv>
   b42c8:	490e      	ldr	r1, [pc, #56]	; (b4304 <loop+0xf0>)
   b42ca:	f7ff feff 	bl	b40cc <_ZN5Print6printfEPKcz>
    display.printf("Humidity is above 28%. Stopping Relay/Pump and Opening Door\n");
   b42ce:	490d      	ldr	r1, [pc, #52]	; (b4304 <loop+0xf0>)
   b42d0:	e7bc      	b.n	b424c <loop+0x38>
      } else {
        // Turn the relay off and open the door.
        digitalWrite(relayPin, LOW);
   b42d2:	2100      	movs	r1, #0
   b42d4:	200c      	movs	r0, #12
   b42d6:	f003 f8de 	bl	b7496 <digitalWrite>
        myStepper.step(1024);
   b42da:	4806      	ldr	r0, [pc, #24]	; (b42f4 <loop+0xe0>)
   b42dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   b42e0:	f000 f956 	bl	b4590 <_ZN7Stepper4stepEi>
   b42e4:	e7b9      	b.n	b425a <loop+0x46>
      }
    }
  }
   b42e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b42ea:	bf00      	nop
   b42ec:	2003e504 	.word	0x2003e504
   b42f0:	fffffc00 	.word	0xfffffc00
   b42f4:	2003e67c 	.word	0x2003e67c
   b42f8:	000ba17a 	.word	0x000ba17a
   b42fc:	2003e584 	.word	0x2003e584
   b4300:	2003e5a8 	.word	0x2003e5a8
   b4304:	000ba1b1 	.word	0x000ba1b1
   b4308:	2003e548 	.word	0x2003e548

000b430c <_GLOBAL__sub_I_TheClient>:
   b430c:	b537      	push	{r0, r1, r2, r4, r5, lr}
TCPClient TheClient; 
   b430e:	4d19      	ldr	r5, [pc, #100]	; (b4374 <_GLOBAL__sub_I_TheClient+0x68>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b4310:	4c19      	ldr	r4, [pc, #100]	; (b4378 <_GLOBAL__sub_I_TheClient+0x6c>)
   b4312:	4628      	mov	r0, r5
   b4314:	f002 ff6c 	bl	b71f0 <_ZN9TCPClientC1Ev>
   b4318:	4b18      	ldr	r3, [pc, #96]	; (b437c <_GLOBAL__sub_I_TheClient+0x70>)
   b431a:	9300      	str	r3, [sp, #0]
   b431c:	4918      	ldr	r1, [pc, #96]	; (b4380 <_GLOBAL__sub_I_TheClient+0x74>)
   b431e:	4b19      	ldr	r3, [pc, #100]	; (b4384 <_GLOBAL__sub_I_TheClient+0x78>)
   b4320:	f240 725b 	movw	r2, #1883	; 0x75b
   b4324:	4620      	mov	r0, r4
   b4326:	f001 fb01 	bl	b592c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b432a:	4b17      	ldr	r3, [pc, #92]	; (b4388 <_GLOBAL__sub_I_TheClient+0x7c>)
   b432c:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_Publish relayPosition = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/relayState");
   b432e:	4621      	mov	r1, r4
   b4330:	4a16      	ldr	r2, [pc, #88]	; (b438c <_GLOBAL__sub_I_TheClient+0x80>)
   b4332:	4817      	ldr	r0, [pc, #92]	; (b4390 <_GLOBAL__sub_I_TheClient+0x84>)
   b4334:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   b4338:	2300      	movs	r3, #0
   b433a:	f001 fce0 	bl	b5cfe <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe buttonOnOff = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/buttonOnOff");
   b433e:	4621      	mov	r1, r4
   b4340:	4a14      	ldr	r2, [pc, #80]	; (b4394 <_GLOBAL__sub_I_TheClient+0x88>)
   b4342:	4815      	ldr	r0, [pc, #84]	; (b4398 <_GLOBAL__sub_I_TheClient+0x8c>)
   b4344:	2300      	movs	r3, #0
   b4346:	f001 fcdf 	bl	b5d08 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Stepper myStepper(2048, D8, D7, D6, D5);
   b434a:	2306      	movs	r3, #6
   b434c:	2205      	movs	r2, #5
   b434e:	e9cd 3200 	strd	r3, r2, [sp]
   b4352:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b4356:	2307      	movs	r3, #7
   b4358:	2208      	movs	r2, #8
   b435a:	4810      	ldr	r0, [pc, #64]	; (b439c <_GLOBAL__sub_I_TheClient+0x90>)
   b435c:	f000 f824 	bl	b43a8 <_ZN7StepperC1Eiiiii>
Adafruit_SSD1306 display(D3);
   b4360:	2103      	movs	r1, #3
   b4362:	480f      	ldr	r0, [pc, #60]	; (b43a0 <_GLOBAL__sub_I_TheClient+0x94>)
   b4364:	f000 feca 	bl	b50fc <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_BME280 bme;
   b4368:	480e      	ldr	r0, [pc, #56]	; (b43a4 <_GLOBAL__sub_I_TheClient+0x98>)
   b436a:	b003      	add	sp, #12
   b436c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
Adafruit_BME280 bme;
   b4370:	f000 b980 	b.w	b4674 <_ZN15Adafruit_BME280C1Ev>
   b4374:	2003e4e8 	.word	0x2003e4e8
   b4378:	2003e5a8 	.word	0x2003e5a8
   b437c:	000ba207 	.word	0x000ba207
   b4380:	000ba1f7 	.word	0x000ba1f7
   b4384:	000ba1ee 	.word	0x000ba1ee
   b4388:	000ba82c 	.word	0x000ba82c
   b438c:	000ba228 	.word	0x000ba228
   b4390:	2003e6a8 	.word	0x2003e6a8
   b4394:	000ba242 	.word	0x000ba242
   b4398:	2003e548 	.word	0x2003e548
   b439c:	2003e67c 	.word	0x2003e67c
   b43a0:	2003e584 	.word	0x2003e584
   b43a4:	2003e504 	.word	0x2003e504

000b43a8 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b43a8:	b538      	push	{r3, r4, r5, lr}
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
   b43aa:	e9c0 2305 	strd	r2, r3, [r0, #20]
  this->motor_pin_3 = motor_pin_3;
   b43ae:	9b04      	ldr	r3, [sp, #16]
   b43b0:	61c3      	str	r3, [r0, #28]
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b43b2:	4604      	mov	r4, r0
  this->motor_pin_4 = motor_pin_4;
   b43b4:	9b05      	ldr	r3, [sp, #20]
   b43b6:	6203      	str	r3, [r0, #32]
  this->step_number = 0;    // which step the motor is on
   b43b8:	2500      	movs	r5, #0
   b43ba:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
   b43bc:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
   b43be:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
   b43c0:	6081      	str	r1, [r0, #8]

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
   b43c2:	b290      	uxth	r0, r2
   b43c4:	2101      	movs	r1, #1
   b43c6:	f003 f855 	bl	b7474 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
   b43ca:	8b20      	ldrh	r0, [r4, #24]
   b43cc:	2101      	movs	r1, #1
   b43ce:	f003 f851 	bl	b7474 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
   b43d2:	8ba0      	ldrh	r0, [r4, #28]
   b43d4:	2101      	movs	r1, #1
   b43d6:	f003 f84d 	bl	b7474 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
   b43da:	8c20      	ldrh	r0, [r4, #32]
   b43dc:	2101      	movs	r1, #1
   b43de:	f003 f849 	bl	b7474 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
   b43e2:	2304      	movs	r3, #4
  this->motor_pin_5 = 0;
   b43e4:	6265      	str	r5, [r4, #36]	; 0x24
  this->pin_count = 4;
   b43e6:	60e3      	str	r3, [r4, #12]
}
   b43e8:	4620      	mov	r0, r4
   b43ea:	bd38      	pop	{r3, r4, r5, pc}

000b43ec <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
   b43ec:	6882      	ldr	r2, [r0, #8]
   b43ee:	4b03      	ldr	r3, [pc, #12]	; (b43fc <_ZN7Stepper8setSpeedEl+0x10>)
   b43f0:	fb93 f3f2 	sdiv	r3, r3, r2
   b43f4:	fb93 f1f1 	sdiv	r1, r3, r1
   b43f8:	6041      	str	r1, [r0, #4]
}
   b43fa:	4770      	bx	lr
   b43fc:	03938700 	.word	0x03938700

000b4400 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
   b4400:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
   b4402:	68c3      	ldr	r3, [r0, #12]
   b4404:	2b02      	cmp	r3, #2
{
   b4406:	4604      	mov	r4, r0
   b4408:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
   b440a:	d10d      	bne.n	b4428 <_ZN7Stepper9stepMotorEi+0x28>
    switch (thisStep) {
   b440c:	2903      	cmp	r1, #3
   b440e:	d80b      	bhi.n	b4428 <_ZN7Stepper9stepMotorEi+0x28>
   b4410:	e8df f001 	tbb	[pc, r1]
   b4414:	1b151302 	.word	0x1b151302
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
   b4418:	2100      	movs	r1, #0
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
   b441a:	8aa0      	ldrh	r0, [r4, #20]
   b441c:	f003 f83b 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4420:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b4422:	8b20      	ldrh	r0, [r4, #24]
   b4424:	f003 f837 	bl	b7496 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
   b4428:	68e3      	ldr	r3, [r4, #12]
   b442a:	2b04      	cmp	r3, #4
   b442c:	d11f      	bne.n	b446e <_ZN7Stepper9stepMotorEi+0x6e>
    switch (thisStep) {
   b442e:	2d03      	cmp	r5, #3
   b4430:	d81d      	bhi.n	b446e <_ZN7Stepper9stepMotorEi+0x6e>
   b4432:	e8df f005 	tbb	[pc, r5]
   b4436:	2a0c      	.short	0x2a0c
   b4438:	3e30      	.short	0x3e30
        digitalWrite(motor_pin_1, HIGH);
   b443a:	2101      	movs	r1, #1
   b443c:	e7ed      	b.n	b441a <_ZN7Stepper9stepMotorEi+0x1a>
        digitalWrite(motor_pin_1, HIGH);
   b443e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4440:	8aa0      	ldrh	r0, [r4, #20]
   b4442:	f003 f828 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4446:	2100      	movs	r1, #0
   b4448:	e7eb      	b.n	b4422 <_ZN7Stepper9stepMotorEi+0x22>
        digitalWrite(motor_pin_1, LOW);
   b444a:	2100      	movs	r1, #0
   b444c:	e7f8      	b.n	b4440 <_ZN7Stepper9stepMotorEi+0x40>
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
   b444e:	2101      	movs	r1, #1
   b4450:	8aa0      	ldrh	r0, [r4, #20]
   b4452:	f003 f820 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4456:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, HIGH);
   b4458:	8b20      	ldrh	r0, [r4, #24]
   b445a:	f003 f81c 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b445e:	2101      	movs	r1, #1
   b4460:	8ba0      	ldrh	r0, [r4, #28]
   b4462:	f003 f818 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4466:	2100      	movs	r1, #0
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
   b4468:	8c20      	ldrh	r0, [r4, #32]
   b446a:	f003 f814 	bl	b7496 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
   b446e:	68e3      	ldr	r3, [r4, #12]
   b4470:	2b05      	cmp	r3, #5
   b4472:	f040 808c 	bne.w	b458e <_ZN7Stepper9stepMotorEi+0x18e>
    switch (thisStep) {
   b4476:	2d09      	cmp	r5, #9
   b4478:	f200 8089 	bhi.w	b458e <_ZN7Stepper9stepMotorEi+0x18e>
   b447c:	e8df f005 	tbb	[pc, r5]
   b4480:	4937291f 	.word	0x4937291f
   b4484:	7167615f 	.word	0x7167615f
   b4488:	857f      	.short	0x857f
        digitalWrite(motor_pin_1, LOW);
   b448a:	2100      	movs	r1, #0
   b448c:	8aa0      	ldrh	r0, [r4, #20]
   b448e:	f003 f802 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4492:	2101      	movs	r1, #1
   b4494:	e7e0      	b.n	b4458 <_ZN7Stepper9stepMotorEi+0x58>
        digitalWrite(motor_pin_1, LOW);
   b4496:	2100      	movs	r1, #0
   b4498:	8aa0      	ldrh	r0, [r4, #20]
   b449a:	f002 fffc 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b449e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b44a0:	8b20      	ldrh	r0, [r4, #24]
   b44a2:	f002 fff8 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b44a6:	2100      	movs	r1, #0
   b44a8:	8ba0      	ldrh	r0, [r4, #28]
   b44aa:	f002 fff4 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b44ae:	2101      	movs	r1, #1
   b44b0:	e7da      	b.n	b4468 <_ZN7Stepper9stepMotorEi+0x68>
        digitalWrite(motor_pin_1, HIGH);
   b44b2:	2101      	movs	r1, #1
   b44b4:	8aa0      	ldrh	r0, [r4, #20]
   b44b6:	f002 ffee 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b44ba:	2100      	movs	r1, #0
   b44bc:	e7f0      	b.n	b44a0 <_ZN7Stepper9stepMotorEi+0xa0>
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
   b44be:	2100      	movs	r1, #0
   b44c0:	8aa0      	ldrh	r0, [r4, #20]
   b44c2:	f002 ffe8 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b44c6:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b44c8:	8b20      	ldrh	r0, [r4, #24]
   b44ca:	f002 ffe4 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b44ce:	2101      	movs	r1, #1
   b44d0:	e008      	b.n	b44e4 <_ZN7Stepper9stepMotorEi+0xe4>
        digitalWrite(motor_pin_1, LOW);
   b44d2:	8aa0      	ldrh	r0, [r4, #20]
   b44d4:	2100      	movs	r1, #0
   b44d6:	f002 ffde 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b44da:	2101      	movs	r1, #1
   b44dc:	8b20      	ldrh	r0, [r4, #24]
   b44de:	f002 ffda 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b44e2:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b44e4:	8ba0      	ldrh	r0, [r4, #28]
   b44e6:	f002 ffd6 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b44ea:	2100      	movs	r1, #0
   b44ec:	e00c      	b.n	b4508 <_ZN7Stepper9stepMotorEi+0x108>
        digitalWrite(motor_pin_1, LOW);
   b44ee:	8aa0      	ldrh	r0, [r4, #20]
   b44f0:	2100      	movs	r1, #0
   b44f2:	f002 ffd0 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b44f6:	8b20      	ldrh	r0, [r4, #24]
   b44f8:	2101      	movs	r1, #1
   b44fa:	f002 ffcc 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b44fe:	2100      	movs	r1, #0
   b4500:	8ba0      	ldrh	r0, [r4, #28]
   b4502:	f002 ffc8 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4506:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b4508:	8c20      	ldrh	r0, [r4, #32]
   b450a:	f002 ffc4 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
   b450e:	2101      	movs	r1, #1
   b4510:	e010      	b.n	b4534 <_ZN7Stepper9stepMotorEi+0x134>
        digitalWrite(motor_pin_1, LOW);
   b4512:	2100      	movs	r1, #0
        digitalWrite(motor_pin_1, HIGH);
   b4514:	8aa0      	ldrh	r0, [r4, #20]
   b4516:	f002 ffbe 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b451a:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b451c:	8b20      	ldrh	r0, [r4, #24]
   b451e:	f002 ffba 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4522:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b4524:	8ba0      	ldrh	r0, [r4, #28]
   b4526:	f002 ffb6 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b452a:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b452c:	8c20      	ldrh	r0, [r4, #32]
   b452e:	f002 ffb2 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
   b4532:	2100      	movs	r1, #0
        digitalWrite(motor_pin_5, HIGH);
   b4534:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
   b4536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(motor_pin_5, HIGH);
   b453a:	f002 bfac 	b.w	b7496 <digitalWrite>
        digitalWrite(motor_pin_1, HIGH);
   b453e:	2101      	movs	r1, #1
   b4540:	e7e8      	b.n	b4514 <_ZN7Stepper9stepMotorEi+0x114>
        digitalWrite(motor_pin_1, HIGH);
   b4542:	2101      	movs	r1, #1
   b4544:	8aa0      	ldrh	r0, [r4, #20]
   b4546:	f002 ffa6 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b454a:	2100      	movs	r1, #0
   b454c:	e7e6      	b.n	b451c <_ZN7Stepper9stepMotorEi+0x11c>
        digitalWrite(motor_pin_1, HIGH);
   b454e:	8aa0      	ldrh	r0, [r4, #20]
   b4550:	2101      	movs	r1, #1
   b4552:	f002 ffa0 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4556:	2100      	movs	r1, #0
   b4558:	8b20      	ldrh	r0, [r4, #24]
   b455a:	f002 ff9c 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b455e:	2101      	movs	r1, #1
   b4560:	e7e0      	b.n	b4524 <_ZN7Stepper9stepMotorEi+0x124>
        digitalWrite(motor_pin_1, HIGH);
   b4562:	8aa0      	ldrh	r0, [r4, #20]
   b4564:	2101      	movs	r1, #1
   b4566:	f002 ff96 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b456a:	8b20      	ldrh	r0, [r4, #24]
   b456c:	2100      	movs	r1, #0
   b456e:	f002 ff92 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4572:	2101      	movs	r1, #1
   b4574:	8ba0      	ldrh	r0, [r4, #28]
   b4576:	f002 ff8e 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b457a:	2100      	movs	r1, #0
   b457c:	e7d6      	b.n	b452c <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_1, HIGH);
   b457e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4580:	8aa0      	ldrh	r0, [r4, #20]
   b4582:	f002 ff88 	bl	b7496 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4586:	2100      	movs	r1, #0
   b4588:	e79e      	b.n	b44c8 <_ZN7Stepper9stepMotorEi+0xc8>
        digitalWrite(motor_pin_1, LOW);
   b458a:	2100      	movs	r1, #0
   b458c:	e7f8      	b.n	b4580 <_ZN7Stepper9stepMotorEi+0x180>
}
   b458e:	bd38      	pop	{r3, r4, r5, pc}

000b4590 <_ZN7Stepper4stepEi>:
{
   b4590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (steps_to_move > 0) { this->direction = 1; }
   b4592:	2900      	cmp	r1, #0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b4594:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
{
   b4598:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b459a:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
  if (steps_to_move > 0) { this->direction = 1; }
   b459e:	dd24      	ble.n	b45ea <_ZN7Stepper4stepEi+0x5a>
   b45a0:	2301      	movs	r3, #1
   b45a2:	6023      	str	r3, [r4, #0]
          this->step_number = 0;
   b45a4:	2700      	movs	r7, #0
        stepMotor(this->step_number % 10);
   b45a6:	260a      	movs	r6, #10
  while (steps_left > 0)
   b45a8:	b385      	cbz	r5, b460c <_ZN7Stepper4stepEi+0x7c>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b45aa:	f001 fc03 	bl	b5db4 <HAL_Timer_Get_Micro_Seconds>
    if (now - this->last_step_time >= this->step_delay)
   b45ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b45b0:	6862      	ldr	r2, [r4, #4]
   b45b2:	1ac3      	subs	r3, r0, r3
   b45b4:	4293      	cmp	r3, r2
   b45b6:	d3f7      	bcc.n	b45a8 <_ZN7Stepper4stepEi+0x18>
      if (this->direction == 1)
   b45b8:	6822      	ldr	r2, [r4, #0]
        this->step_number++;
   b45ba:	6923      	ldr	r3, [r4, #16]
      this->last_step_time = now;
   b45bc:	62a0      	str	r0, [r4, #40]	; 0x28
      if (this->direction == 1)
   b45be:	2a01      	cmp	r2, #1
   b45c0:	d116      	bne.n	b45f0 <_ZN7Stepper4stepEi+0x60>
        if (this->step_number == this->number_of_steps) {
   b45c2:	68a2      	ldr	r2, [r4, #8]
        this->step_number++;
   b45c4:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
   b45c6:	4293      	cmp	r3, r2
          this->step_number = 0;
   b45c8:	bf08      	it	eq
   b45ca:	463b      	moveq	r3, r7
        this->step_number--;
   b45cc:	6123      	str	r3, [r4, #16]
      if (this->pin_count == 5)
   b45ce:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
   b45d2:	2b05      	cmp	r3, #5
      steps_left--;
   b45d4:	f105 35ff 	add.w	r5, r5, #4294967295
      if (this->pin_count == 5)
   b45d8:	d110      	bne.n	b45fc <_ZN7Stepper4stepEi+0x6c>
        stepMotor(this->step_number % 10);
   b45da:	fb91 f3f6 	sdiv	r3, r1, r6
   b45de:	fb06 1113 	mls	r1, r6, r3, r1
        stepMotor(this->step_number % 4);
   b45e2:	4620      	mov	r0, r4
   b45e4:	f7ff ff0c 	bl	b4400 <_ZN7Stepper9stepMotorEi>
   b45e8:	e7de      	b.n	b45a8 <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
   b45ea:	d0db      	beq.n	b45a4 <_ZN7Stepper4stepEi+0x14>
   b45ec:	2300      	movs	r3, #0
   b45ee:	e7d8      	b.n	b45a2 <_ZN7Stepper4stepEi+0x12>
        if (this->step_number == 0) {
   b45f0:	b90b      	cbnz	r3, b45f6 <_ZN7Stepper4stepEi+0x66>
          this->step_number = this->number_of_steps;
   b45f2:	68a3      	ldr	r3, [r4, #8]
   b45f4:	6123      	str	r3, [r4, #16]
        this->step_number--;
   b45f6:	6923      	ldr	r3, [r4, #16]
   b45f8:	3b01      	subs	r3, #1
   b45fa:	e7e7      	b.n	b45cc <_ZN7Stepper4stepEi+0x3c>
        stepMotor(this->step_number % 4);
   b45fc:	424b      	negs	r3, r1
   b45fe:	f003 0303 	and.w	r3, r3, #3
   b4602:	f001 0103 	and.w	r1, r1, #3
   b4606:	bf58      	it	pl
   b4608:	4259      	negpl	r1, r3
   b460a:	e7ea      	b.n	b45e2 <_ZN7Stepper4stepEi+0x52>
}
   b460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b460e <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b460e:	4770      	bx	lr

000b4610 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4610:	b510      	push	{r4, lr}
  }
   b4612:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4614:	4604      	mov	r4, r0
  }
   b4616:	f7ff fd42 	bl	b409e <_ZdlPvj>
   b461a:	4620      	mov	r0, r4
   b461c:	bd10      	pop	{r4, pc}
	...

000b4620 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4620:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4622:	4604      	mov	r4, r0
   b4624:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4626:	7922      	ldrb	r2, [r4, #4]
   b4628:	68a3      	ldr	r3, [r4, #8]
   b462a:	b132      	cbz	r2, b463a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b462c:	b9a3      	cbnz	r3, b4658 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b462e:	490b      	ldr	r1, [pc, #44]	; (b465c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4630:	b002      	add	sp, #8
   b4632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4636:	f001 bff7 	b.w	b6628 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b463a:	4a09      	ldr	r2, [pc, #36]	; (b4660 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b463c:	7b26      	ldrb	r6, [r4, #12]
   b463e:	4d09      	ldr	r5, [pc, #36]	; (b4664 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4640:	4909      	ldr	r1, [pc, #36]	; (b4668 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4642:	7b64      	ldrb	r4, [r4, #13]
   b4644:	2e01      	cmp	r6, #1
   b4646:	bf18      	it	ne
   b4648:	4629      	movne	r1, r5
   b464a:	e9cd 1400 	strd	r1, r4, [sp]
   b464e:	4907      	ldr	r1, [pc, #28]	; (b466c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4650:	f7ff fd3c 	bl	b40cc <_ZN5Print6printfEPKcz>
  }
   b4654:	b002      	add	sp, #8
   b4656:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4658:	4a05      	ldr	r2, [pc, #20]	; (b4670 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b465a:	e7ef      	b.n	b463c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b465c:	000ba26e 	.word	0x000ba26e
   b4660:	000ba16d 	.word	0x000ba16d
   b4664:	000ba26a 	.word	0x000ba26a
   b4668:	000ba266 	.word	0x000ba266
   b466c:	000ba284 	.word	0x000ba284
   b4670:	000ba25d 	.word	0x000ba25d

000b4674 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4674:	f04f 33ff 	mov.w	r3, #4294967295
   b4678:	6103      	str	r3, [r0, #16]
{ }
   b467a:	4770      	bx	lr

000b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b467c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b467e:	4c0b      	ldr	r4, [pc, #44]	; (b46ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4680:	7821      	ldrb	r1, [r4, #0]
   b4682:	f3bf 8f5b 	dmb	ish
   b4686:	f011 0101 	ands.w	r1, r1, #1
   b468a:	d10b      	bne.n	b46a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b468c:	4620      	mov	r0, r4
   b468e:	9101      	str	r1, [sp, #4]
   b4690:	f7ff fd14 	bl	b40bc <__cxa_guard_acquire>
   b4694:	9901      	ldr	r1, [sp, #4]
   b4696:	b128      	cbz	r0, b46a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4698:	4805      	ldr	r0, [pc, #20]	; (b46b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b469a:	f001 fe43 	bl	b6324 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b469e:	4620      	mov	r0, r4
   b46a0:	f7ff fd11 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b46a4:	4802      	ldr	r0, [pc, #8]	; (b46b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b46a6:	b002      	add	sp, #8
   b46a8:	bd10      	pop	{r4, pc}
   b46aa:	bf00      	nop
   b46ac:	2003e6b8 	.word	0x2003e6b8
   b46b0:	2003e6bc 	.word	0x2003e6bc

000b46b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b46b4:	b508      	push	{r3, lr}
        instance().endTransaction();
   b46b6:	f7ff ffe1 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b46ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b46be:	f001 be77 	b.w	b63b0 <_ZN8SPIClass14endTransactionEv>

000b46c2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b46c2:	b507      	push	{r0, r1, r2, lr}
   b46c4:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b46c6:	f7ff ffd9 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b46ca:	9901      	ldr	r1, [sp, #4]
    }
   b46cc:	b003      	add	sp, #12
   b46ce:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b46d2:	f001 be87 	b.w	b63e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b46d6 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b46d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b46da:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b46de:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b46e0:	4605      	mov	r5, r0
   b46e2:	460f      	mov	r7, r1
    if (_sck == -1)
   b46e4:	d106      	bne.n	b46f4 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b46e6:	f7ff ffc9 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b46ea:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b46ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b46f0:	f001 bf3e 	b.w	b6570 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b46f4:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b46f6:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b46f8:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b46fc:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4700:	2100      	movs	r1, #0
   b4702:	b280      	uxth	r0, r0
   b4704:	f002 fec7 	bl	b7496 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4708:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b470c:	fa08 f106 	lsl.w	r1, r8, r6
   b4710:	4039      	ands	r1, r7
   b4712:	b280      	uxth	r0, r0
   b4714:	f002 febf 	bl	b7496 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4718:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b471c:	2101      	movs	r1, #1
   b471e:	b280      	uxth	r0, r0
   b4720:	f002 feb9 	bl	b7496 <digitalWrite>
        if (digitalRead(_miso))
   b4724:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4728:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b472a:	b280      	uxth	r0, r0
        reply <<= 1;
   b472c:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b472e:	f002 fecb 	bl	b74c8 <digitalRead>
   b4732:	b108      	cbz	r0, b4738 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4734:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4738:	3e01      	subs	r6, #1
   b473a:	d2df      	bcs.n	b46fc <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b473c:	4620      	mov	r0, r4
   b473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4744 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4746:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b474a:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b474c:	4604      	mov	r4, r0
   b474e:	460e      	mov	r6, r1
   b4750:	4615      	mov	r5, r2
    if (_cs == -1) {
   b4752:	d113      	bne.n	b477c <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4754:	7901      	ldrb	r1, [r0, #4]
   b4756:	6800      	ldr	r0, [r0, #0]
   b4758:	f002 fa84 	bl	b6c64 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b475c:	6820      	ldr	r0, [r4, #0]
   b475e:	6803      	ldr	r3, [r0, #0]
   b4760:	4631      	mov	r1, r6
   b4762:	689b      	ldr	r3, [r3, #8]
   b4764:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4766:	6820      	ldr	r0, [r4, #0]
   b4768:	6803      	ldr	r3, [r0, #0]
   b476a:	4629      	mov	r1, r5
   b476c:	689b      	ldr	r3, [r3, #8]
   b476e:	4798      	blx	r3
        _wire -> endTransmission();
   b4770:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b4772:	b004      	add	sp, #16
   b4774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4778:	f002 ba7f 	b.w	b6c7a <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b477c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4780:	3301      	adds	r3, #1
   b4782:	d10c      	bne.n	b479e <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4784:	4b16      	ldr	r3, [pc, #88]	; (b47e0 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4786:	9300      	str	r3, [sp, #0]
   b4788:	2300      	movs	r3, #0
   b478a:	f88d 3004 	strb.w	r3, [sp, #4]
   b478e:	4b15      	ldr	r3, [pc, #84]	; (b47e4 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4790:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4792:	4668      	mov	r0, sp
   b4794:	2301      	movs	r3, #1
   b4796:	f8ad 300c 	strh.w	r3, [sp, #12]
   b479a:	f7ff ff92 	bl	b46c2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b479e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b47a2:	2100      	movs	r1, #0
   b47a4:	b280      	uxth	r0, r0
   b47a6:	f002 fe76 	bl	b7496 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b47aa:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b47ae:	4620      	mov	r0, r4
   b47b0:	f7ff ff91 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b47b4:	4629      	mov	r1, r5
   b47b6:	4620      	mov	r0, r4
   b47b8:	f7ff ff8d 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b47bc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b47c0:	2101      	movs	r1, #1
   b47c2:	b280      	uxth	r0, r0
   b47c4:	f002 fe67 	bl	b7496 <digitalWrite>
    if (_sck == -1)
   b47c8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b47cc:	3301      	adds	r3, #1
   b47ce:	d104      	bne.n	b47da <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b47d0:	b004      	add	sp, #16
   b47d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b47d6:	f7ff bf6d 	b.w	b46b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b47da:	b004      	add	sp, #16
   b47dc:	bd70      	pop	{r4, r5, r6, pc}
   b47de:	bf00      	nop
   b47e0:	000ba2ac 	.word	0x000ba2ac
   b47e4:	0007a120 	.word	0x0007a120

000b47e8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b47e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b47ea:	00db      	lsls	r3, r3, #3
   b47ec:	f002 0207 	and.w	r2, r2, #7
   b47f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b47f4:	4313      	orrs	r3, r2
   b47f6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b47fa:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b47fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4802:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b4806:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b480a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b480e:	f366 1347 	bfi	r3, r6, #5, #3
   b4812:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4816:	00ed      	lsls	r5, r5, #3
   b4818:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b481c:	f007 0707 	and.w	r7, r7, #7
   b4820:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4828:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b482a:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b482c:	431d      	orrs	r5, r3
   b482e:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4832:	f006 0207 	and.w	r2, r6, #7
   b4836:	21f2      	movs	r1, #242	; 0xf2
   b4838:	f7ff ff84 	bl	b4744 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b483c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4840:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4844:	f002 0107 	and.w	r1, r2, #7
   b4848:	009b      	lsls	r3, r3, #2
   b484a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b484e:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4852:	4620      	mov	r0, r4
   b4854:	21f5      	movs	r1, #245	; 0xf5
   b4856:	f7ff ff75 	bl	b4744 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b485a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b485e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4862:	f002 0107 	and.w	r1, r2, #7
   b4866:	009b      	lsls	r3, r3, #2
   b4868:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b486c:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4870:	4620      	mov	r0, r4
   b4872:	21f4      	movs	r1, #244	; 0xf4
}
   b4874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4878:	f7ff bf64 	b.w	b4744 <_ZN15Adafruit_BME2806write8Ehh>

000b487c <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b487c:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b487e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4882:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4884:	b085      	sub	sp, #20
   b4886:	4604      	mov	r4, r0
   b4888:	460d      	mov	r5, r1
    if (_cs == -1) {
   b488a:	d118      	bne.n	b48be <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b488c:	7901      	ldrb	r1, [r0, #4]
   b488e:	6800      	ldr	r0, [r0, #0]
   b4890:	f002 f9e8 	bl	b6c64 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4894:	6820      	ldr	r0, [r4, #0]
   b4896:	6803      	ldr	r3, [r0, #0]
   b4898:	4629      	mov	r1, r5
   b489a:	689b      	ldr	r3, [r3, #8]
   b489c:	4798      	blx	r3
        _wire -> endTransmission();
   b489e:	6820      	ldr	r0, [r4, #0]
   b48a0:	f002 f9eb 	bl	b6c7a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b48a4:	7921      	ldrb	r1, [r4, #4]
   b48a6:	6820      	ldr	r0, [r4, #0]
   b48a8:	2201      	movs	r2, #1
   b48aa:	f002 f9d8 	bl	b6c5e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b48ae:	6820      	ldr	r0, [r4, #0]
   b48b0:	6803      	ldr	r3, [r0, #0]
   b48b2:	695b      	ldr	r3, [r3, #20]
   b48b4:	4798      	blx	r3
   b48b6:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b48b8:	4628      	mov	r0, r5
   b48ba:	b005      	add	sp, #20
   b48bc:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b48be:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b48c2:	3301      	adds	r3, #1
   b48c4:	d10c      	bne.n	b48e0 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b48c6:	4b15      	ldr	r3, [pc, #84]	; (b491c <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b48c8:	9300      	str	r3, [sp, #0]
   b48ca:	2300      	movs	r3, #0
   b48cc:	f88d 3004 	strb.w	r3, [sp, #4]
   b48d0:	4b13      	ldr	r3, [pc, #76]	; (b4920 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b48d2:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b48d4:	4668      	mov	r0, sp
   b48d6:	2301      	movs	r3, #1
   b48d8:	f8ad 300c 	strh.w	r3, [sp, #12]
   b48dc:	f7ff fef1 	bl	b46c2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b48e0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48e4:	2100      	movs	r1, #0
   b48e6:	b280      	uxth	r0, r0
   b48e8:	f002 fdd5 	bl	b7496 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b48ec:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b48f0:	4620      	mov	r0, r4
   b48f2:	f7ff fef0 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b48f6:	2100      	movs	r1, #0
   b48f8:	4620      	mov	r0, r4
   b48fa:	f7ff feec 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
   b48fe:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4900:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4904:	2101      	movs	r1, #1
   b4906:	b280      	uxth	r0, r0
   b4908:	f002 fdc5 	bl	b7496 <digitalWrite>
        if (_sck == -1)
   b490c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4910:	3301      	adds	r3, #1
   b4912:	d1d1      	bne.n	b48b8 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4914:	f7ff fece 	bl	b46b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4918:	e7ce      	b.n	b48b8 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b491a:	bf00      	nop
   b491c:	000ba2ac 	.word	0x000ba2ac
   b4920:	0007a120 	.word	0x0007a120

000b4924 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4924:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4926:	21f3      	movs	r1, #243	; 0xf3
   b4928:	f7ff ffa8 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b492c:	f000 0001 	and.w	r0, r0, #1
   b4930:	bd08      	pop	{r3, pc}
	...

000b4934 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4934:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4936:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b493a:	3301      	adds	r3, #1
{
   b493c:	b085      	sub	sp, #20
   b493e:	4604      	mov	r4, r0
   b4940:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4942:	d11f      	bne.n	b4984 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4944:	7901      	ldrb	r1, [r0, #4]
   b4946:	6800      	ldr	r0, [r0, #0]
   b4948:	f002 f98c 	bl	b6c64 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b494c:	6820      	ldr	r0, [r4, #0]
   b494e:	6803      	ldr	r3, [r0, #0]
   b4950:	4629      	mov	r1, r5
   b4952:	689b      	ldr	r3, [r3, #8]
   b4954:	4798      	blx	r3
        _wire -> endTransmission();
   b4956:	6820      	ldr	r0, [r4, #0]
   b4958:	f002 f98f 	bl	b6c7a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b495c:	7921      	ldrb	r1, [r4, #4]
   b495e:	6820      	ldr	r0, [r4, #0]
   b4960:	2202      	movs	r2, #2
   b4962:	f002 f97c 	bl	b6c5e <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4966:	6820      	ldr	r0, [r4, #0]
   b4968:	6803      	ldr	r3, [r0, #0]
   b496a:	695b      	ldr	r3, [r3, #20]
   b496c:	4798      	blx	r3
   b496e:	4605      	mov	r5, r0
   b4970:	6820      	ldr	r0, [r4, #0]
   b4972:	6803      	ldr	r3, [r0, #0]
   b4974:	695b      	ldr	r3, [r3, #20]
   b4976:	4798      	blx	r3
   b4978:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b497c:	b285      	uxth	r5, r0
}
   b497e:	4628      	mov	r0, r5
   b4980:	b005      	add	sp, #20
   b4982:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4984:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4988:	3301      	adds	r3, #1
   b498a:	d10c      	bne.n	b49a6 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b498c:	4b18      	ldr	r3, [pc, #96]	; (b49f0 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b498e:	9300      	str	r3, [sp, #0]
   b4990:	2300      	movs	r3, #0
   b4992:	f88d 3004 	strb.w	r3, [sp, #4]
   b4996:	4b17      	ldr	r3, [pc, #92]	; (b49f4 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4998:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b499a:	4668      	mov	r0, sp
   b499c:	2301      	movs	r3, #1
   b499e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b49a2:	f7ff fe8e 	bl	b46c2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b49a6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49aa:	2100      	movs	r1, #0
   b49ac:	b280      	uxth	r0, r0
   b49ae:	f002 fd72 	bl	b7496 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b49b2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b49b6:	4620      	mov	r0, r4
   b49b8:	f7ff fe8d 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b49bc:	2100      	movs	r1, #0
   b49be:	4620      	mov	r0, r4
   b49c0:	f7ff fe89 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
   b49c4:	2100      	movs	r1, #0
   b49c6:	4605      	mov	r5, r0
   b49c8:	4620      	mov	r0, r4
   b49ca:	f7ff fe84 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
   b49ce:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b49d2:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b49d4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49d8:	2101      	movs	r1, #1
   b49da:	b280      	uxth	r0, r0
   b49dc:	f002 fd5b 	bl	b7496 <digitalWrite>
        if (_sck == -1)
   b49e0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b49e4:	3301      	adds	r3, #1
   b49e6:	d1ca      	bne.n	b497e <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b49e8:	f7ff fe64 	bl	b46b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b49ec:	e7c7      	b.n	b497e <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b49ee:	bf00      	nop
   b49f0:	000ba2ac 	.word	0x000ba2ac
   b49f4:	0007a120 	.word	0x0007a120

000b49f8 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b49f8:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b49fa:	f7ff ff9b 	bl	b4934 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b49fe:	ba40      	rev16	r0, r0
}
   b4a00:	b280      	uxth	r0, r0
   b4a02:	bd08      	pop	{r3, pc}

000b4a04 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4a04:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4a06:	2188      	movs	r1, #136	; 0x88
{
   b4a08:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4a0a:	f7ff fff5 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4a0e:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4a10:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4a12:	4620      	mov	r0, r4
   b4a14:	f7ff fff0 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a18:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4a1a:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	f7ff ffeb 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a22:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4a24:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a26:	4620      	mov	r0, r4
   b4a28:	f7ff ffe6 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4a2c:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a2e:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4a30:	4620      	mov	r0, r4
   b4a32:	f7ff ffe1 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a36:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4a38:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4a3a:	4620      	mov	r0, r4
   b4a3c:	f7ff ffdc 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a40:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4a42:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4a44:	4620      	mov	r0, r4
   b4a46:	f7ff ffd7 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a4a:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4a4c:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4a4e:	4620      	mov	r0, r4
   b4a50:	f7ff ffd2 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a54:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4a56:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4a58:	4620      	mov	r0, r4
   b4a5a:	f7ff ffcd 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a5e:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4a60:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4a62:	4620      	mov	r0, r4
   b4a64:	f7ff ffc8 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a68:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4a6a:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4a6c:	4620      	mov	r0, r4
   b4a6e:	f7ff ffc3 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a72:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4a74:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4a76:	4620      	mov	r0, r4
   b4a78:	f7ff ffbe 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4a7c:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4a7e:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4a80:	4620      	mov	r0, r4
   b4a82:	f7ff fefb 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4a86:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4a88:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4a8c:	4620      	mov	r0, r4
   b4a8e:	f7ff ffb3 	bl	b49f8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4a92:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4a94:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4a96:	4620      	mov	r0, r4
   b4a98:	f7ff fef0 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4a9c:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4a9e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4aa2:	4620      	mov	r0, r4
   b4aa4:	f7ff feea 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>
   b4aa8:	21e5      	movs	r1, #229	; 0xe5
   b4aaa:	4605      	mov	r5, r0
   b4aac:	4620      	mov	r0, r4
   b4aae:	f7ff fee5 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>
   b4ab2:	f000 030f 	and.w	r3, r0, #15
   b4ab6:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4aba:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4abc:	21e6      	movs	r1, #230	; 0xe6
   b4abe:	4620      	mov	r0, r4
   b4ac0:	f7ff fedc 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>
   b4ac4:	21e5      	movs	r1, #229	; 0xe5
   b4ac6:	4605      	mov	r5, r0
   b4ac8:	4620      	mov	r0, r4
   b4aca:	f7ff fed7 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>
   b4ace:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4ad2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4ad6:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4ad8:	21e7      	movs	r1, #231	; 0xe7
   b4ada:	4620      	mov	r0, r4
   b4adc:	f7ff fece 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>
   b4ae0:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4ae4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ae8 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4ae8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4aea:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4aee:	3301      	adds	r3, #1
{
   b4af0:	b085      	sub	sp, #20
   b4af2:	4604      	mov	r4, r0
   b4af4:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4af6:	d123      	bne.n	b4b40 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4af8:	7901      	ldrb	r1, [r0, #4]
   b4afa:	6800      	ldr	r0, [r0, #0]
   b4afc:	f002 f8b2 	bl	b6c64 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4b00:	6820      	ldr	r0, [r4, #0]
   b4b02:	6803      	ldr	r3, [r0, #0]
   b4b04:	4629      	mov	r1, r5
   b4b06:	689b      	ldr	r3, [r3, #8]
   b4b08:	4798      	blx	r3
        _wire -> endTransmission();
   b4b0a:	6820      	ldr	r0, [r4, #0]
   b4b0c:	f002 f8b5 	bl	b6c7a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4b10:	7921      	ldrb	r1, [r4, #4]
   b4b12:	6820      	ldr	r0, [r4, #0]
   b4b14:	2203      	movs	r2, #3
   b4b16:	f002 f8a2 	bl	b6c5e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4b1a:	6820      	ldr	r0, [r4, #0]
   b4b1c:	6803      	ldr	r3, [r0, #0]
   b4b1e:	695b      	ldr	r3, [r3, #20]
   b4b20:	4798      	blx	r3
        value <<= 8;
   b4b22:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4b24:	6820      	ldr	r0, [r4, #0]
   b4b26:	6803      	ldr	r3, [r0, #0]
   b4b28:	695b      	ldr	r3, [r3, #20]
   b4b2a:	4798      	blx	r3
   b4b2c:	4328      	orrs	r0, r5
        value <<= 8;
   b4b2e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4b30:	6820      	ldr	r0, [r4, #0]
   b4b32:	6803      	ldr	r3, [r0, #0]
   b4b34:	695b      	ldr	r3, [r3, #20]
   b4b36:	4798      	blx	r3
   b4b38:	4305      	orrs	r5, r0
}
   b4b3a:	4628      	mov	r0, r5
   b4b3c:	b005      	add	sp, #20
   b4b3e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4b40:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4b44:	3301      	adds	r3, #1
   b4b46:	d10c      	bne.n	b4b62 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4b48:	4b1a      	ldr	r3, [pc, #104]	; (b4bb4 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4b4a:	9300      	str	r3, [sp, #0]
   b4b4c:	2300      	movs	r3, #0
   b4b4e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4b52:	4b19      	ldr	r3, [pc, #100]	; (b4bb8 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4b54:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4b56:	4668      	mov	r0, sp
   b4b58:	2301      	movs	r3, #1
   b4b5a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4b5e:	f7ff fdb0 	bl	b46c2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4b62:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b66:	2100      	movs	r1, #0
   b4b68:	b280      	uxth	r0, r0
   b4b6a:	f002 fc94 	bl	b7496 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4b6e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4b72:	4620      	mov	r0, r4
   b4b74:	f7ff fdaf 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4b78:	2100      	movs	r1, #0
   b4b7a:	4620      	mov	r0, r4
   b4b7c:	f7ff fdab 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4b80:	2100      	movs	r1, #0
        value <<= 8;
   b4b82:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4b84:	4620      	mov	r0, r4
   b4b86:	f7ff fda6 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
   b4b8a:	4328      	orrs	r0, r5
        value <<= 8;
   b4b8c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4b8e:	2100      	movs	r1, #0
   b4b90:	4620      	mov	r0, r4
   b4b92:	f7ff fda0 	bl	b46d6 <_ZN15Adafruit_BME2807spixferEh>
   b4b96:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4b98:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b9c:	2101      	movs	r1, #1
   b4b9e:	b280      	uxth	r0, r0
   b4ba0:	f002 fc79 	bl	b7496 <digitalWrite>
        if (_sck == -1)
   b4ba4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4ba8:	3301      	adds	r3, #1
   b4baa:	d1c6      	bne.n	b4b3a <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4bac:	f7ff fd82 	bl	b46b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4bb0:	e7c3      	b.n	b4b3a <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4bb2:	bf00      	nop
   b4bb4:	000ba2ac 	.word	0x000ba2ac
   b4bb8:	0007a120 	.word	0x0007a120

000b4bbc <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4bbc:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4bbe:	21fa      	movs	r1, #250	; 0xfa
{
   b4bc0:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4bc2:	f7ff ff91 	bl	b4ae8 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4bc6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4bca:	d01f      	beq.n	b4c0c <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4bcc:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4bce:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4c14 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4bd2:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4bd4:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4bd8:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4bdc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4be0:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4be2:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4be6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4bea:	131b      	asrs	r3, r3, #12
   b4bec:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4bee:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4bf0:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4bf4:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4bf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4bfa:	3380      	adds	r3, #128	; 0x80
   b4bfc:	121b      	asrs	r3, r3, #8
   b4bfe:	ee07 3a90 	vmov	s15, r3
   b4c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4c06:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4c0a:	bd10      	pop	{r4, pc}
        return NAN;
   b4c0c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4c18 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4c10:	e7fb      	b.n	b4c0a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4c12:	bf00      	nop
   b4c14:	42c80000 	.word	0x42c80000
   b4c18:	7fc00000 	.word	0x7fc00000

000b4c1c <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4c1c:	b538      	push	{r3, r4, r5, lr}
   b4c1e:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4c20:	f7ff ffcc 	bl	b4bbc <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4c24:	21fd      	movs	r1, #253	; 0xfd
   b4c26:	4620      	mov	r0, r4
   b4c28:	f7ff fe84 	bl	b4934 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4c2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4c30:	d038      	beq.n	b4ca4 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4c32:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4c34:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4c38:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4c3c:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4c40:	0509      	lsls	r1, r1, #20
   b4c42:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4c46:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4c4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4c4e:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c50:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4c54:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c58:	436b      	muls	r3, r5
   b4c5a:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4c5c:	4369      	muls	r1, r5
   b4c5e:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4c64:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c66:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4c68:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c6c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4c70:	434b      	muls	r3, r1
   b4c72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4c76:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4c78:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4c7a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4c7c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4c80:	4352      	muls	r2, r2
   b4c82:	11d2      	asrs	r2, r2, #7
   b4c84:	434a      	muls	r2, r1
   b4c86:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4c8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4c8e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4c92:	bfa8      	it	ge
   b4c94:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4c98:	131b      	asrs	r3, r3, #12
   b4c9a:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4c9e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4ca2:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4ca4:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4cac <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4ca8:	e7fb      	b.n	b4ca2 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4caa:	bf00      	nop
   b4cac:	7fc00000 	.word	0x7fc00000

000b4cb0 <_ZN15Adafruit_BME2804initEv>:
{
   b4cb0:	b530      	push	{r4, r5, lr}
   b4cb2:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4cb4:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4cb8:	1c42      	adds	r2, r0, #1
{
   b4cba:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4cbc:	d119      	bne.n	b4cf2 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4cbe:	6820      	ldr	r0, [r4, #0]
   b4cc0:	f001 ff9e 	bl	b6c00 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4cc4:	21d0      	movs	r1, #208	; 0xd0
   b4cc6:	4620      	mov	r0, r4
   b4cc8:	f7ff fdd8 	bl	b487c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4ccc:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4cce:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4cd0:	d145      	bne.n	b4d5e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4cd2:	4620      	mov	r0, r4
   b4cd4:	22b6      	movs	r2, #182	; 0xb6
   b4cd6:	21e0      	movs	r1, #224	; 0xe0
   b4cd8:	f7ff fd34 	bl	b4744 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4cdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4ce0:	f001 fd20 	bl	b6724 <delay>
    while (isReadingCalibration())
   b4ce4:	4620      	mov	r0, r4
   b4ce6:	f7ff fe1d 	bl	b4924 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4cea:	4605      	mov	r5, r0
   b4cec:	b328      	cbz	r0, b4d3a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4cee:	2064      	movs	r0, #100	; 0x64
   b4cf0:	e7f6      	b.n	b4ce0 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4cf2:	2101      	movs	r1, #1
   b4cf4:	b280      	uxth	r0, r0
   b4cf6:	f002 fbce 	bl	b7496 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4cfa:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4cfe:	2101      	movs	r1, #1
   b4d00:	b280      	uxth	r0, r0
   b4d02:	f002 fbb7 	bl	b7474 <pinMode>
        if (_sck == -1) {
   b4d06:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4d0a:	1c43      	adds	r3, r0, #1
   b4d0c:	d104      	bne.n	b4d18 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4d0e:	f7ff fcb5 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4d12:	f001 fb11 	bl	b6338 <_ZN8SPIClass5beginEv>
    }
   b4d16:	e7d5      	b.n	b4cc4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4d18:	2101      	movs	r1, #1
   b4d1a:	b280      	uxth	r0, r0
   b4d1c:	f002 fbaa 	bl	b7474 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4d20:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4d24:	2101      	movs	r1, #1
   b4d26:	b280      	uxth	r0, r0
   b4d28:	f002 fba4 	bl	b7474 <pinMode>
            pinMode(_miso, INPUT);
   b4d2c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4d30:	2100      	movs	r1, #0
   b4d32:	b280      	uxth	r0, r0
   b4d34:	f002 fb9e 	bl	b7474 <pinMode>
   b4d38:	e7c4      	b.n	b4cc4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	f7ff fe62 	bl	b4a04 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4d40:	2305      	movs	r3, #5
   b4d42:	9300      	str	r3, [sp, #0]
   b4d44:	461a      	mov	r2, r3
   b4d46:	2103      	movs	r1, #3
   b4d48:	4620      	mov	r0, r4
   b4d4a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4d4e:	f7ff fd4b 	bl	b47e8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4d52:	2064      	movs	r0, #100	; 0x64
   b4d54:	f001 fce6 	bl	b6724 <delay>
    return true;
   b4d58:	2001      	movs	r0, #1
}
   b4d5a:	b005      	add	sp, #20
   b4d5c:	bd30      	pop	{r4, r5, pc}
        return false;
   b4d5e:	2000      	movs	r0, #0
   b4d60:	e7fb      	b.n	b4d5a <_ZN15Adafruit_BME2804initEv+0xaa>

000b4d62 <_ZN15Adafruit_BME2805beginEh>:
{
   b4d62:	b510      	push	{r4, lr}
	_i2caddr = addr;
   b4d64:	7101      	strb	r1, [r0, #4]
{
   b4d66:	4604      	mov	r4, r0
	_wire = &Wire;
   b4d68:	f002 fc3e 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b4d6c:	6020      	str	r0, [r4, #0]
	return init();
   b4d6e:	4620      	mov	r0, r4
}
   b4d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   b4d74:	f7ff bf9c 	b.w	b4cb0 <_ZN15Adafruit_BME2804initEv>

000b4d78 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4d7a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4d7c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4d80:	2d02      	cmp	r5, #2
   b4d82:	d069      	beq.n	b4e58 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4d84:	2d03      	cmp	r5, #3
   b4d86:	f000 8099 	beq.w	b4ebc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4d8a:	2d01      	cmp	r5, #1
   b4d8c:	d16c      	bne.n	b4e68 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4d8e:	8905      	ldrh	r5, [r0, #8]
   b4d90:	43d2      	mvns	r2, r2
   b4d92:	442a      	add	r2, r5
   b4d94:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4d96:	2a00      	cmp	r2, #0
   b4d98:	db5d      	blt.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4d9a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4d9e:	4295      	cmp	r5, r2
   b4da0:	dd59      	ble.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4da2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4da4:	bfbe      	ittt	lt
   b4da6:	185b      	addlt	r3, r3, r1
   b4da8:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4daa:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4dac:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4db0:	18cd      	adds	r5, r1, r3
   b4db2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4db4:	bfc4      	itt	gt
   b4db6:	1a43      	subgt	r3, r0, r1
   b4db8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4dba:	2b00      	cmp	r3, #0
   b4dbc:	dd4b      	ble.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4dbe:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4dc2:	f8df c120 	ldr.w	ip, [pc, #288]	; b4ee4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4dc6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4dca:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4dce:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4dd0:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4dd4:	d01a      	beq.n	b4e0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4dd6:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4dda:	4e40      	ldr	r6, [pc, #256]	; (b4edc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4ddc:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4dde:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4de0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4de2:	bf3f      	itttt	cc
   b4de4:	eba5 0e03 	subcc.w	lr, r5, r3
   b4de8:	26ff      	movcc	r6, #255	; 0xff
   b4dea:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4dee:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4df0:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4df4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4df6:	bf0c      	ite	eq
   b4df8:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4dfa:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4dfc:	42ab      	cmp	r3, r5
   b4dfe:	f80c 6002 	strb.w	r6, [ip, r2]
   b4e02:	d328      	bcc.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4e04:	3908      	subs	r1, #8
   b4e06:	440b      	add	r3, r1
   b4e08:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4e0a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4e0c:	2b07      	cmp	r3, #7
   b4e0e:	d919      	bls.n	b4e44 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4e10:	2c01      	cmp	r4, #1
   b4e12:	f04f 35ff 	mov.w	r5, #4294967295
   b4e16:	bf18      	it	ne
   b4e18:	2500      	movne	r5, #0
   b4e1a:	b2ed      	uxtb	r5, r5
   b4e1c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4e20:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4e22:	3a08      	subs	r2, #8
   b4e24:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4e26:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4e28:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4e2c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4e30:	d8f7      	bhi.n	b4e22 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4e32:	f1a3 0208 	sub.w	r2, r3, #8
   b4e36:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4e3a:	3201      	adds	r2, #1
   b4e3c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4e40:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4e44:	b13b      	cbz	r3, b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4e46:	4a26      	ldr	r2, [pc, #152]	; (b4ee0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4e48:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4e4a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4e4c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e4e:	bf0c      	ite	eq
   b4e50:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4e52:	4393      	bicne	r3, r2
   b4e54:	7003      	strb	r3, [r0, #0]
}
   b4e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4e58:	8945      	ldrh	r5, [r0, #10]
   b4e5a:	43d2      	mvns	r2, r2
   b4e5c:	442a      	add	r2, r5
      x -= (w-1);
   b4e5e:	18cd      	adds	r5, r1, r3
   b4e60:	8901      	ldrh	r1, [r0, #8]
   b4e62:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4e64:	b212      	sxth	r2, r2
      x -= (w-1);
   b4e66:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4e68:	2a00      	cmp	r2, #0
   b4e6a:	dbf4      	blt.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4e6c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4e70:	4295      	cmp	r5, r2
   b4e72:	ddf0      	ble.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4e74:	2900      	cmp	r1, #0
    w += x;
   b4e76:	bfbe      	ittt	lt
   b4e78:	185b      	addlt	r3, r3, r1
   b4e7a:	b21b      	sxthlt	r3, r3
    x = 0;
   b4e7c:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4e7e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4e82:	18ce      	adds	r6, r1, r3
   b4e84:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4e86:	bfc4      	itt	gt
   b4e88:	1a6b      	subgt	r3, r5, r1
   b4e8a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4e8c:	2b00      	cmp	r3, #0
   b4e8e:	dde2      	ble.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4e90:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4e92:	2580      	movs	r5, #128	; 0x80
   b4e94:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4e98:	4812      	ldr	r0, [pc, #72]	; (b4ee4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4e9a:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4e9c:	f002 0007 	and.w	r0, r2, #7
   b4ea0:	2201      	movs	r2, #1
   b4ea2:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4ea4:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4ea6:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4ea8:	440b      	add	r3, r1
   b4eaa:	d10c      	bne.n	b4ec6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4eac:	428b      	cmp	r3, r1
   b4eae:	d0d2      	beq.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4eb0:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4eb4:	4310      	orrs	r0, r2
   b4eb6:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4eba:	e7f7      	b.n	b4eac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4ebc:	18cd      	adds	r5, r1, r3
   b4ebe:	8941      	ldrh	r1, [r0, #10]
   b4ec0:	1b49      	subs	r1, r1, r5
   b4ec2:	b209      	sxth	r1, r1
      break;
   b4ec4:	e767      	b.n	b4d96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4ec6:	43d2      	mvns	r2, r2
   b4ec8:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4eca:	428b      	cmp	r3, r1
   b4ecc:	d0c3      	beq.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4ece:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4ed2:	4010      	ands	r0, r2
   b4ed4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4ed8:	e7f7      	b.n	b4eca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4eda:	bf00      	nop
   b4edc:	2003df04 	.word	0x2003df04
   b4ee0:	2003defc 	.word	0x2003defc
   b4ee4:	2003df0c 	.word	0x2003df0c

000b4ee8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4eea:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4eec:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4ef0:	2d02      	cmp	r5, #2
   b4ef2:	d034      	beq.n	b4f5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4ef4:	2d03      	cmp	r5, #3
   b4ef6:	f000 809b 	beq.w	b5030 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4efa:	2d01      	cmp	r5, #1
   b4efc:	d137      	bne.n	b4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4efe:	18d5      	adds	r5, r2, r3
   b4f00:	8902      	ldrh	r2, [r0, #8]
   b4f02:	1b52      	subs	r2, r2, r5
   b4f04:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4f06:	2900      	cmp	r1, #0
   b4f08:	f2c0 8091 	blt.w	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4f0c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4f10:	428d      	cmp	r5, r1
   b4f12:	f340 808c 	ble.w	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4f16:	2a00      	cmp	r2, #0
    w += x;
   b4f18:	bfbe      	ittt	lt
   b4f1a:	189b      	addlt	r3, r3, r2
   b4f1c:	b21b      	sxthlt	r3, r3
    x = 0;
   b4f1e:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4f20:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4f24:	18d6      	adds	r6, r2, r3
   b4f26:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4f28:	bfc4      	itt	gt
   b4f2a:	1aab      	subgt	r3, r5, r2
   b4f2c:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4f2e:	2b00      	cmp	r3, #0
   b4f30:	dd7d      	ble.n	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4f32:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4f34:	2580      	movs	r5, #128	; 0x80
   b4f36:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4f3a:	4845      	ldr	r0, [pc, #276]	; (b5050 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4f3c:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4f3e:	f001 0007 	and.w	r0, r1, #7
   b4f42:	2101      	movs	r1, #1
   b4f44:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4f46:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4f48:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4f4a:	4413      	add	r3, r2
   b4f4c:	d175      	bne.n	b503a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4f4e:	429a      	cmp	r2, r3
   b4f50:	d06d      	beq.n	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4f52:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4f56:	4308      	orrs	r0, r1
   b4f58:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4f5c:	e7f7      	b.n	b4f4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4f5e:	8905      	ldrh	r5, [r0, #8]
   b4f60:	43c9      	mvns	r1, r1
   b4f62:	4429      	add	r1, r5
      y -= (h-1);
   b4f64:	18d5      	adds	r5, r2, r3
   b4f66:	8942      	ldrh	r2, [r0, #10]
   b4f68:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4f6a:	b209      	sxth	r1, r1
      y -= (h-1);
   b4f6c:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4f6e:	2900      	cmp	r1, #0
   b4f70:	db5d      	blt.n	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4f72:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4f76:	428d      	cmp	r5, r1
   b4f78:	dd59      	ble.n	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4f7a:	2a00      	cmp	r2, #0
    __h += __y;
   b4f7c:	bfbe      	ittt	lt
   b4f7e:	189b      	addlt	r3, r3, r2
   b4f80:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4f82:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4f84:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4f88:	18d5      	adds	r5, r2, r3
   b4f8a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4f8c:	bfc4      	itt	gt
   b4f8e:	1a83      	subgt	r3, r0, r2
   b4f90:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4f92:	2b00      	cmp	r3, #0
   b4f94:	dd4b      	ble.n	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4f96:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4f9a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5050 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4f9e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4fa2:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4fa6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4fa8:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4fac:	d01a      	beq.n	b4fe4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4fae:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4fb2:	4e28      	ldr	r6, [pc, #160]	; (b5054 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4fb4:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4fb6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4fb8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4fba:	bf3f      	itttt	cc
   b4fbc:	eba5 0e03 	subcc.w	lr, r5, r3
   b4fc0:	26ff      	movcc	r6, #255	; 0xff
   b4fc2:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4fc6:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4fc8:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4fcc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4fce:	bf0c      	ite	eq
   b4fd0:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4fd2:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4fd4:	42ab      	cmp	r3, r5
   b4fd6:	f80c 6001 	strb.w	r6, [ip, r1]
   b4fda:	d328      	bcc.n	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4fdc:	3a08      	subs	r2, #8
   b4fde:	4413      	add	r3, r2
   b4fe0:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4fe2:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4fe4:	2b07      	cmp	r3, #7
   b4fe6:	d919      	bls.n	b501c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4fe8:	2c01      	cmp	r4, #1
   b4fea:	f04f 35ff 	mov.w	r5, #4294967295
   b4fee:	bf18      	it	ne
   b4ff0:	2500      	movne	r5, #0
   b4ff2:	b2ed      	uxtb	r5, r5
   b4ff4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4ff8:	461a      	mov	r2, r3
      h -= 8;
   b4ffa:	3a08      	subs	r2, #8
   b4ffc:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4ffe:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5000:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5004:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5008:	d8f7      	bhi.n	b4ffa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b500a:	f1a3 0208 	sub.w	r2, r3, #8
   b500e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5012:	3201      	adds	r2, #1
   b5014:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5018:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b501c:	b13b      	cbz	r3, b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b501e:	4a0e      	ldr	r2, [pc, #56]	; (b5058 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5020:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5022:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5024:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5026:	bf0c      	ite	eq
   b5028:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b502a:	4393      	bicne	r3, r2
   b502c:	7003      	strb	r3, [r0, #0]
}
   b502e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5030:	8945      	ldrh	r5, [r0, #10]
   b5032:	43c9      	mvns	r1, r1
   b5034:	4429      	add	r1, r5
   b5036:	b209      	sxth	r1, r1
      break;
   b5038:	e765      	b.n	b4f06 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b503a:	43c9      	mvns	r1, r1
   b503c:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b503e:	429a      	cmp	r2, r3
   b5040:	d0f5      	beq.n	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5042:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5046:	4008      	ands	r0, r1
   b5048:	f802 0c01 	strb.w	r0, [r2, #-1]
   b504c:	e7f7      	b.n	b503e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b504e:	bf00      	nop
   b5050:	2003df0c 	.word	0x2003df0c
   b5054:	2003df04 	.word	0x2003df04
   b5058:	2003defc 	.word	0x2003defc

000b505c <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b505c:	4770      	bx	lr
	...

000b5060 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5062:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5064:	4606      	mov	r6, r0
   b5066:	4614      	mov	r4, r2
   b5068:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b506a:	db2d      	blt.n	b50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b506c:	f000 fbbe 	bl	b57ec <_ZN12Adafruit_GFX5widthEv>
   b5070:	42a8      	cmp	r0, r5
   b5072:	dd29      	ble.n	b50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5074:	2c00      	cmp	r4, #0
   b5076:	db27      	blt.n	b50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5078:	4630      	mov	r0, r6
   b507a:	f000 fbba 	bl	b57f2 <_ZN12Adafruit_GFX6heightEv>
   b507e:	42a0      	cmp	r0, r4
   b5080:	dd22      	ble.n	b50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5082:	4630      	mov	r0, r6
   b5084:	f000 fba2 	bl	b57cc <_ZN12Adafruit_GFX11getRotationEv>
   b5088:	2802      	cmp	r0, #2
   b508a:	d01e      	beq.n	b50ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b508c:	2803      	cmp	r0, #3
   b508e:	d025      	beq.n	b50dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5090:	2801      	cmp	r0, #1
   b5092:	d104      	bne.n	b509e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5094:	8933      	ldrh	r3, [r6, #8]
   b5096:	43e2      	mvns	r2, r4
   b5098:	441a      	add	r2, r3
    break;
   b509a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b509c:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b509e:	2c00      	cmp	r4, #0
   b50a0:	4622      	mov	r2, r4
   b50a2:	bfb8      	it	lt
   b50a4:	1de2      	addlt	r2, r4, #7
   b50a6:	10d2      	asrs	r2, r2, #3
   b50a8:	2180      	movs	r1, #128	; 0x80
   b50aa:	fb12 5501 	smlabb	r5, r2, r1, r5
   b50ae:	490e      	ldr	r1, [pc, #56]	; (b50e8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b50b0:	2201      	movs	r2, #1
   b50b2:	f004 0407 	and.w	r4, r4, #7
   b50b6:	574b      	ldrsb	r3, [r1, r5]
   b50b8:	fa02 f404 	lsl.w	r4, r2, r4
   b50bc:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b50be:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b50c0:	bf0c      	ite	eq
   b50c2:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b50c4:	43a3      	bicne	r3, r4
   b50c6:	554b      	strb	r3, [r1, r5]
}
   b50c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b50ca:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b50cc:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b50ce:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b50d0:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b50d2:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b50d4:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b50d6:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b50d8:	b224      	sxth	r4, r4
    break;
   b50da:	e7e0      	b.n	b509e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b50dc:	8973      	ldrh	r3, [r6, #10]
   b50de:	3b01      	subs	r3, #1
   b50e0:	1b5b      	subs	r3, r3, r5
    break;
   b50e2:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b50e4:	b21c      	sxth	r4, r3
    break;
   b50e6:	e7da      	b.n	b509e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b50e8:	2003df0c 	.word	0x2003df0c

000b50ec <_ZN16Adafruit_SSD1306D0Ev>:
   b50ec:	b510      	push	{r4, lr}
   b50ee:	2124      	movs	r1, #36	; 0x24
   b50f0:	4604      	mov	r4, r0
   b50f2:	f7fe ffd4 	bl	b409e <_ZdlPvj>
   b50f6:	4620      	mov	r0, r4
   b50f8:	bd10      	pop	{r4, pc}
	...

000b50fc <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b50fc:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b50fe:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5100:	4604      	mov	r4, r0
   b5102:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5104:	2180      	movs	r1, #128	; 0x80
   b5106:	f000 fa8b 	bl	b5620 <_ZN12Adafruit_GFXC1Ess>
   b510a:	4b06      	ldr	r3, [pc, #24]	; (b5124 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b510c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b510e:	23ff      	movs	r3, #255	; 0xff
   b5110:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5114:	7763      	strb	r3, [r4, #29]
   b5116:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b511a:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b511c:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5120:	4620      	mov	r0, r4
   b5122:	bd38      	pop	{r3, r4, r5, pc}
   b5124:	000ba2c0 	.word	0x000ba2c0

000b5128 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5128:	4802      	ldr	r0, [pc, #8]	; (b5134 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b512a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b512e:	2100      	movs	r1, #0
   b5130:	f003 b85f 	b.w	b81f2 <memset>
   b5134:	2003df0c 	.word	0x2003df0c

000b5138 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5138:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b513a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b513e:	b143      	cbz	r3, b5152 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5140:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b5142:	f7ff fa9b 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5146:	9901      	ldr	r1, [sp, #4]
}
   b5148:	b003      	add	sp, #12
   b514a:	f85d eb04 	ldr.w	lr, [sp], #4
   b514e:	f001 ba0f 	b.w	b6570 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5152:	460b      	mov	r3, r1
   b5154:	7f81      	ldrb	r1, [r0, #30]
   b5156:	7f40      	ldrb	r0, [r0, #29]
   b5158:	2201      	movs	r2, #1
}
   b515a:	b003      	add	sp, #12
   b515c:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5160:	f002 b9c5 	b.w	b74ee <shiftOut>

000b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5164:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b5166:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b516a:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b516c:	4604      	mov	r4, r0
   b516e:	460d      	mov	r5, r1
  if (sid != -1)
   b5170:	d01d      	beq.n	b51ae <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b5172:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b5176:	2101      	movs	r1, #1
   b5178:	b280      	uxth	r0, r0
   b517a:	f002 f98c 	bl	b7496 <digitalWrite>
    digitalWrite(dc, LOW);
   b517e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5182:	2100      	movs	r1, #0
   b5184:	b280      	uxth	r0, r0
   b5186:	f002 f986 	bl	b7496 <digitalWrite>
    digitalWrite(cs, LOW);
   b518a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b518e:	2100      	movs	r1, #0
   b5190:	b280      	uxth	r0, r0
   b5192:	f002 f980 	bl	b7496 <digitalWrite>
    fastSPIwrite(c);
   b5196:	4629      	mov	r1, r5
   b5198:	4620      	mov	r0, r4
   b519a:	f7ff ffcd 	bl	b5138 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b519e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b51a2:	2101      	movs	r1, #1
}
   b51a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b51a8:	b280      	uxth	r0, r0
   b51aa:	f002 b974 	b.w	b7496 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b51ae:	f002 fa1b 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b51b2:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b51b6:	f001 fd59 	bl	b6c6c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b51ba:	f002 fa15 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b51be:	6803      	ldr	r3, [r0, #0]
   b51c0:	2100      	movs	r1, #0
   b51c2:	689b      	ldr	r3, [r3, #8]
   b51c4:	4798      	blx	r3
    Wire.write(c);
   b51c6:	f002 fa0f 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b51ca:	6803      	ldr	r3, [r0, #0]
   b51cc:	4629      	mov	r1, r5
   b51ce:	689b      	ldr	r3, [r3, #8]
   b51d0:	4798      	blx	r3
    Wire.endTransmission();
   b51d2:	f002 fa09 	bl	b75e8 <_Z19__fetch_global_Wirev>
}
   b51d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b51da:	f001 bd4e 	b.w	b6c7a <_ZN7TwoWire15endTransmissionEv>
	...

000b51e0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b51e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b51e2:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b51e4:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b51e6:	f7ff ffbd 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b51ea:	2100      	movs	r1, #0
   b51ec:	4620      	mov	r0, r4
   b51ee:	f7ff ffb9 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b51f2:	217f      	movs	r1, #127	; 0x7f
   b51f4:	4620      	mov	r0, r4
   b51f6:	f7ff ffb5 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b51fa:	2122      	movs	r1, #34	; 0x22
   b51fc:	4620      	mov	r0, r4
   b51fe:	f7ff ffb1 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5202:	2100      	movs	r1, #0
   b5204:	4620      	mov	r0, r4
   b5206:	f7ff ffad 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b520a:	2107      	movs	r1, #7
   b520c:	4620      	mov	r0, r4
   b520e:	f7ff ffa9 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5212:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5216:	4f29      	ldr	r7, [pc, #164]	; (b52bc <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5218:	3301      	adds	r3, #1
   b521a:	d02a      	beq.n	b5272 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b521c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5220:	2101      	movs	r1, #1
   b5222:	b280      	uxth	r0, r0
   b5224:	f002 f937 	bl	b7496 <digitalWrite>
    digitalWrite(dc, HIGH);
   b5228:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b522c:	2101      	movs	r1, #1
   b522e:	b280      	uxth	r0, r0
   b5230:	f002 f931 	bl	b7496 <digitalWrite>
    digitalWrite(cs, LOW);
   b5234:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5238:	2100      	movs	r1, #0
   b523a:	b280      	uxth	r0, r0
   b523c:	f002 f92b 	bl	b7496 <digitalWrite>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5240:	2001      	movs	r0, #1
   b5242:	f000 fdaf 	bl	b5da4 <HAL_Delay_Microseconds>
   b5246:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b524a:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b524c:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5250:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5252:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5254:	f7ff ff70 	bl	b5138 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5258:	2d00      	cmp	r5, #0
   b525a:	d1f6      	bne.n	b524a <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b525c:	2001      	movs	r0, #1
   b525e:	f000 fda1 	bl	b5da4 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b5262:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5266:	2101      	movs	r1, #1
}
   b5268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b526c:	b280      	uxth	r0, r0
   b526e:	f002 b912 	b.w	b7496 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5272:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5274:	f002 f9b8 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b5278:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b527c:	f001 fcf6 	bl	b6c6c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5280:	f002 f9b2 	bl	b75e8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5284:	6803      	ldr	r3, [r0, #0]
   b5286:	2140      	movs	r1, #64	; 0x40
   b5288:	689b      	ldr	r3, [r3, #8]
   b528a:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b528c:	f105 0610 	add.w	r6, r5, #16
   b5290:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b5292:	f002 f9a9 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b5296:	6803      	ldr	r3, [r0, #0]
   b5298:	5d79      	ldrb	r1, [r7, r5]
   b529a:	689b      	ldr	r3, [r3, #8]
   b529c:	4798      	blx	r3
		i++;
   b529e:	1c6b      	adds	r3, r5, #1
   b52a0:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b52a2:	42ae      	cmp	r6, r5
   b52a4:	d1f5      	bne.n	b5292 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b52a6:	f002 f99f 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b52aa:	f001 fce6 	bl	b6c7a <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b52ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b52b2:	d100      	bne.n	b52b6 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b52b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b52b6:	4635      	mov	r5, r6
   b52b8:	e7dc      	b.n	b5274 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b52ba:	bf00      	nop
   b52bc:	2003df0c 	.word	0x2003df0c

000b52c0 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b52c0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b52c2:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b52c6:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b52c8:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b52ca:	4604      	mov	r4, r0
   b52cc:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b52ce:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b52d0:	f000 80c9 	beq.w	b5466 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b52d4:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b52d8:	2101      	movs	r1, #1
   b52da:	b280      	uxth	r0, r0
   b52dc:	f002 f8ca 	bl	b7474 <pinMode>
    pinMode(cs, OUTPUT);
   b52e0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b52e4:	2101      	movs	r1, #1
   b52e6:	b280      	uxth	r0, r0
   b52e8:	f002 f8c4 	bl	b7474 <pinMode>
    if (!hwSPI){
   b52ec:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b52f0:	2b00      	cmp	r3, #0
   b52f2:	f000 80a6 	beq.w	b5442 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b52f6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b52fa:	2101      	movs	r1, #1
   b52fc:	b280      	uxth	r0, r0
   b52fe:	f002 f8ca 	bl	b7496 <digitalWrite>
        instance().setBitOrder(order);
   b5302:	f7ff f9bb 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5306:	2101      	movs	r1, #1
   b5308:	f001 f82a 	bl	b6360 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b530c:	f7ff f9b6 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5310:	2110      	movs	r1, #16
   b5312:	f001 f907 	bl	b6524 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5316:	f7ff f9b1 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b531a:	2100      	movs	r1, #0
   b531c:	f001 f834 	bl	b6388 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5320:	f7ff f9ac 	bl	b467c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5324:	f001 f808 	bl	b6338 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5328:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b532c:	2101      	movs	r1, #1
   b532e:	b280      	uxth	r0, r0
   b5330:	f002 f8a0 	bl	b7474 <pinMode>
  digitalWrite(rst, HIGH);
   b5334:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5338:	2101      	movs	r1, #1
   b533a:	b280      	uxth	r0, r0
   b533c:	f002 f8ab 	bl	b7496 <digitalWrite>
  delay(1);
   b5340:	2001      	movs	r0, #1
   b5342:	f001 f9ef 	bl	b6724 <delay>
  digitalWrite(rst, LOW);
   b5346:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b534a:	2100      	movs	r1, #0
   b534c:	b280      	uxth	r0, r0
   b534e:	f002 f8a2 	bl	b7496 <digitalWrite>
  delay(10);
   b5352:	200a      	movs	r0, #10
   b5354:	f001 f9e6 	bl	b6724 <delay>
  digitalWrite(rst, HIGH);
   b5358:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b535c:	2101      	movs	r1, #1
   b535e:	b280      	uxth	r0, r0
   b5360:	f002 f899 	bl	b7496 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5364:	4620      	mov	r0, r4
   b5366:	21ae      	movs	r1, #174	; 0xae
   b5368:	f7ff fefc 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b536c:	4620      	mov	r0, r4
   b536e:	21d5      	movs	r1, #213	; 0xd5
   b5370:	f7ff fef8 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5374:	4620      	mov	r0, r4
   b5376:	2180      	movs	r1, #128	; 0x80
   b5378:	f7ff fef4 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b537c:	4620      	mov	r0, r4
   b537e:	21a8      	movs	r1, #168	; 0xa8
   b5380:	f7ff fef0 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5384:	4620      	mov	r0, r4
   b5386:	213f      	movs	r1, #63	; 0x3f
   b5388:	f7ff feec 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b538c:	4620      	mov	r0, r4
   b538e:	21d3      	movs	r1, #211	; 0xd3
   b5390:	f7ff fee8 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5394:	4620      	mov	r0, r4
   b5396:	2100      	movs	r1, #0
   b5398:	f7ff fee4 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b539c:	4620      	mov	r0, r4
   b539e:	2140      	movs	r1, #64	; 0x40
   b53a0:	f7ff fee0 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b53a4:	218d      	movs	r1, #141	; 0x8d
   b53a6:	4620      	mov	r0, r4
   b53a8:	f7ff fedc 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b53ac:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b53ae:	bf0c      	ite	eq
   b53b0:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b53b2:	2114      	movne	r1, #20
   b53b4:	4620      	mov	r0, r4
   b53b6:	f7ff fed5 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b53ba:	4620      	mov	r0, r4
   b53bc:	2120      	movs	r1, #32
   b53be:	f7ff fed1 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b53c2:	4620      	mov	r0, r4
   b53c4:	2100      	movs	r1, #0
   b53c6:	f7ff fecd 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b53ca:	4620      	mov	r0, r4
   b53cc:	21a1      	movs	r1, #161	; 0xa1
   b53ce:	f7ff fec9 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b53d2:	4620      	mov	r0, r4
   b53d4:	21c8      	movs	r1, #200	; 0xc8
   b53d6:	f7ff fec5 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b53da:	4620      	mov	r0, r4
   b53dc:	21da      	movs	r1, #218	; 0xda
   b53de:	f7ff fec1 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b53e2:	4620      	mov	r0, r4
   b53e4:	2112      	movs	r1, #18
   b53e6:	f7ff febd 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b53ea:	2181      	movs	r1, #129	; 0x81
   b53ec:	4620      	mov	r0, r4
   b53ee:	f7ff feb9 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b53f2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b53f4:	bf0c      	ite	eq
   b53f6:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b53f8:	21cf      	movne	r1, #207	; 0xcf
   b53fa:	4620      	mov	r0, r4
   b53fc:	f7ff feb2 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5400:	21d9      	movs	r1, #217	; 0xd9
   b5402:	4620      	mov	r0, r4
   b5404:	f7ff feae 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5408:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b540a:	bf0c      	ite	eq
   b540c:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b540e:	21f1      	movne	r1, #241	; 0xf1
   b5410:	4620      	mov	r0, r4
   b5412:	f7ff fea7 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5416:	4620      	mov	r0, r4
   b5418:	21db      	movs	r1, #219	; 0xdb
   b541a:	f7ff fea3 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b541e:	4620      	mov	r0, r4
   b5420:	2140      	movs	r1, #64	; 0x40
   b5422:	f7ff fe9f 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5426:	4620      	mov	r0, r4
   b5428:	21a4      	movs	r1, #164	; 0xa4
   b542a:	f7ff fe9b 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b542e:	4620      	mov	r0, r4
   b5430:	21a6      	movs	r1, #166	; 0xa6
   b5432:	f7ff fe97 	bl	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5436:	4620      	mov	r0, r4
   b5438:	21af      	movs	r1, #175	; 0xaf
}
   b543a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b543e:	f7ff be91 	b.w	b5164 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5442:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5446:	2101      	movs	r1, #1
   b5448:	b280      	uxth	r0, r0
   b544a:	f002 f813 	bl	b7474 <pinMode>
    	pinMode(sclk, OUTPUT);
   b544e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5452:	2101      	movs	r1, #1
   b5454:	b280      	uxth	r0, r0
   b5456:	f002 f80d 	bl	b7474 <pinMode>
    if (hwSPI){
   b545a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b545e:	2b00      	cmp	r3, #0
   b5460:	f43f af62 	beq.w	b5328 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5464:	e747      	b.n	b52f6 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5466:	f002 f8bf 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b546a:	f001 fbc9 	bl	b6c00 <_ZN7TwoWire5beginEv>
   b546e:	e75b      	b.n	b5328 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5470 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b5470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5474:	b085      	sub	sp, #20
   b5476:	461f      	mov	r7, r3
   b5478:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b547c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5480:	eba8 0902 	sub.w	r9, r8, r2
   b5484:	eba7 0a01 	sub.w	sl, r7, r1
   b5488:	f1b9 0f00 	cmp.w	r9, #0
   b548c:	bfb8      	it	lt
   b548e:	f1c9 0900 	rsblt	r9, r9, #0
   b5492:	f1ba 0f00 	cmp.w	sl, #0
   b5496:	bfb8      	it	lt
   b5498:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b549c:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b549e:	4683      	mov	fp, r0
   b54a0:	460c      	mov	r4, r1
   b54a2:	4615      	mov	r5, r2
  if (steep) {
   b54a4:	dd04      	ble.n	b54b0 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b54a6:	463a      	mov	r2, r7
    swap(x0, y0);
   b54a8:	462c      	mov	r4, r5
    swap(x1, y1);
   b54aa:	4647      	mov	r7, r8
    swap(x0, y0);
   b54ac:	460d      	mov	r5, r1
    swap(x1, y1);
   b54ae:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b54b0:	42bc      	cmp	r4, r7
   b54b2:	dd05      	ble.n	b54c0 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b54b4:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b54b6:	4645      	mov	r5, r8
   b54b8:	4690      	mov	r8, r2
  if (x0 > x1) {
   b54ba:	4622      	mov	r2, r4
   b54bc:	463c      	mov	r4, r7
   b54be:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b54c0:	1b3e      	subs	r6, r7, r4
   b54c2:	b2b2      	uxth	r2, r6
   b54c4:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b54c6:	eba8 0205 	sub.w	r2, r8, r5
   b54ca:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b54ce:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b54d2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b54d6:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b54da:	4545      	cmp	r5, r8
   b54dc:	bfb4      	ite	lt
   b54de:	2201      	movlt	r2, #1
   b54e0:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b54e4:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b54e6:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b54e8:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b54ea:	42bc      	cmp	r4, r7
   b54ec:	dc1c      	bgt.n	b5528 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b54ee:	f8db 2000 	ldr.w	r2, [fp]
   b54f2:	9303      	str	r3, [sp, #12]
    if (steep) {
   b54f4:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b54f6:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b54fa:	bfc7      	ittee	gt
   b54fc:	4629      	movgt	r1, r5
   b54fe:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5500:	462a      	movle	r2, r5
   b5502:	4621      	movle	r1, r4
   b5504:	4658      	mov	r0, fp
   b5506:	47c0      	blx	r8
    }
    err -= dy;
   b5508:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b550a:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b550c:	1ab6      	subs	r6, r6, r2
   b550e:	b2b1      	uxth	r1, r6
   b5510:	b236      	sxth	r6, r6
    if (err < 0) {
   b5512:	2e00      	cmp	r6, #0
   b5514:	da05      	bge.n	b5522 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5516:	9a02      	ldr	r2, [sp, #8]
   b5518:	4415      	add	r5, r2
      err += dx;
   b551a:	9a00      	ldr	r2, [sp, #0]
   b551c:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b551e:	b22d      	sxth	r5, r5
      err += dx;
   b5520:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b5522:	3401      	adds	r4, #1
   b5524:	b224      	sxth	r4, r4
   b5526:	e7e0      	b.n	b54ea <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5528:	b005      	add	sp, #20
   b552a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b552e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b552e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5532:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b5536:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5538:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b553c:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5540:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b5542:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5544:	4616      	mov	r6, r2
   b5546:	468a      	mov	sl, r1
   b5548:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b554a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b554c:	6823      	ldr	r3, [r4, #0]
   b554e:	f8cd 8000 	str.w	r8, [sp]
   b5552:	f109 32ff 	add.w	r2, r9, #4294967295
   b5556:	4432      	add	r2, r6
   b5558:	69df      	ldr	r7, [r3, #28]
   b555a:	4651      	mov	r1, sl
   b555c:	462b      	mov	r3, r5
   b555e:	4620      	mov	r0, r4
   b5560:	b212      	sxth	r2, r2
   b5562:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5564:	6823      	ldr	r3, [r4, #0]
   b5566:	f8cd 8000 	str.w	r8, [sp]
   b556a:	699f      	ldr	r7, [r3, #24]
   b556c:	4632      	mov	r2, r6
   b556e:	464b      	mov	r3, r9
   b5570:	4651      	mov	r1, sl
   b5572:	4620      	mov	r0, r4
   b5574:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b5576:	1e6b      	subs	r3, r5, #1
   b5578:	eb03 010a 	add.w	r1, r3, sl
   b557c:	6823      	ldr	r3, [r4, #0]
   b557e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5582:	699d      	ldr	r5, [r3, #24]
   b5584:	4632      	mov	r2, r6
   b5586:	464b      	mov	r3, r9
   b5588:	b209      	sxth	r1, r1
   b558a:	4620      	mov	r0, r4
   b558c:	46ac      	mov	ip, r5
}
   b558e:	b002      	add	sp, #8
   b5590:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5594:	4760      	bx	ip

000b5596 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5596:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5598:	3b01      	subs	r3, #1
   b559a:	4413      	add	r3, r2
   b559c:	6804      	ldr	r4, [r0, #0]
   b559e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b55a2:	9501      	str	r5, [sp, #4]
   b55a4:	b21b      	sxth	r3, r3
   b55a6:	9300      	str	r3, [sp, #0]
   b55a8:	6964      	ldr	r4, [r4, #20]
   b55aa:	460b      	mov	r3, r1
   b55ac:	47a0      	blx	r4
}
   b55ae:	b003      	add	sp, #12
   b55b0:	bd30      	pop	{r4, r5, pc}

000b55b2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b55b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b55b4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b55b8:	6804      	ldr	r4, [r0, #0]
   b55ba:	e9cd 2500 	strd	r2, r5, [sp]
   b55be:	3b01      	subs	r3, #1
   b55c0:	440b      	add	r3, r1
   b55c2:	6964      	ldr	r4, [r4, #20]
   b55c4:	b21b      	sxth	r3, r3
   b55c6:	47a0      	blx	r4
}
   b55c8:	b003      	add	sp, #12
   b55ca:	bd30      	pop	{r4, r5, pc}

000b55cc <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b55cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b55d0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b55d4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b55d8:	4605      	mov	r5, r0
   b55da:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b55dc:	460c      	mov	r4, r1
   b55de:	18ce      	adds	r6, r1, r3
   b55e0:	42b4      	cmp	r4, r6
   b55e2:	da0b      	bge.n	b55fc <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b55e4:	682b      	ldr	r3, [r5, #0]
   b55e6:	f8cd 8000 	str.w	r8, [sp]
   b55ea:	699f      	ldr	r7, [r3, #24]
   b55ec:	4621      	mov	r1, r4
   b55ee:	464b      	mov	r3, r9
   b55f0:	4652      	mov	r2, sl
   b55f2:	4628      	mov	r0, r5
   b55f4:	3401      	adds	r4, #1
   b55f6:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b55f8:	b224      	sxth	r4, r4
   b55fa:	e7f1      	b.n	b55e0 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b55fc:	b002      	add	sp, #8
   b55fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5602 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5602:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5604:	6802      	ldr	r2, [r0, #0]
   b5606:	9101      	str	r1, [sp, #4]
   b5608:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b560c:	9100      	str	r1, [sp, #0]
   b560e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5610:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5614:	2200      	movs	r2, #0
   b5616:	4611      	mov	r1, r2
   b5618:	47a0      	blx	r4
}
   b561a:	b002      	add	sp, #8
   b561c:	bd10      	pop	{r4, pc}

000b561e <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b561e:	4770      	bx	lr

000b5620 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5620:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5622:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5624:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5626:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b562a:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b562c:	4d05      	ldr	r5, [pc, #20]	; (b5644 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b562e:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5630:	2201      	movs	r2, #1
   b5632:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5634:	6005      	str	r5, [r0, #0]
   b5636:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5638:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b563a:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b563c:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b563e:	7682      	strb	r2, [r0, #26]
}
   b5640:	bd30      	pop	{r4, r5, pc}
   b5642:	bf00      	nop
   b5644:	000ba7f4 	.word	0x000ba7f4

000b5648 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b564c:	ed2d 8b02 	vpush	{d8}
   b5650:	b08d      	sub	sp, #52	; 0x34
   b5652:	4607      	mov	r7, r0
   b5654:	9104      	str	r1, [sp, #16]
   b5656:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b565a:	9105      	str	r1, [sp, #20]
   b565c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5660:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5662:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5666:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5668:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b566c:	4281      	cmp	r1, r0
   b566e:	dd52      	ble.n	b5716 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5670:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5674:	4291      	cmp	r1, r2
   b5676:	dd4e      	ble.n	b5716 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5678:	2106      	movs	r1, #6
   b567a:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b567e:	2c00      	cmp	r4, #0
   b5680:	dd49      	ble.n	b5716 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5682:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5686:	2c00      	cmp	r4, #0
   b5688:	dd45      	ble.n	b5716 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b568a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b568e:	930b      	str	r3, [sp, #44]	; 0x2c
   b5690:	b293      	uxth	r3, r2
   b5692:	9307      	str	r3, [sp, #28]
   b5694:	3308      	adds	r3, #8
   b5696:	b29b      	uxth	r3, r3
   b5698:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b569a:	2400      	movs	r4, #0
   b569c:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b569e:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b56a0:	bf1c      	itt	ne
   b56a2:	4b2c      	ldrne	r3, [pc, #176]	; (b5754 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b56a4:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b56a6:	9e07      	ldr	r6, [sp, #28]
   b56a8:	bf16      	itet	ne
   b56aa:	191b      	addne	r3, r3, r4
      line = 0x0;
   b56ac:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b56ae:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b56b0:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b56b2:	9a04      	ldr	r2, [sp, #16]
   b56b4:	b2ab      	uxth	r3, r5
   b56b6:	930a      	str	r3, [sp, #40]	; 0x28
   b56b8:	fb04 f305 	mul.w	r3, r4, r5
   b56bc:	fa13 f382 	uxtah	r3, r3, r2
   b56c0:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b56c2:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b56c6:	ee08 3a10 	vmov	s16, r3
   b56ca:	46b0      	mov	r8, r6
   b56cc:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b56d0:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b56d4:	9b03      	ldr	r3, [sp, #12]
   b56d6:	07db      	lsls	r3, r3, #31
   b56d8:	d52f      	bpl.n	b573a <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b56da:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b56dc:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b56de:	d11f      	bne.n	b5720 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b56e0:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b56e4:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b56e6:	b232      	sxth	r2, r6
   b56e8:	4651      	mov	r1, sl
   b56ea:	4638      	mov	r0, r7
   b56ec:	47d8      	blx	fp
      line >>= 1;
   b56ee:	9b03      	ldr	r3, [sp, #12]
   b56f0:	085b      	lsrs	r3, r3, #1
   b56f2:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b56f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b56f6:	3601      	adds	r6, #1
   b56f8:	4498      	add	r8, r3
   b56fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b56fc:	b2b6      	uxth	r6, r6
   b56fe:	42b3      	cmp	r3, r6
   b5700:	fa1f f888 	uxth.w	r8, r8
   b5704:	d1e6      	bne.n	b56d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5706:	9b08      	ldr	r3, [sp, #32]
   b5708:	3b01      	subs	r3, #1
   b570a:	3401      	adds	r4, #1
   b570c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5710:	b264      	sxtb	r4, r4
   b5712:	9308      	str	r3, [sp, #32]
   b5714:	d1c3      	bne.n	b569e <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5716:	b00d      	add	sp, #52	; 0x34
   b5718:	ecbd 8b02 	vpop	{d8}
   b571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5720:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5722:	e9cd 9200 	strd	r9, r2, [sp]
   b5726:	ee18 1a10 	vmov	r1, s16
   b572a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b572e:	fa0f f288 	sxth.w	r2, r8
   b5732:	464b      	mov	r3, r9
   b5734:	4638      	mov	r0, r7
   b5736:	47d8      	blx	fp
   b5738:	e7d9      	b.n	b56ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b573a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b573e:	4293      	cmp	r3, r2
   b5740:	d0d5      	beq.n	b56ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5742:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5744:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5746:	d103      	bne.n	b5750 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5748:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b574c:	9b06      	ldr	r3, [sp, #24]
   b574e:	e7ca      	b.n	b56e6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5750:	9a06      	ldr	r2, [sp, #24]
   b5752:	e7e6      	b.n	b5722 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5754:	000ba2f0 	.word	0x000ba2f0

000b5758 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5758:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b575a:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b575c:	b085      	sub	sp, #20
   b575e:	4604      	mov	r4, r0
  if (c == '\n') {
   b5760:	d107      	bne.n	b5772 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5762:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5764:	8a63      	ldrh	r3, [r4, #18]
   b5766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b576a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b576c:	2300      	movs	r3, #0
   b576e:	8223      	strh	r3, [r4, #16]
   b5770:	e021      	b.n	b57b6 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5772:	290d      	cmp	r1, #13
   b5774:	d01f      	beq.n	b57b6 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5776:	7e03      	ldrb	r3, [r0, #24]
   b5778:	9302      	str	r3, [sp, #8]
   b577a:	8ac3      	ldrh	r3, [r0, #22]
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	8a83      	ldrh	r3, [r0, #20]
   b5780:	9300      	str	r3, [sp, #0]
   b5782:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5786:	460b      	mov	r3, r1
   b5788:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b578c:	f7ff ff5c 	bl	b5648 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5790:	7e20      	ldrb	r0, [r4, #24]
   b5792:	8a23      	ldrh	r3, [r4, #16]
   b5794:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5798:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b579c:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b579e:	b21b      	sxth	r3, r3
   b57a0:	4602      	mov	r2, r0
   b57a2:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b57a4:	b139      	cbz	r1, b57b6 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b57a6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b57aa:	f06f 0505 	mvn.w	r5, #5
   b57ae:	fb05 1100 	mla	r1, r5, r0, r1
   b57b2:	428b      	cmp	r3, r1
   b57b4:	dcd6      	bgt.n	b5764 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b57b6:	2001      	movs	r0, #1
   b57b8:	b005      	add	sp, #20
   b57ba:	bd30      	pop	{r4, r5, pc}

000b57bc <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b57bc:	2901      	cmp	r1, #1
   b57be:	bf38      	it	cc
   b57c0:	2101      	movcc	r1, #1
   b57c2:	7601      	strb	r1, [r0, #24]
}
   b57c4:	4770      	bx	lr

000b57c6 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b57c6:	82c1      	strh	r1, [r0, #22]
   b57c8:	8281      	strh	r1, [r0, #20]
}
   b57ca:	4770      	bx	lr

000b57cc <_ZN12Adafruit_GFX11getRotationEv>:
}
   b57cc:	7e40      	ldrb	r0, [r0, #25]
   b57ce:	4770      	bx	lr

000b57d0 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b57d0:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b57d4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b57d8:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b57da:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b57dc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b57e0:	bf59      	ittee	pl
   b57e2:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b57e4:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b57e6:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b57e8:	81c3      	strhmi	r3, [r0, #14]
}
   b57ea:	4770      	bx	lr

000b57ec <_ZN12Adafruit_GFX5widthEv>:
}
   b57ec:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b57f0:	4770      	bx	lr

000b57f2 <_ZN12Adafruit_GFX6heightEv>:
}
   b57f2:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b57f6:	4770      	bx	lr

000b57f8 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b57f8:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b57fa:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b57fe:	6803      	ldr	r3, [r0, #0]
   b5800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5802:	4798      	blx	r3
}
   b5804:	3800      	subs	r0, #0
   b5806:	bf18      	it	ne
   b5808:	2001      	movne	r0, #1
   b580a:	bd08      	pop	{r3, pc}

000b580c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b580e:	4606      	mov	r6, r0
   b5810:	460f      	mov	r7, r1
   b5812:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b5814:	b1c4      	cbz	r4, b5848 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b5816:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b581a:	6803      	ldr	r3, [r0, #0]
   b581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b581e:	4798      	blx	r3
   b5820:	b908      	cbnz	r0, b5826 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b5822:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b5824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b5826:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b582a:	2cfa      	cmp	r4, #250	; 0xfa
   b582c:	6803      	ldr	r3, [r0, #0]
   b582e:	4625      	mov	r5, r4
   b5830:	bfa8      	it	ge
   b5832:	25fa      	movge	r5, #250	; 0xfa
   b5834:	68db      	ldr	r3, [r3, #12]
   b5836:	462a      	mov	r2, r5
   b5838:	4639      	mov	r1, r7
   b583a:	4798      	blx	r3
   b583c:	b283      	uxth	r3, r0
      len -= ret;
   b583e:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b5840:	429d      	cmp	r5, r3
      len -= ret;
   b5842:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b5844:	d0e6      	beq.n	b5814 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b5846:	e7ec      	b.n	b5822 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b5848:	2001      	movs	r0, #1
   b584a:	e7eb      	b.n	b5824 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b584c <_ZN19Adafruit_MQTT_SPARKD1Ev>:
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b584c:	4770      	bx	lr

000b584e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b584e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5852:	4606      	mov	r6, r0
   b5854:	4688      	mov	r8, r1
   b5856:	4691      	mov	r9, r2
   b5858:	461f      	mov	r7, r3
   b585a:	461d      	mov	r5, r3
  uint16_t len = 0;
   b585c:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b585e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b5862:	6803      	ldr	r3, [r0, #0]
   b5864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5866:	4798      	blx	r3
   b5868:	b1d0      	cbz	r0, b58a0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b586a:	2d00      	cmp	r5, #0
   b586c:	db18      	blt.n	b58a0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b586e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b5872:	6803      	ldr	r3, [r0, #0]
   b5874:	691b      	ldr	r3, [r3, #16]
   b5876:	4798      	blx	r3
   b5878:	b160      	cbz	r0, b5894 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b587a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b587e:	6803      	ldr	r3, [r0, #0]
   b5880:	695b      	ldr	r3, [r3, #20]
   b5882:	4798      	blx	r3
   b5884:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b5888:	3401      	adds	r4, #1
   b588a:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b588c:	454c      	cmp	r4, r9
   b588e:	d007      	beq.n	b58a0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b5890:	463d      	mov	r5, r7
   b5892:	e7ec      	b.n	b586e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b5894:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b5896:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b5898:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b589a:	f000 ff43 	bl	b6724 <delay>
  while (client->connected() && (timeout >= 0)) {
   b589e:	e7de      	b.n	b585e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b58a0:	4620      	mov	r0, r4
   b58a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b58a6 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b58a6:	b570      	push	{r4, r5, r6, lr}
   b58a8:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b58aa:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b58ae:	2296      	movs	r2, #150	; 0x96
   b58b0:	2100      	movs	r1, #0
   b58b2:	4628      	mov	r0, r5
   b58b4:	f002 fc9d 	bl	b81f2 <memset>
  strcpy((char *)buffer, servername);
   b58b8:	6861      	ldr	r1, [r4, #4]
   b58ba:	4628      	mov	r0, r5
   b58bc:	f002 fcda 	bl	b8274 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b58c0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b58c4:	8922      	ldrh	r2, [r4, #8]
   b58c6:	6803      	ldr	r3, [r0, #0]
   b58c8:	4629      	mov	r1, r5
   b58ca:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b58cc:	2300      	movs	r3, #0
   b58ce:	47b0      	blx	r6
}
   b58d0:	3800      	subs	r0, #0
   b58d2:	bf18      	it	ne
   b58d4:	2001      	movne	r0, #1
   b58d6:	bd70      	pop	{r4, r5, r6, pc}

000b58d8 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b58d8:	b510      	push	{r4, lr}
   b58da:	21d4      	movs	r1, #212	; 0xd4
   b58dc:	4604      	mov	r4, r0
   b58de:	f7fe fbde 	bl	b409e <_ZdlPvj>
   b58e2:	4620      	mov	r0, r4
   b58e4:	bd10      	pop	{r4, pc}

000b58e6 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b58e6:	b510      	push	{r4, lr}
   b58e8:	4604      	mov	r4, r0
  if (client->connected()) {
   b58ea:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b58ee:	6803      	ldr	r3, [r0, #0]
   b58f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b58f2:	4798      	blx	r3
   b58f4:	b120      	cbz	r0, b5900 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b58f6:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b58fa:	6803      	ldr	r3, [r0, #0]
   b58fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b58fe:	4798      	blx	r3
}
   b5900:	2001      	movs	r0, #1
   b5902:	bd10      	pop	{r4, pc}

000b5904 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b5904:	b513      	push	{r0, r1, r4, lr}
   b5906:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b5908:	4608      	mov	r0, r1
   b590a:	9101      	str	r1, [sp, #4]
   b590c:	f002 fcba 	bl	b8284 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b5910:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b5914:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b5916:	7060      	strb	r0, [r4, #1]
   b5918:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b591a:	b284      	uxth	r4, r0
   b591c:	9901      	ldr	r1, [sp, #4]
   b591e:	4622      	mov	r2, r4
   b5920:	4618      	mov	r0, r3
   b5922:	f002 fced 	bl	b8300 <strncpy>
  return p+len;
}
   b5926:	4420      	add	r0, r4
   b5928:	b002      	add	sp, #8
   b592a:	bd10      	pop	{r4, pc}

000b592c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b592c:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b592e:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b5930:	4a0a      	ldr	r2, [pc, #40]	; (b595c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b5932:	4d0b      	ldr	r5, [pc, #44]	; (b5960 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b5934:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b5938:	9b03      	ldr	r3, [sp, #12]
   b593a:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b593c:	2300      	movs	r3, #0
  servername = server;
   b593e:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b5942:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b5946:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b594a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b594e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b5952:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b5954:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b5958:	bd30      	pop	{r4, r5, pc}
   b595a:	bf00      	nop
   b595c:	000ba16d 	.word	0x000ba16d
   b5960:	000ba868 	.word	0x000ba868

000b5964 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b5964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5968:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b596a:	6802      	ldr	r2, [r0, #0]
   b596c:	b21b      	sxth	r3, r3
   b596e:	6997      	ldr	r7, [r2, #24]
   b5970:	9301      	str	r3, [sp, #4]
   b5972:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b5974:	4605      	mov	r5, r0
   b5976:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b5978:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b597a:	b2c7      	uxtb	r7, r0
   b597c:	2f01      	cmp	r7, #1
   b597e:	9b01      	ldr	r3, [sp, #4]
   b5980:	d003      	beq.n	b598a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b5982:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b5984:	b003      	add	sp, #12
   b5986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b598a:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b598e:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b5992:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b5996:	682a      	ldr	r2, [r5, #0]
   b5998:	9301      	str	r3, [sp, #4]
   b599a:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b599e:	4641      	mov	r1, r8
   b59a0:	2201      	movs	r2, #1
   b59a2:	4628      	mov	r0, r5
   b59a4:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b59a6:	b2c0      	uxtb	r0, r0
   b59a8:	2801      	cmp	r0, #1
   b59aa:	d1ea      	bne.n	b5982 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b59ac:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b59b0:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b59b4:	45c2      	cmp	sl, r8
    value += intermediate;
   b59b6:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b59ba:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b59be:	d0e0      	beq.n	b5982 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b59c0:	f012 0f80 	tst.w	r2, #128	; 0x80
   b59c4:	9b01      	ldr	r3, [sp, #4]
   b59c6:	d1e6      	bne.n	b5996 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b59c8:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b59cc:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b59ce:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b59d0:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b59d2:	3c01      	subs	r4, #1
   b59d4:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b59d6:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b59da:	bf3d      	ittte	cc
   b59dc:	f106 32ff 	addcc.w	r2, r6, #4294967295
   b59e0:	1bd2      	subcc	r2, r2, r7
   b59e2:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b59e4:	fa1f f289 	uxthcs.w	r2, r9
   b59e8:	4641      	mov	r1, r8
   b59ea:	4628      	mov	r0, r5
   b59ec:	47d0      	blx	sl
   b59ee:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b59f0:	4438      	add	r0, r7
   b59f2:	b280      	uxth	r0, r0
   b59f4:	e7c6      	b.n	b5984 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b59f8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b59f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b59fc:	f8df 8030 	ldr.w	r8, [pc, #48]	; b5a30 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b5a00:	4605      	mov	r5, r0
   b5a02:	460c      	mov	r4, r1
   b5a04:	4616      	mov	r6, r2
   b5a06:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b5a08:	463b      	mov	r3, r7
   b5a0a:	2296      	movs	r2, #150	; 0x96
   b5a0c:	4621      	mov	r1, r4
   b5a0e:	4628      	mov	r0, r5
   b5a10:	f7ff ffa8 	bl	b5964 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b5a14:	b148      	cbz	r0, b5a2a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b5a16:	7823      	ldrb	r3, [r4, #0]
   b5a18:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b5a1c:	d005      	beq.n	b5a2a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b5a1e:	f001 f82d 	bl	b6a7c <_Z16_fetch_usbserialv>
   b5a22:	4641      	mov	r1, r8
   b5a24:	f000 fe13 	bl	b664e <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b5a28:	e7ee      	b.n	b5a08 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b5a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5a2e:	bf00      	nop
   b5a30:	000ba848 	.word	0x000ba848

000b5a34 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b5a34:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   b5a38:	b530      	push	{r4, r5, lr}
   b5a3a:	4613      	mov	r3, r2
   b5a3c:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   b5a40:	f853 5b04 	ldr.w	r5, [r3], #4
   b5a44:	428d      	cmp	r5, r1
   b5a46:	d009      	beq.n	b5a5c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b5a48:	42a3      	cmp	r3, r4
   b5a4a:	d1f9      	bne.n	b5a40 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   b5a4c:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   b5a4e:	f852 4b04 	ldr.w	r4, [r2], #4
   b5a52:	b92c      	cbnz	r4, b5a60 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   b5a54:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b5a58:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   b5a5c:	2001      	movs	r0, #1
   b5a5e:	e003      	b.n	b5a68 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b5a60:	3301      	adds	r3, #1
   b5a62:	2b05      	cmp	r3, #5
   b5a64:	d1f3      	bne.n	b5a4e <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   b5a66:	2000      	movs	r0, #0
}
   b5a68:	bd30      	pop	{r4, r5, pc}

000b5a6a <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b5a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b5a6e:	f100 0922 	add.w	r9, r0, #34	; 0x22
   b5a72:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b5a74:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b5a76:	2296      	movs	r2, #150	; 0x96
   b5a78:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b5a7a:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b5a7c:	f7ff ff72 	bl	b5964 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   b5a80:	4606      	mov	r6, r0
   b5a82:	b1f0      	cbz	r0, b5ac2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   b5a84:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   b5a88:	9700      	str	r7, [sp, #0]
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b5a8a:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   b5a8e:	f04f 0800 	mov.w	r8, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b5a92:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   b5a96:	f85a 4b04 	ldr.w	r4, [sl], #4
   b5a9a:	b16c      	cbz	r4, b5ab8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   b5a9c:	6821      	ldr	r1, [r4, #0]
   b5a9e:	9101      	str	r1, [sp, #4]
   b5aa0:	4608      	mov	r0, r1
   b5aa2:	f002 fbef 	bl	b8284 <strlen>
   b5aa6:	42b8      	cmp	r0, r7
   b5aa8:	d106      	bne.n	b5ab8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b5aaa:	9901      	ldr	r1, [sp, #4]
   b5aac:	463a      	mov	r2, r7
   b5aae:	4658      	mov	r0, fp
   b5ab0:	f002 fbf0 	bl	b8294 <strncasecmp>
   b5ab4:	2800      	cmp	r0, #0
   b5ab6:	d048      	beq.n	b5b4a <_ZN13Adafruit_MQTT16readSubscriptionEs+0xe0>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b5ab8:	f108 0801 	add.w	r8, r8, #1
   b5abc:	f1b8 0f05 	cmp.w	r8, #5
   b5ac0:	d1e9      	bne.n	b5a96 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   b5ac2:	2000      	movs	r0, #0
   b5ac4:	e03e      	b.n	b5b44 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   b5ac6:	19ea      	adds	r2, r5, r7
   b5ac8:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   b5acc:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   b5ad0:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   b5ad4:	2214      	movs	r2, #20
   b5ad6:	2100      	movs	r1, #0
   b5ad8:	1d60      	adds	r0, r4, #5
   b5ada:	f002 fb8a 	bl	b81f2 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   b5ade:	9b00      	ldr	r3, [sp, #0]
   b5ae0:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   b5ae4:	34fc      	adds	r4, #252	; 0xfc
   b5ae6:	4426      	add	r6, r4
   b5ae8:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   b5aec:	eba6 060b 	sub.w	r6, r6, fp
   b5af0:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b5af2:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b5af4:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   b5af8:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b5afc:	bf28      	it	cs
   b5afe:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b5b00:	4459      	add	r1, fp
   b5b02:	4632      	mov	r2, r6
   b5b04:	4449      	add	r1, r9
   b5b06:	3005      	adds	r0, #5
   b5b08:	f002 fb59 	bl	b81be <memmove>
  subscriptions[i]->datalen = datalen;
   b5b0c:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   b5b10:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   b5b12:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   b5b16:	f003 0306 	and.w	r3, r3, #6
   b5b1a:	2b02      	cmp	r3, #2
   b5b1c:	d110      	bne.n	b5b40 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd6>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   b5b1e:	f88d 300d 	strb.w	r3, [sp, #13]
  packet[2] = packetid >> 8;
   b5b22:	ea4f 231a 	mov.w	r3, sl, lsr #8
   b5b26:	f88d 300e 	strb.w	r3, [sp, #14]
    if (!sendPacket(ackpacket, len))
   b5b2a:	682b      	ldr	r3, [r5, #0]
  packet[3] = packetid;
   b5b2c:	f88d a00f 	strb.w	sl, [sp, #15]
  packet[0] = MQTT_CTRL_PUBACK << 4;
   b5b30:	2240      	movs	r2, #64	; 0x40
   b5b32:	f88d 200c 	strb.w	r2, [sp, #12]
    if (!sendPacket(ackpacket, len))
   b5b36:	695b      	ldr	r3, [r3, #20]
   b5b38:	2204      	movs	r2, #4
   b5b3a:	a903      	add	r1, sp, #12
   b5b3c:	4628      	mov	r0, r5
   b5b3e:	4798      	blx	r3
  return subscriptions[i];
   b5b40:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   b5b44:	b005      	add	sp, #20
   b5b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   b5b4a:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   b5b4e:	f00b 0b06 	and.w	fp, fp, #6
   b5b52:	f1bb 0f02 	cmp.w	fp, #2
   b5b56:	d0b6      	beq.n	b5ac6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   b5b58:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   b5b5a:	4683      	mov	fp, r0
   b5b5c:	e7ba      	b.n	b5ad4 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>
	...

000b5b60 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b5b60:	b538      	push	{r3, r4, r5, lr}
   b5b62:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b5b64:	4608      	mov	r0, r1
   b5b66:	2310      	movs	r3, #16
   b5b68:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b5b6c:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b5b6e:	4929      	ldr	r1, [pc, #164]	; (b5c14 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b5b70:	f7ff fec8 	bl	b5904 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b5b74:	2304      	movs	r3, #4
   b5b76:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b5b78:	2302      	movs	r3, #2
   b5b7a:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b5b7c:	69ab      	ldr	r3, [r5, #24]
   b5b7e:	b18b      	cbz	r3, b5ba4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b5b80:	781b      	ldrb	r3, [r3, #0]
   b5b82:	b17b      	cbz	r3, b5ba4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b5b84:	2306      	movs	r3, #6
   b5b86:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b5b88:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5b8c:	2b01      	cmp	r3, #1
   b5b8e:	d139      	bne.n	b5c04 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b5b90:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b5b92:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b5b94:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b5b98:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b5b9a:	bf02      	ittt	eq
   b5b9c:	7843      	ldrbeq	r3, [r0, #1]
   b5b9e:	f043 0320 	orreq.w	r3, r3, #32
   b5ba2:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b5ba4:	692b      	ldr	r3, [r5, #16]
   b5ba6:	781b      	ldrb	r3, [r3, #0]
   b5ba8:	b11b      	cbz	r3, b5bb2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b5baa:	7843      	ldrb	r3, [r0, #1]
   b5bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b5bb0:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b5bb2:	696b      	ldr	r3, [r5, #20]
   b5bb4:	781b      	ldrb	r3, [r3, #0]
   b5bb6:	b11b      	cbz	r3, b5bc0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b5bb8:	7843      	ldrb	r3, [r0, #1]
   b5bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b5bbe:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b5bc0:	2301      	movs	r3, #1
   b5bc2:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b5bc4:	232c      	movs	r3, #44	; 0x2c
   b5bc6:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b5bc8:	68e9      	ldr	r1, [r5, #12]
   b5bca:	780b      	ldrb	r3, [r1, #0]
   b5bcc:	b1f3      	cbz	r3, b5c0c <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b5bce:	3004      	adds	r0, #4
   b5bd0:	f7ff fe98 	bl	b5904 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b5bd4:	69a9      	ldr	r1, [r5, #24]
   b5bd6:	b131      	cbz	r1, b5be6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b5bd8:	780b      	ldrb	r3, [r1, #0]
   b5bda:	b123      	cbz	r3, b5be6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b5bdc:	f7ff fe92 	bl	b5904 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b5be0:	69e9      	ldr	r1, [r5, #28]
   b5be2:	f7ff fe8f 	bl	b5904 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b5be6:	6929      	ldr	r1, [r5, #16]
   b5be8:	780b      	ldrb	r3, [r1, #0]
   b5bea:	b10b      	cbz	r3, b5bf0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b5bec:	f7ff fe8a 	bl	b5904 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b5bf0:	6969      	ldr	r1, [r5, #20]
   b5bf2:	780b      	ldrb	r3, [r1, #0]
   b5bf4:	b10b      	cbz	r3, b5bfa <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b5bf6:	f7ff fe85 	bl	b5904 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b5bfa:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b5bfc:	b2c0      	uxtb	r0, r0
   b5bfe:	1e83      	subs	r3, r0, #2
   b5c00:	7063      	strb	r3, [r4, #1]
}
   b5c02:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b5c04:	2b02      	cmp	r3, #2
   b5c06:	d1c5      	bne.n	b5b94 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b5c08:	231e      	movs	r3, #30
   b5c0a:	e7c2      	b.n	b5b92 <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b5c0c:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b5c0e:	7143      	strb	r3, [r0, #5]
      p++;
   b5c10:	3006      	adds	r0, #6
   b5c12:	e7df      	b.n	b5bd4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b5c14:	000ba859 	.word	0x000ba859

000b5c18 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b5c18:	b538      	push	{r3, r4, r5, lr}
   b5c1a:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b5c1c:	2382      	movs	r3, #130	; 0x82
   b5c1e:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b5c20:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b5c24:	0a1b      	lsrs	r3, r3, #8
   b5c26:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b5c28:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b5c2c:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b5c2e:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b5c32:	460c      	mov	r4, r1
  packet_id_counter++;
   b5c34:	3301      	adds	r3, #1
   b5c36:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b5c3a:	4611      	mov	r1, r2
   b5c3c:	1d20      	adds	r0, r4, #4
   b5c3e:	f7ff fe61 	bl	b5904 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b5c42:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b5c46:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b5c48:	b2c0      	uxtb	r0, r0
   b5c4a:	1e83      	subs	r3, r0, #2
   b5c4c:	7063      	strb	r3, [r4, #1]
}
   b5c4e:	bd38      	pop	{r3, r4, r5, pc}

000b5c50 <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b5c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b5c54:	6803      	ldr	r3, [r0, #0]
   b5c56:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b5c58:	4604      	mov	r4, r0
  if (!connectServer())
   b5c5a:	4798      	blx	r3
   b5c5c:	2800      	cmp	r0, #0
   b5c5e:	d04b      	beq.n	b5cf8 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b5c60:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b5c64:	4629      	mov	r1, r5
   b5c66:	4620      	mov	r0, r4
   b5c68:	f7ff ff7a 	bl	b5b60 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b5c6c:	6823      	ldr	r3, [r4, #0]
   b5c6e:	b282      	uxth	r2, r0
   b5c70:	695b      	ldr	r3, [r3, #20]
   b5c72:	4629      	mov	r1, r5
   b5c74:	4620      	mov	r0, r4
   b5c76:	4798      	blx	r3
   b5c78:	2800      	cmp	r0, #0
   b5c7a:	d03d      	beq.n	b5cf8 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b5c7c:	f241 7370 	movw	r3, #6000	; 0x1770
   b5c80:	2296      	movs	r2, #150	; 0x96
   b5c82:	4629      	mov	r1, r5
   b5c84:	4620      	mov	r0, r4
   b5c86:	f7ff fe6d 	bl	b5964 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b5c8a:	b2c0      	uxtb	r0, r0
   b5c8c:	2804      	cmp	r0, #4
   b5c8e:	d133      	bne.n	b5cf8 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b5c90:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5c92:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b5c96:	d12f      	bne.n	b5cf8 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b5c98:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b5c9c:	b110      	cbz	r0, b5ca4 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b5c9e:	b240      	sxtb	r0, r0
}
   b5ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5ca4:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b5ca8:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b5cac:	f857 3b04 	ldr.w	r3, [r7], #4
   b5cb0:	b1f3      	cbz	r3, b5cf0 <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b5cb2:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b5cb4:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b5cb8:	4629      	mov	r1, r5
   b5cba:	7913      	ldrb	r3, [r2, #4]
   b5cbc:	6812      	ldr	r2, [r2, #0]
   b5cbe:	4620      	mov	r0, r4
   b5cc0:	f7ff ffaa 	bl	b5c18 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b5cc4:	6823      	ldr	r3, [r4, #0]
   b5cc6:	b282      	uxth	r2, r0
   b5cc8:	695b      	ldr	r3, [r3, #20]
   b5cca:	4629      	mov	r1, r5
   b5ccc:	4620      	mov	r0, r4
   b5cce:	4798      	blx	r3
   b5cd0:	b190      	cbz	r0, b5cf8 <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b5cd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b5cd6:	2209      	movs	r2, #9
   b5cd8:	4629      	mov	r1, r5
   b5cda:	4620      	mov	r0, r4
   b5cdc:	f7ff fe8c 	bl	b59f8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b5ce0:	b930      	cbnz	r0, b5cf0 <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b5ce2:	3e01      	subs	r6, #1
   b5ce4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b5ce8:	d1e4      	bne.n	b5cb4 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b5cea:	f06f 0001 	mvn.w	r0, #1
   b5cee:	e7d7      	b.n	b5ca0 <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b5cf0:	45b8      	cmp	r8, r7
   b5cf2:	d1db      	bne.n	b5cac <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b5cf4:	2000      	movs	r0, #0
   b5cf6:	e7d3      	b.n	b5ca0 <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b5cf8:	f04f 30ff 	mov.w	r0, #4294967295
   b5cfc:	e7d0      	b.n	b5ca0 <_ZN13Adafruit_MQTT7connectEv+0x50>

000b5cfe <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b5cfe:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b5d00:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b5d04:	7203      	strb	r3, [r0, #8]
}
   b5d06:	bd10      	pop	{r4, pc}

000b5d08 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b5d08:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b5d0a:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b5d0c:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b5d0e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b5d12:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b5d16:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b5d18:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b5d1a:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b5d1c:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b5d1e:	6303      	str	r3, [r0, #48]	; 0x30
}
   b5d20:	bd10      	pop	{r4, pc}
	...

000b5d24 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5d24:	b508      	push	{r3, lr}
   b5d26:	4b02      	ldr	r3, [pc, #8]	; (b5d30 <netdb_freeaddrinfo+0xc>)
   b5d28:	681b      	ldr	r3, [r3, #0]
   b5d2a:	689b      	ldr	r3, [r3, #8]
   b5d2c:	9301      	str	r3, [sp, #4]
   b5d2e:	bd08      	pop	{r3, pc}
   b5d30:	00030268 	.word	0x00030268

000b5d34 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5d34:	b508      	push	{r3, lr}
   b5d36:	4b02      	ldr	r3, [pc, #8]	; (b5d40 <netdb_getaddrinfo+0xc>)
   b5d38:	681b      	ldr	r3, [r3, #0]
   b5d3a:	68db      	ldr	r3, [r3, #12]
   b5d3c:	9301      	str	r3, [sp, #4]
   b5d3e:	bd08      	pop	{r3, pc}
   b5d40:	00030268 	.word	0x00030268

000b5d44 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5d44:	b508      	push	{r3, lr}
   b5d46:	4b02      	ldr	r3, [pc, #8]	; (b5d50 <HAL_Pin_Mode+0xc>)
   b5d48:	681b      	ldr	r3, [r3, #0]
   b5d4a:	689b      	ldr	r3, [r3, #8]
   b5d4c:	9301      	str	r3, [sp, #4]
   b5d4e:	bd08      	pop	{r3, pc}
   b5d50:	0003022c 	.word	0x0003022c

000b5d54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5d54:	b508      	push	{r3, lr}
   b5d56:	4b02      	ldr	r3, [pc, #8]	; (b5d60 <HAL_Get_Pin_Mode+0xc>)
   b5d58:	681b      	ldr	r3, [r3, #0]
   b5d5a:	68db      	ldr	r3, [r3, #12]
   b5d5c:	9301      	str	r3, [sp, #4]
   b5d5e:	bd08      	pop	{r3, pc}
   b5d60:	0003022c 	.word	0x0003022c

000b5d64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5d64:	b508      	push	{r3, lr}
   b5d66:	4b02      	ldr	r3, [pc, #8]	; (b5d70 <HAL_GPIO_Write+0xc>)
   b5d68:	681b      	ldr	r3, [r3, #0]
   b5d6a:	691b      	ldr	r3, [r3, #16]
   b5d6c:	9301      	str	r3, [sp, #4]
   b5d6e:	bd08      	pop	{r3, pc}
   b5d70:	0003022c 	.word	0x0003022c

000b5d74 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5d74:	b508      	push	{r3, lr}
   b5d76:	4b02      	ldr	r3, [pc, #8]	; (b5d80 <HAL_GPIO_Read+0xc>)
   b5d78:	681b      	ldr	r3, [r3, #0]
   b5d7a:	695b      	ldr	r3, [r3, #20]
   b5d7c:	9301      	str	r3, [sp, #4]
   b5d7e:	bd08      	pop	{r3, pc}
   b5d80:	0003022c 	.word	0x0003022c

000b5d84 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5d84:	b508      	push	{r3, lr}
   b5d86:	4b02      	ldr	r3, [pc, #8]	; (b5d90 <if_index_to_name+0xc>)
   b5d88:	681b      	ldr	r3, [r3, #0]
   b5d8a:	695b      	ldr	r3, [r3, #20]
   b5d8c:	9301      	str	r3, [sp, #4]
   b5d8e:	bd08      	pop	{r3, pc}
   b5d90:	0003026c 	.word	0x0003026c

000b5d94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d94:	b508      	push	{r3, lr}
   b5d96:	4b02      	ldr	r3, [pc, #8]	; (b5da0 <HAL_RNG_GetRandomNumber+0xc>)
   b5d98:	681b      	ldr	r3, [r3, #0]
   b5d9a:	685b      	ldr	r3, [r3, #4]
   b5d9c:	9301      	str	r3, [sp, #4]
   b5d9e:	bd08      	pop	{r3, pc}
   b5da0:	00030218 	.word	0x00030218

000b5da4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5da4:	b508      	push	{r3, lr}
   b5da6:	4b02      	ldr	r3, [pc, #8]	; (b5db0 <HAL_Delay_Microseconds+0xc>)
   b5da8:	681b      	ldr	r3, [r3, #0]
   b5daa:	68db      	ldr	r3, [r3, #12]
   b5dac:	9301      	str	r3, [sp, #4]
   b5dae:	bd08      	pop	{r3, pc}
   b5db0:	00030218 	.word	0x00030218

000b5db4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5db4:	b508      	push	{r3, lr}
   b5db6:	4b02      	ldr	r3, [pc, #8]	; (b5dc0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5db8:	681b      	ldr	r3, [r3, #0]
   b5dba:	691b      	ldr	r3, [r3, #16]
   b5dbc:	9301      	str	r3, [sp, #4]
   b5dbe:	bd08      	pop	{r3, pc}
   b5dc0:	00030218 	.word	0x00030218

000b5dc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5dc4:	b508      	push	{r3, lr}
   b5dc6:	4b02      	ldr	r3, [pc, #8]	; (b5dd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5dc8:	681b      	ldr	r3, [r3, #0]
   b5dca:	695b      	ldr	r3, [r3, #20]
   b5dcc:	9301      	str	r3, [sp, #4]
   b5dce:	bd08      	pop	{r3, pc}
   b5dd0:	00030218 	.word	0x00030218

000b5dd4 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5dd4:	b508      	push	{r3, lr}
   b5dd6:	4b02      	ldr	r3, [pc, #8]	; (b5de0 <hal_timer_millis+0xc>)
   b5dd8:	681b      	ldr	r3, [r3, #0]
   b5dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5ddc:	9301      	str	r3, [sp, #4]
   b5dde:	bd08      	pop	{r3, pc}
   b5de0:	00030218 	.word	0x00030218

000b5de4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5de4:	b508      	push	{r3, lr}
   b5de6:	4b02      	ldr	r3, [pc, #8]	; (b5df0 <os_mutex_recursive_create+0xc>)
   b5de8:	681b      	ldr	r3, [r3, #0]
   b5dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dec:	9301      	str	r3, [sp, #4]
   b5dee:	bd08      	pop	{r3, pc}
   b5df0:	00030248 	.word	0x00030248

000b5df4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5df4:	b508      	push	{r3, lr}
   b5df6:	4b02      	ldr	r3, [pc, #8]	; (b5e00 <inet_inet_ntop+0xc>)
   b5df8:	681b      	ldr	r3, [r3, #0]
   b5dfa:	695b      	ldr	r3, [r3, #20]
   b5dfc:	9301      	str	r3, [sp, #4]
   b5dfe:	bd08      	pop	{r3, pc}
   b5e00:	00030264 	.word	0x00030264

000b5e04 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5e04:	b508      	push	{r3, lr}
   b5e06:	4b02      	ldr	r3, [pc, #8]	; (b5e10 <inet_htonl+0xc>)
   b5e08:	681b      	ldr	r3, [r3, #0]
   b5e0a:	6a1b      	ldr	r3, [r3, #32]
   b5e0c:	9301      	str	r3, [sp, #4]
   b5e0e:	bd08      	pop	{r3, pc}
   b5e10:	00030264 	.word	0x00030264

000b5e14 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5e14:	b508      	push	{r3, lr}
   b5e16:	4b02      	ldr	r3, [pc, #8]	; (b5e20 <inet_htons+0xc>)
   b5e18:	681b      	ldr	r3, [r3, #0]
   b5e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e1c:	9301      	str	r3, [sp, #4]
   b5e1e:	bd08      	pop	{r3, pc}
   b5e20:	00030264 	.word	0x00030264

000b5e24 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5e24:	b508      	push	{r3, lr}
   b5e26:	4b02      	ldr	r3, [pc, #8]	; (b5e30 <hal_usart_write+0xc>)
   b5e28:	681b      	ldr	r3, [r3, #0]
   b5e2a:	68db      	ldr	r3, [r3, #12]
   b5e2c:	9301      	str	r3, [sp, #4]
   b5e2e:	bd08      	pop	{r3, pc}
   b5e30:	0003023c 	.word	0x0003023c

000b5e34 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5e34:	b508      	push	{r3, lr}
   b5e36:	4b02      	ldr	r3, [pc, #8]	; (b5e40 <hal_usart_available+0xc>)
   b5e38:	681b      	ldr	r3, [r3, #0]
   b5e3a:	691b      	ldr	r3, [r3, #16]
   b5e3c:	9301      	str	r3, [sp, #4]
   b5e3e:	bd08      	pop	{r3, pc}
   b5e40:	0003023c 	.word	0x0003023c

000b5e44 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5e44:	b508      	push	{r3, lr}
   b5e46:	4b02      	ldr	r3, [pc, #8]	; (b5e50 <hal_usart_read+0xc>)
   b5e48:	681b      	ldr	r3, [r3, #0]
   b5e4a:	695b      	ldr	r3, [r3, #20]
   b5e4c:	9301      	str	r3, [sp, #4]
   b5e4e:	bd08      	pop	{r3, pc}
   b5e50:	0003023c 	.word	0x0003023c

000b5e54 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5e54:	b508      	push	{r3, lr}
   b5e56:	4b02      	ldr	r3, [pc, #8]	; (b5e60 <hal_usart_peek+0xc>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	699b      	ldr	r3, [r3, #24]
   b5e5c:	9301      	str	r3, [sp, #4]
   b5e5e:	bd08      	pop	{r3, pc}
   b5e60:	0003023c 	.word	0x0003023c

000b5e64 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5e64:	b508      	push	{r3, lr}
   b5e66:	4b02      	ldr	r3, [pc, #8]	; (b5e70 <hal_usart_flush+0xc>)
   b5e68:	681b      	ldr	r3, [r3, #0]
   b5e6a:	69db      	ldr	r3, [r3, #28]
   b5e6c:	9301      	str	r3, [sp, #4]
   b5e6e:	bd08      	pop	{r3, pc}
   b5e70:	0003023c 	.word	0x0003023c

000b5e74 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5e74:	b508      	push	{r3, lr}
   b5e76:	4b02      	ldr	r3, [pc, #8]	; (b5e80 <hal_usart_is_enabled+0xc>)
   b5e78:	681b      	ldr	r3, [r3, #0]
   b5e7a:	6a1b      	ldr	r3, [r3, #32]
   b5e7c:	9301      	str	r3, [sp, #4]
   b5e7e:	bd08      	pop	{r3, pc}
   b5e80:	0003023c 	.word	0x0003023c

000b5e84 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5e84:	b508      	push	{r3, lr}
   b5e86:	4b02      	ldr	r3, [pc, #8]	; (b5e90 <hal_usart_available_data_for_write+0xc>)
   b5e88:	681b      	ldr	r3, [r3, #0]
   b5e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e8c:	9301      	str	r3, [sp, #4]
   b5e8e:	bd08      	pop	{r3, pc}
   b5e90:	0003023c 	.word	0x0003023c

000b5e94 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5e94:	b508      	push	{r3, lr}
   b5e96:	4b02      	ldr	r3, [pc, #8]	; (b5ea0 <hal_usart_init_ex+0xc>)
   b5e98:	681b      	ldr	r3, [r3, #0]
   b5e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e9c:	9301      	str	r3, [sp, #4]
   b5e9e:	bd08      	pop	{r3, pc}
   b5ea0:	0003023c 	.word	0x0003023c

000b5ea4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5ea4:	b508      	push	{r3, lr}
   b5ea6:	4b02      	ldr	r3, [pc, #8]	; (b5eb0 <hal_i2c_begin+0xc>)
   b5ea8:	681b      	ldr	r3, [r3, #0]
   b5eaa:	68db      	ldr	r3, [r3, #12]
   b5eac:	9301      	str	r3, [sp, #4]
   b5eae:	bd08      	pop	{r3, pc}
   b5eb0:	00030228 	.word	0x00030228

000b5eb4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5eb4:	b508      	push	{r3, lr}
   b5eb6:	4b02      	ldr	r3, [pc, #8]	; (b5ec0 <hal_i2c_begin_transmission+0xc>)
   b5eb8:	681b      	ldr	r3, [r3, #0]
   b5eba:	699b      	ldr	r3, [r3, #24]
   b5ebc:	9301      	str	r3, [sp, #4]
   b5ebe:	bd08      	pop	{r3, pc}
   b5ec0:	00030228 	.word	0x00030228

000b5ec4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5ec4:	b508      	push	{r3, lr}
   b5ec6:	4b02      	ldr	r3, [pc, #8]	; (b5ed0 <hal_i2c_end_transmission+0xc>)
   b5ec8:	681b      	ldr	r3, [r3, #0]
   b5eca:	69db      	ldr	r3, [r3, #28]
   b5ecc:	9301      	str	r3, [sp, #4]
   b5ece:	bd08      	pop	{r3, pc}
   b5ed0:	00030228 	.word	0x00030228

000b5ed4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5ed4:	b508      	push	{r3, lr}
   b5ed6:	4b02      	ldr	r3, [pc, #8]	; (b5ee0 <hal_i2c_write+0xc>)
   b5ed8:	681b      	ldr	r3, [r3, #0]
   b5eda:	6a1b      	ldr	r3, [r3, #32]
   b5edc:	9301      	str	r3, [sp, #4]
   b5ede:	bd08      	pop	{r3, pc}
   b5ee0:	00030228 	.word	0x00030228

000b5ee4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5ee4:	b508      	push	{r3, lr}
   b5ee6:	4b02      	ldr	r3, [pc, #8]	; (b5ef0 <hal_i2c_available+0xc>)
   b5ee8:	681b      	ldr	r3, [r3, #0]
   b5eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5eec:	9301      	str	r3, [sp, #4]
   b5eee:	bd08      	pop	{r3, pc}
   b5ef0:	00030228 	.word	0x00030228

000b5ef4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5ef4:	b508      	push	{r3, lr}
   b5ef6:	4b02      	ldr	r3, [pc, #8]	; (b5f00 <hal_i2c_read+0xc>)
   b5ef8:	681b      	ldr	r3, [r3, #0]
   b5efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5efc:	9301      	str	r3, [sp, #4]
   b5efe:	bd08      	pop	{r3, pc}
   b5f00:	00030228 	.word	0x00030228

000b5f04 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5f04:	b508      	push	{r3, lr}
   b5f06:	4b02      	ldr	r3, [pc, #8]	; (b5f10 <hal_i2c_peek+0xc>)
   b5f08:	681b      	ldr	r3, [r3, #0]
   b5f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f0c:	9301      	str	r3, [sp, #4]
   b5f0e:	bd08      	pop	{r3, pc}
   b5f10:	00030228 	.word	0x00030228

000b5f14 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5f14:	b508      	push	{r3, lr}
   b5f16:	4b02      	ldr	r3, [pc, #8]	; (b5f20 <hal_i2c_flush+0xc>)
   b5f18:	681b      	ldr	r3, [r3, #0]
   b5f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f1c:	9301      	str	r3, [sp, #4]
   b5f1e:	bd08      	pop	{r3, pc}
   b5f20:	00030228 	.word	0x00030228

000b5f24 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5f24:	b508      	push	{r3, lr}
   b5f26:	4b02      	ldr	r3, [pc, #8]	; (b5f30 <hal_i2c_is_enabled+0xc>)
   b5f28:	681b      	ldr	r3, [r3, #0]
   b5f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f2c:	9301      	str	r3, [sp, #4]
   b5f2e:	bd08      	pop	{r3, pc}
   b5f30:	00030228 	.word	0x00030228

000b5f34 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5f34:	b508      	push	{r3, lr}
   b5f36:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <hal_i2c_init+0xc>)
   b5f38:	681b      	ldr	r3, [r3, #0]
   b5f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f3c:	9301      	str	r3, [sp, #4]
   b5f3e:	bd08      	pop	{r3, pc}
   b5f40:	00030228 	.word	0x00030228

000b5f44 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5f44:	b508      	push	{r3, lr}
   b5f46:	4b02      	ldr	r3, [pc, #8]	; (b5f50 <hal_i2c_request_ex+0xc>)
   b5f48:	681b      	ldr	r3, [r3, #0]
   b5f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5f4c:	9301      	str	r3, [sp, #4]
   b5f4e:	bd08      	pop	{r3, pc}
   b5f50:	00030228 	.word	0x00030228

000b5f54 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5f54:	b508      	push	{r3, lr}
   b5f56:	4b02      	ldr	r3, [pc, #8]	; (b5f60 <sock_setsockopt+0xc>)
   b5f58:	681b      	ldr	r3, [r3, #0]
   b5f5a:	699b      	ldr	r3, [r3, #24]
   b5f5c:	9301      	str	r3, [sp, #4]
   b5f5e:	bd08      	pop	{r3, pc}
   b5f60:	00030238 	.word	0x00030238

000b5f64 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5f64:	b508      	push	{r3, lr}
   b5f66:	4b02      	ldr	r3, [pc, #8]	; (b5f70 <sock_close+0xc>)
   b5f68:	681b      	ldr	r3, [r3, #0]
   b5f6a:	69db      	ldr	r3, [r3, #28]
   b5f6c:	9301      	str	r3, [sp, #4]
   b5f6e:	bd08      	pop	{r3, pc}
   b5f70:	00030238 	.word	0x00030238

000b5f74 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5f74:	b508      	push	{r3, lr}
   b5f76:	4b02      	ldr	r3, [pc, #8]	; (b5f80 <sock_connect+0xc>)
   b5f78:	681b      	ldr	r3, [r3, #0]
   b5f7a:	6a1b      	ldr	r3, [r3, #32]
   b5f7c:	9301      	str	r3, [sp, #4]
   b5f7e:	bd08      	pop	{r3, pc}
   b5f80:	00030238 	.word	0x00030238

000b5f84 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5f84:	b508      	push	{r3, lr}
   b5f86:	4b02      	ldr	r3, [pc, #8]	; (b5f90 <sock_recv+0xc>)
   b5f88:	681b      	ldr	r3, [r3, #0]
   b5f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f8c:	9301      	str	r3, [sp, #4]
   b5f8e:	bd08      	pop	{r3, pc}
   b5f90:	00030238 	.word	0x00030238

000b5f94 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5f94:	b508      	push	{r3, lr}
   b5f96:	4b02      	ldr	r3, [pc, #8]	; (b5fa0 <sock_send+0xc>)
   b5f98:	681b      	ldr	r3, [r3, #0]
   b5f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f9c:	9301      	str	r3, [sp, #4]
   b5f9e:	bd08      	pop	{r3, pc}
   b5fa0:	00030238 	.word	0x00030238

000b5fa4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5fa4:	b508      	push	{r3, lr}
   b5fa6:	4b02      	ldr	r3, [pc, #8]	; (b5fb0 <sock_socket+0xc>)
   b5fa8:	681b      	ldr	r3, [r3, #0]
   b5faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5fac:	9301      	str	r3, [sp, #4]
   b5fae:	bd08      	pop	{r3, pc}
   b5fb0:	00030238 	.word	0x00030238

000b5fb4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5fb4:	b508      	push	{r3, lr}
   b5fb6:	4b02      	ldr	r3, [pc, #8]	; (b5fc0 <hal_spi_begin+0xc>)
   b5fb8:	681b      	ldr	r3, [r3, #0]
   b5fba:	681b      	ldr	r3, [r3, #0]
   b5fbc:	9301      	str	r3, [sp, #4]
   b5fbe:	bd08      	pop	{r3, pc}
   b5fc0:	00030230 	.word	0x00030230

000b5fc4 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5fc4:	b508      	push	{r3, lr}
   b5fc6:	4b02      	ldr	r3, [pc, #8]	; (b5fd0 <hal_spi_set_bit_order+0xc>)
   b5fc8:	681b      	ldr	r3, [r3, #0]
   b5fca:	689b      	ldr	r3, [r3, #8]
   b5fcc:	9301      	str	r3, [sp, #4]
   b5fce:	bd08      	pop	{r3, pc}
   b5fd0:	00030230 	.word	0x00030230

000b5fd4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5fd4:	b508      	push	{r3, lr}
   b5fd6:	4b02      	ldr	r3, [pc, #8]	; (b5fe0 <hal_spi_set_data_mode+0xc>)
   b5fd8:	681b      	ldr	r3, [r3, #0]
   b5fda:	68db      	ldr	r3, [r3, #12]
   b5fdc:	9301      	str	r3, [sp, #4]
   b5fde:	bd08      	pop	{r3, pc}
   b5fe0:	00030230 	.word	0x00030230

000b5fe4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5fe4:	b508      	push	{r3, lr}
   b5fe6:	4b02      	ldr	r3, [pc, #8]	; (b5ff0 <hal_spi_set_clock_divider+0xc>)
   b5fe8:	681b      	ldr	r3, [r3, #0]
   b5fea:	691b      	ldr	r3, [r3, #16]
   b5fec:	9301      	str	r3, [sp, #4]
   b5fee:	bd08      	pop	{r3, pc}
   b5ff0:	00030230 	.word	0x00030230

000b5ff4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5ff4:	b508      	push	{r3, lr}
   b5ff6:	4b02      	ldr	r3, [pc, #8]	; (b6000 <hal_spi_transfer+0xc>)
   b5ff8:	681b      	ldr	r3, [r3, #0]
   b5ffa:	695b      	ldr	r3, [r3, #20]
   b5ffc:	9301      	str	r3, [sp, #4]
   b5ffe:	bd08      	pop	{r3, pc}
   b6000:	00030230 	.word	0x00030230

000b6004 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b02      	ldr	r3, [pc, #8]	; (b6010 <hal_spi_init+0xc>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	69db      	ldr	r3, [r3, #28]
   b600c:	9301      	str	r3, [sp, #4]
   b600e:	bd08      	pop	{r3, pc}
   b6010:	00030230 	.word	0x00030230

000b6014 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6014:	b508      	push	{r3, lr}
   b6016:	4b02      	ldr	r3, [pc, #8]	; (b6020 <hal_spi_is_enabled+0xc>)
   b6018:	681b      	ldr	r3, [r3, #0]
   b601a:	6a1b      	ldr	r3, [r3, #32]
   b601c:	9301      	str	r3, [sp, #4]
   b601e:	bd08      	pop	{r3, pc}
   b6020:	00030230 	.word	0x00030230

000b6024 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6024:	b508      	push	{r3, lr}
   b6026:	4b02      	ldr	r3, [pc, #8]	; (b6030 <hal_spi_info+0xc>)
   b6028:	681b      	ldr	r3, [r3, #0]
   b602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b602c:	9301      	str	r3, [sp, #4]
   b602e:	bd08      	pop	{r3, pc}
   b6030:	00030230 	.word	0x00030230

000b6034 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6034:	b508      	push	{r3, lr}
   b6036:	4b02      	ldr	r3, [pc, #8]	; (b6040 <hal_spi_set_settings+0xc>)
   b6038:	681b      	ldr	r3, [r3, #0]
   b603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	bd08      	pop	{r3, pc}
   b6040:	00030230 	.word	0x00030230

000b6044 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b02      	ldr	r3, [pc, #8]	; (b6050 <hal_spi_acquire+0xc>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b604c:	9301      	str	r3, [sp, #4]
   b604e:	bd08      	pop	{r3, pc}
   b6050:	00030230 	.word	0x00030230

000b6054 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b02      	ldr	r3, [pc, #8]	; (b6060 <hal_spi_release+0xc>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b605c:	9301      	str	r3, [sp, #4]
   b605e:	bd08      	pop	{r3, pc}
   b6060:	00030230 	.word	0x00030230

000b6064 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6064:	b508      	push	{r3, lr}
   b6066:	4b02      	ldr	r3, [pc, #8]	; (b6070 <HAL_USB_USART_Init+0xc>)
   b6068:	681b      	ldr	r3, [r3, #0]
   b606a:	681b      	ldr	r3, [r3, #0]
   b606c:	9301      	str	r3, [sp, #4]
   b606e:	bd08      	pop	{r3, pc}
   b6070:	0003024c 	.word	0x0003024c

000b6074 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6074:	b508      	push	{r3, lr}
   b6076:	4b02      	ldr	r3, [pc, #8]	; (b6080 <HAL_USB_USART_Begin+0xc>)
   b6078:	681b      	ldr	r3, [r3, #0]
   b607a:	685b      	ldr	r3, [r3, #4]
   b607c:	9301      	str	r3, [sp, #4]
   b607e:	bd08      	pop	{r3, pc}
   b6080:	0003024c 	.word	0x0003024c

000b6084 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6084:	b508      	push	{r3, lr}
   b6086:	4b02      	ldr	r3, [pc, #8]	; (b6090 <HAL_USB_USART_Available_Data+0xc>)
   b6088:	681b      	ldr	r3, [r3, #0]
   b608a:	691b      	ldr	r3, [r3, #16]
   b608c:	9301      	str	r3, [sp, #4]
   b608e:	bd08      	pop	{r3, pc}
   b6090:	0003024c 	.word	0x0003024c

000b6094 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6094:	b508      	push	{r3, lr}
   b6096:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6098:	681b      	ldr	r3, [r3, #0]
   b609a:	695b      	ldr	r3, [r3, #20]
   b609c:	9301      	str	r3, [sp, #4]
   b609e:	bd08      	pop	{r3, pc}
   b60a0:	0003024c 	.word	0x0003024c

000b60a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <HAL_USB_USART_Receive_Data+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	699b      	ldr	r3, [r3, #24]
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	0003024c 	.word	0x0003024c

000b60b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <HAL_USB_USART_Send_Data+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	69db      	ldr	r3, [r3, #28]
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	0003024c 	.word	0x0003024c

000b60c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <HAL_USB_USART_Flush_Data+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	6a1b      	ldr	r3, [r3, #32]
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	0003024c 	.word	0x0003024c

000b60d4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <HAL_USB_USART_Is_Connected+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	0003024c 	.word	0x0003024c

000b60e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <panic_+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	00030260 	.word	0x00030260

000b60f4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <log_message+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	00030260 	.word	0x00030260

000b6104 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <set_system_mode+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	685b      	ldr	r3, [r3, #4]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	00030220 	.word	0x00030220

000b6114 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <system_delay_ms+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	695b      	ldr	r3, [r3, #20]
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030220 	.word	0x00030220

000b6124 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b03      	ldr	r3, [pc, #12]	; (b6134 <system_ctrl_set_app_request_handler+0x10>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b612e:	9301      	str	r3, [sp, #4]
   b6130:	bd08      	pop	{r3, pc}
   b6132:	0000      	.short	0x0000
   b6134:	00030220 	.word	0x00030220

000b6138 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b03      	ldr	r3, [pc, #12]	; (b6148 <system_ctrl_set_result+0x10>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6142:	9301      	str	r3, [sp, #4]
   b6144:	bd08      	pop	{r3, pc}
   b6146:	0000      	.short	0x0000
   b6148:	00030220 	.word	0x00030220

000b614c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b614c:	b508      	push	{r3, lr}
   b614e:	4b02      	ldr	r3, [pc, #8]	; (b6158 <network_connect+0xc>)
   b6150:	681b      	ldr	r3, [r3, #0]
   b6152:	685b      	ldr	r3, [r3, #4]
   b6154:	9301      	str	r3, [sp, #4]
   b6156:	bd08      	pop	{r3, pc}
   b6158:	00030240 	.word	0x00030240

000b615c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b615c:	b508      	push	{r3, lr}
   b615e:	4b02      	ldr	r3, [pc, #8]	; (b6168 <network_connecting+0xc>)
   b6160:	681b      	ldr	r3, [r3, #0]
   b6162:	689b      	ldr	r3, [r3, #8]
   b6164:	9301      	str	r3, [sp, #4]
   b6166:	bd08      	pop	{r3, pc}
   b6168:	00030240 	.word	0x00030240

000b616c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b616c:	b508      	push	{r3, lr}
   b616e:	4b02      	ldr	r3, [pc, #8]	; (b6178 <network_disconnect+0xc>)
   b6170:	681b      	ldr	r3, [r3, #0]
   b6172:	68db      	ldr	r3, [r3, #12]
   b6174:	9301      	str	r3, [sp, #4]
   b6176:	bd08      	pop	{r3, pc}
   b6178:	00030240 	.word	0x00030240

000b617c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b02      	ldr	r3, [pc, #8]	; (b6188 <network_ready+0xc>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	691b      	ldr	r3, [r3, #16]
   b6184:	9301      	str	r3, [sp, #4]
   b6186:	bd08      	pop	{r3, pc}
   b6188:	00030240 	.word	0x00030240

000b618c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b618c:	b508      	push	{r3, lr}
   b618e:	4b02      	ldr	r3, [pc, #8]	; (b6198 <network_on+0xc>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	695b      	ldr	r3, [r3, #20]
   b6194:	9301      	str	r3, [sp, #4]
   b6196:	bd08      	pop	{r3, pc}
   b6198:	00030240 	.word	0x00030240

000b619c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b619c:	b508      	push	{r3, lr}
   b619e:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <network_off+0xc>)
   b61a0:	681b      	ldr	r3, [r3, #0]
   b61a2:	699b      	ldr	r3, [r3, #24]
   b61a4:	9301      	str	r3, [sp, #4]
   b61a6:	bd08      	pop	{r3, pc}
   b61a8:	00030240 	.word	0x00030240

000b61ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b61ac:	b508      	push	{r3, lr}
   b61ae:	4b02      	ldr	r3, [pc, #8]	; (b61b8 <network_listen+0xc>)
   b61b0:	681b      	ldr	r3, [r3, #0]
   b61b2:	69db      	ldr	r3, [r3, #28]
   b61b4:	9301      	str	r3, [sp, #4]
   b61b6:	bd08      	pop	{r3, pc}
   b61b8:	00030240 	.word	0x00030240

000b61bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <network_listening+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	6a1b      	ldr	r3, [r3, #32]
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	00030240 	.word	0x00030240

000b61cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b02      	ldr	r3, [pc, #8]	; (b61d8 <network_set_listen_timeout+0xc>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61d4:	9301      	str	r3, [sp, #4]
   b61d6:	bd08      	pop	{r3, pc}
   b61d8:	00030240 	.word	0x00030240

000b61dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b02      	ldr	r3, [pc, #8]	; (b61e8 <network_get_listen_timeout+0xc>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b61e4:	9301      	str	r3, [sp, #4]
   b61e6:	bd08      	pop	{r3, pc}
   b61e8:	00030240 	.word	0x00030240

000b61ec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b61ec:	b508      	push	{r3, lr}
   b61ee:	4b02      	ldr	r3, [pc, #8]	; (b61f8 <network_is_on+0xc>)
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b61f4:	9301      	str	r3, [sp, #4]
   b61f6:	bd08      	pop	{r3, pc}
   b61f8:	00030240 	.word	0x00030240

000b61fc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b61fc:	b508      	push	{r3, lr}
   b61fe:	4b02      	ldr	r3, [pc, #8]	; (b6208 <network_is_off+0xc>)
   b6200:	681b      	ldr	r3, [r3, #0]
   b6202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6204:	9301      	str	r3, [sp, #4]
   b6206:	bd08      	pop	{r3, pc}
   b6208:	00030240 	.word	0x00030240

000b620c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b620c:	b508      	push	{r3, lr}
   b620e:	4b02      	ldr	r3, [pc, #8]	; (b6218 <spark_process+0xc>)
   b6210:	681b      	ldr	r3, [r3, #0]
   b6212:	689b      	ldr	r3, [r3, #8]
   b6214:	9301      	str	r3, [sp, #4]
   b6216:	bd08      	pop	{r3, pc}
   b6218:	00030244 	.word	0x00030244

000b621c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b621c:	b508      	push	{r3, lr}
   b621e:	4b02      	ldr	r3, [pc, #8]	; (b6228 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6220:	681b      	ldr	r3, [r3, #0]
   b6222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6224:	9301      	str	r3, [sp, #4]
   b6226:	bd08      	pop	{r3, pc}
   b6228:	00030244 	.word	0x00030244

000b622c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b622c:	b508      	push	{r3, lr}
   b622e:	4b02      	ldr	r3, [pc, #8]	; (b6238 <malloc+0xc>)
   b6230:	681b      	ldr	r3, [r3, #0]
   b6232:	681b      	ldr	r3, [r3, #0]
   b6234:	9301      	str	r3, [sp, #4]
   b6236:	bd08      	pop	{r3, pc}
   b6238:	0003021c 	.word	0x0003021c

000b623c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b623c:	b508      	push	{r3, lr}
   b623e:	4b02      	ldr	r3, [pc, #8]	; (b6248 <free+0xc>)
   b6240:	681b      	ldr	r3, [r3, #0]
   b6242:	685b      	ldr	r3, [r3, #4]
   b6244:	9301      	str	r3, [sp, #4]
   b6246:	bd08      	pop	{r3, pc}
   b6248:	0003021c 	.word	0x0003021c

000b624c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b624c:	b508      	push	{r3, lr}
   b624e:	4b02      	ldr	r3, [pc, #8]	; (b6258 <vsnprintf+0xc>)
   b6250:	681b      	ldr	r3, [r3, #0]
   b6252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6254:	9301      	str	r3, [sp, #4]
   b6256:	bd08      	pop	{r3, pc}
   b6258:	0003021c 	.word	0x0003021c

000b625c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b625c:	b508      	push	{r3, lr}
   b625e:	4b02      	ldr	r3, [pc, #8]	; (b6268 <_malloc_r+0xc>)
   b6260:	681b      	ldr	r3, [r3, #0]
   b6262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	bd08      	pop	{r3, pc}
   b6268:	0003021c 	.word	0x0003021c

000b626c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b626c:	b508      	push	{r3, lr}
   b626e:	4b02      	ldr	r3, [pc, #8]	; (b6278 <__errno+0xc>)
   b6270:	681b      	ldr	r3, [r3, #0]
   b6272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6274:	9301      	str	r3, [sp, #4]
   b6276:	bd08      	pop	{r3, pc}
   b6278:	0003021c 	.word	0x0003021c

000b627c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b02      	ldr	r3, [pc, #8]	; (b6288 <__assert_func+0xc>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6284:	9301      	str	r3, [sp, #4]
   b6286:	bd08      	pop	{r3, pc}
   b6288:	0003021c 	.word	0x0003021c

000b628c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b02      	ldr	r3, [pc, #8]	; (b6298 <newlib_impure_ptr_callback+0xc>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6294:	9301      	str	r3, [sp, #4]
   b6296:	bd08      	pop	{r3, pc}
   b6298:	0003021c 	.word	0x0003021c

000b629c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b629c:	2200      	movs	r2, #0
   b629e:	6840      	ldr	r0, [r0, #4]
   b62a0:	4611      	mov	r1, r2
   b62a2:	f7ff bf8b 	b.w	b61bc <network_listening>

000b62a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b62a6:	2200      	movs	r2, #0
   b62a8:	6840      	ldr	r0, [r0, #4]
   b62aa:	4611      	mov	r1, r2
   b62ac:	f7ff bf96 	b.w	b61dc <network_get_listen_timeout>

000b62b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b62b0:	6840      	ldr	r0, [r0, #4]
   b62b2:	2200      	movs	r2, #0
   b62b4:	f7ff bf8a 	b.w	b61cc <network_set_listen_timeout>

000b62b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b62b8:	6840      	ldr	r0, [r0, #4]
   b62ba:	2200      	movs	r2, #0
   b62bc:	f081 0101 	eor.w	r1, r1, #1
   b62c0:	f7ff bf74 	b.w	b61ac <network_listen>

000b62c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b62c4:	2300      	movs	r3, #0
   b62c6:	6840      	ldr	r0, [r0, #4]
   b62c8:	461a      	mov	r2, r3
   b62ca:	4619      	mov	r1, r3
   b62cc:	f7ff bf66 	b.w	b619c <network_off>

000b62d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b62d0:	2300      	movs	r3, #0
   b62d2:	6840      	ldr	r0, [r0, #4]
   b62d4:	461a      	mov	r2, r3
   b62d6:	4619      	mov	r1, r3
   b62d8:	f7ff bf58 	b.w	b618c <network_on>

000b62dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b62dc:	2200      	movs	r2, #0
   b62de:	6840      	ldr	r0, [r0, #4]
   b62e0:	4611      	mov	r1, r2
   b62e2:	f7ff bf4b 	b.w	b617c <network_ready>

000b62e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b62e6:	2200      	movs	r2, #0
   b62e8:	6840      	ldr	r0, [r0, #4]
   b62ea:	4611      	mov	r1, r2
   b62ec:	f7ff bf36 	b.w	b615c <network_connecting>

000b62f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b62f0:	6840      	ldr	r0, [r0, #4]
   b62f2:	2200      	movs	r2, #0
   b62f4:	2102      	movs	r1, #2
   b62f6:	f7ff bf39 	b.w	b616c <network_disconnect>

000b62fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b62fa:	2300      	movs	r3, #0
   b62fc:	6840      	ldr	r0, [r0, #4]
   b62fe:	461a      	mov	r2, r3
   b6300:	f7ff bf24 	b.w	b614c <network_connect>

000b6304 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6304:	4b02      	ldr	r3, [pc, #8]	; (b6310 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6306:	2203      	movs	r2, #3
   b6308:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b630a:	4a02      	ldr	r2, [pc, #8]	; (b6314 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b630c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b630e:	4770      	bx	lr
   b6310:	2003e6c4 	.word	0x2003e6c4
   b6314:	000ba88c 	.word	0x000ba88c

000b6318 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6318:	2100      	movs	r1, #0
   b631a:	f7ff be9b 	b.w	b6054 <hal_spi_release>

000b631e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b631e:	2100      	movs	r1, #0
   b6320:	f7ff be90 	b.w	b6044 <hal_spi_acquire>

000b6324 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6324:	b510      	push	{r4, lr}
   b6326:	4604      	mov	r4, r0
   b6328:	4608      	mov	r0, r1
{
    _spi = spi;
   b632a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b632c:	f7ff fe6a 	bl	b6004 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6330:	2300      	movs	r3, #0
   b6332:	6063      	str	r3, [r4, #4]
}
   b6334:	4620      	mov	r0, r4
   b6336:	bd10      	pop	{r4, pc}

000b6338 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6338:	b513      	push	{r0, r1, r4, lr}
   b633a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b633c:	7800      	ldrb	r0, [r0, #0]
   b633e:	f7ff ffee 	bl	b631e <_ZN8SPIClass4lockEv.isra.0>
   b6342:	b958      	cbnz	r0, b635c <_ZN8SPIClass5beginEv+0x24>
   b6344:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6346:	9001      	str	r0, [sp, #4]
   b6348:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b634c:	f7ff fe32 	bl	b5fb4 <hal_spi_begin>
        unlock();
   b6350:	9801      	ldr	r0, [sp, #4]
    }
}
   b6352:	b002      	add	sp, #8
   b6354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6358:	f7ff bfde 	b.w	b6318 <_ZN8SPIClass6unlockEv.isra.0>
   b635c:	b002      	add	sp, #8
   b635e:	bd10      	pop	{r4, pc}

000b6360 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6360:	b513      	push	{r0, r1, r4, lr}
   b6362:	4604      	mov	r4, r0
    if (!lock())
   b6364:	7800      	ldrb	r0, [r0, #0]
{
   b6366:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6368:	f7ff ffd9 	bl	b631e <_ZN8SPIClass4lockEv.isra.0>
   b636c:	9901      	ldr	r1, [sp, #4]
   b636e:	b948      	cbnz	r0, b6384 <_ZN8SPIClass11setBitOrderEh+0x24>
   b6370:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b6372:	9001      	str	r0, [sp, #4]
   b6374:	f7ff fe26 	bl	b5fc4 <hal_spi_set_bit_order>
        unlock();
   b6378:	9801      	ldr	r0, [sp, #4]
    }
}
   b637a:	b002      	add	sp, #8
   b637c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6380:	f7ff bfca 	b.w	b6318 <_ZN8SPIClass6unlockEv.isra.0>
   b6384:	b002      	add	sp, #8
   b6386:	bd10      	pop	{r4, pc}

000b6388 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6388:	b513      	push	{r0, r1, r4, lr}
   b638a:	4604      	mov	r4, r0
    if (!lock())
   b638c:	7800      	ldrb	r0, [r0, #0]
{
   b638e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6390:	f7ff ffc5 	bl	b631e <_ZN8SPIClass4lockEv.isra.0>
   b6394:	9901      	ldr	r1, [sp, #4]
   b6396:	b948      	cbnz	r0, b63ac <_ZN8SPIClass11setDataModeEh+0x24>
   b6398:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b639a:	9001      	str	r0, [sp, #4]
   b639c:	f7ff fe1a 	bl	b5fd4 <hal_spi_set_data_mode>
        unlock();
   b63a0:	9801      	ldr	r0, [sp, #4]
    }
}
   b63a2:	b002      	add	sp, #8
   b63a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b63a8:	f7ff bfb6 	b.w	b6318 <_ZN8SPIClass6unlockEv.isra.0>
   b63ac:	b002      	add	sp, #8
   b63ae:	bd10      	pop	{r4, pc}

000b63b0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b63b0:	7800      	ldrb	r0, [r0, #0]
   b63b2:	f7ff bfb1 	b.w	b6318 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b63b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b63b8:	0840      	lsrs	r0, r0, #1
{
   b63ba:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b63bc:	6018      	str	r0, [r3, #0]
   b63be:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b63c0:	6818      	ldr	r0, [r3, #0]
   b63c2:	4288      	cmp	r0, r1
   b63c4:	b2e5      	uxtb	r5, r4
   b63c6:	d906      	bls.n	b63d6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b63c8:	3401      	adds	r4, #1
   b63ca:	2c08      	cmp	r4, #8
   b63cc:	d002      	beq.n	b63d4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b63ce:	0840      	lsrs	r0, r0, #1
   b63d0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b63d2:	e7f5      	b.n	b63c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b63d4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b63d8:	5d5b      	ldrb	r3, [r3, r5]
   b63da:	7013      	strb	r3, [r2, #0]
}
   b63dc:	bd30      	pop	{r4, r5, pc}
   b63de:	bf00      	nop
   b63e0:	000ba8c0 	.word	0x000ba8c0

000b63e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b63e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b63e8:	4606      	mov	r6, r0
   b63ea:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b63ec:	7800      	ldrb	r0, [r0, #0]
{
   b63ee:	460c      	mov	r4, r1
    CHECK(lock());
   b63f0:	f7ff ff95 	bl	b631e <_ZN8SPIClass4lockEv.isra.0>
   b63f4:	2800      	cmp	r0, #0
   b63f6:	db1b      	blt.n	b6430 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b63f8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b63fa:	2214      	movs	r2, #20
   b63fc:	2100      	movs	r1, #0
   b63fe:	a809      	add	r0, sp, #36	; 0x24
   b6400:	f001 fef7 	bl	b81f2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6404:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6406:	2200      	movs	r2, #0
   b6408:	a909      	add	r1, sp, #36	; 0x24
   b640a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b640c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6410:	f7ff fe08 	bl	b6024 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6414:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6418:	b113      	cbz	r3, b6420 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b641a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b641e:	b155      	cbz	r5, b6436 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6420:	2700      	movs	r7, #0
   b6422:	46b9      	mov	r9, r7
   b6424:	46b8      	mov	r8, r7
   b6426:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6428:	7923      	ldrb	r3, [r4, #4]
   b642a:	b15d      	cbz	r5, b6444 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b642c:	b1c3      	cbz	r3, b6460 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b642e:	2000      	movs	r0, #0
}
   b6430:	b00f      	add	sp, #60	; 0x3c
   b6432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6436:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b643a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b643e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6442:	e7f1      	b.n	b6428 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6444:	2b00      	cmp	r3, #0
   b6446:	d135      	bne.n	b64b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6448:	68a3      	ldr	r3, [r4, #8]
   b644a:	4543      	cmp	r3, r8
   b644c:	d108      	bne.n	b6460 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b644e:	f88d 9020 	strb.w	r9, [sp, #32]
   b6452:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6456:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b645a:	89a3      	ldrh	r3, [r4, #12]
   b645c:	429a      	cmp	r2, r3
   b645e:	d0e6      	beq.n	b642e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6460:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6462:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6464:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6468:	980a      	ldr	r0, [sp, #40]	; 0x28
   b646a:	ab04      	add	r3, sp, #16
   b646c:	f10d 020f 	add.w	r2, sp, #15
   b6470:	f7ff ffa2 	bl	b63b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6474:	7921      	ldrb	r1, [r4, #4]
   b6476:	b985      	cbnz	r5, b649a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6478:	b989      	cbnz	r1, b649e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b647a:	68a3      	ldr	r3, [r4, #8]
   b647c:	4543      	cmp	r3, r8
   b647e:	d30e      	bcc.n	b649e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6480:	f88d 9020 	strb.w	r9, [sp, #32]
   b6484:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6488:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b648c:	89a3      	ldrh	r3, [r4, #12]
   b648e:	429a      	cmp	r2, r3
   b6490:	d105      	bne.n	b649e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6492:	9b04      	ldr	r3, [sp, #16]
   b6494:	4543      	cmp	r3, r8
   b6496:	d102      	bne.n	b649e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6498:	e7c9      	b.n	b642e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b649a:	2900      	cmp	r1, #0
   b649c:	d1f9      	bne.n	b6492 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b649e:	2300      	movs	r3, #0
   b64a0:	9301      	str	r3, [sp, #4]
   b64a2:	7b63      	ldrb	r3, [r4, #13]
   b64a4:	9300      	str	r3, [sp, #0]
   b64a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b64aa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b64ac:	7830      	ldrb	r0, [r6, #0]
   b64ae:	f7ff fdc1 	bl	b6034 <hal_spi_set_settings>
   b64b2:	e7bc      	b.n	b642e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b64b4:	e9cd 5500 	strd	r5, r5, [sp]
   b64b8:	462b      	mov	r3, r5
   b64ba:	462a      	mov	r2, r5
   b64bc:	2101      	movs	r1, #1
   b64be:	e7f5      	b.n	b64ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b64c0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b64c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b64c4:	b088      	sub	sp, #32
    unsigned clock = 0;
   b64c6:	2300      	movs	r3, #0
{
   b64c8:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b64ca:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b64cc:	9302      	str	r3, [sp, #8]
{
   b64ce:	460e      	mov	r6, r1
   b64d0:	4617      	mov	r7, r2
    if (!lock())
   b64d2:	f7ff ff24 	bl	b631e <_ZN8SPIClass4lockEv.isra.0>
   b64d6:	4605      	mov	r5, r0
   b64d8:	bb00      	cbnz	r0, b651c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b64da:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b64de:	4601      	mov	r1, r0
   b64e0:	2214      	movs	r2, #20
   b64e2:	a803      	add	r0, sp, #12
   b64e4:	f001 fe85 	bl	b81f2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b64e8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b64ea:	462a      	mov	r2, r5
   b64ec:	a903      	add	r1, sp, #12
   b64ee:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b64f0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b64f4:	f7ff fd96 	bl	b6024 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b64f8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b64fa:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b64fe:	ab02      	add	r3, sp, #8
   b6500:	f10d 0207 	add.w	r2, sp, #7
   b6504:	fb07 f106 	mul.w	r1, r7, r6
   b6508:	f7ff ff56 	bl	b63b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b650c:	7820      	ldrb	r0, [r4, #0]
   b650e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6512:	f7ff fd67 	bl	b5fe4 <hal_spi_set_clock_divider>
        unlock();
   b6516:	7820      	ldrb	r0, [r4, #0]
   b6518:	f7ff fefe 	bl	b6318 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b651c:	9802      	ldr	r0, [sp, #8]
   b651e:	b008      	add	sp, #32
   b6520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6524 <_ZN8SPIClass15setClockDividerEh>:
{
   b6524:	b538      	push	{r3, r4, r5, lr}
   b6526:	4604      	mov	r4, r0
    if (!lock())
   b6528:	7800      	ldrb	r0, [r0, #0]
{
   b652a:	460d      	mov	r5, r1
    if (!lock())
   b652c:	f7ff fef7 	bl	b631e <_ZN8SPIClass4lockEv.isra.0>
   b6530:	4603      	mov	r3, r0
   b6532:	b9d0      	cbnz	r0, b656a <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6534:	6861      	ldr	r1, [r4, #4]
   b6536:	b199      	cbz	r1, b6560 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6538:	4a0c      	ldr	r2, [pc, #48]	; (b656c <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b653a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b653e:	4285      	cmp	r5, r0
   b6540:	d002      	beq.n	b6548 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6542:	3301      	adds	r3, #1
   b6544:	2b08      	cmp	r3, #8
   b6546:	d1f8      	bne.n	b653a <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6548:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b654a:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b654c:	2201      	movs	r2, #1
   b654e:	40d9      	lsrs	r1, r3
   b6550:	4620      	mov	r0, r4
   b6552:	f7ff ffb5 	bl	b64c0 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6556:	7820      	ldrb	r0, [r4, #0]
}
   b6558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b655c:	f7ff bedc 	b.w	b6318 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6560:	7820      	ldrb	r0, [r4, #0]
   b6562:	4629      	mov	r1, r5
   b6564:	f7ff fd3e 	bl	b5fe4 <hal_spi_set_clock_divider>
   b6568:	e7f5      	b.n	b6556 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b656a:	bd38      	pop	{r3, r4, r5, pc}
   b656c:	000ba8c0 	.word	0x000ba8c0

000b6570 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6570:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6572:	7800      	ldrb	r0, [r0, #0]
   b6574:	f7ff fd3e 	bl	b5ff4 <hal_spi_transfer>
}
   b6578:	b2c0      	uxtb	r0, r0
   b657a:	bd08      	pop	{r3, pc}

000b657c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b657c:	4b05      	ldr	r3, [pc, #20]	; (b6594 <_GLOBAL__sub_I_System+0x18>)
   b657e:	2202      	movs	r2, #2
   b6580:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6582:	4b05      	ldr	r3, [pc, #20]	; (b6598 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6584:	4a05      	ldr	r2, [pc, #20]	; (b659c <_GLOBAL__sub_I_System+0x20>)
   b6586:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6588:	2000      	movs	r0, #0
   b658a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b658e:	f7ff bdb9 	b.w	b6104 <set_system_mode>
   b6592:	bf00      	nop
   b6594:	2003e6d8 	.word	0x2003e6d8
   b6598:	2003e6cc 	.word	0x2003e6cc
   b659c:	ffff0000 	.word	0xffff0000

000b65a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b65a0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b65a2:	6843      	ldr	r3, [r0, #4]
   b65a4:	3b01      	subs	r3, #1
    {
   b65a6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b65a8:	6043      	str	r3, [r0, #4]
   b65aa:	b963      	cbnz	r3, b65c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b65ac:	6803      	ldr	r3, [r0, #0]
   b65ae:	689b      	ldr	r3, [r3, #8]
   b65b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b65b2:	68a3      	ldr	r3, [r4, #8]
   b65b4:	3b01      	subs	r3, #1
   b65b6:	60a3      	str	r3, [r4, #8]
   b65b8:	b92b      	cbnz	r3, b65c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b65ba:	6823      	ldr	r3, [r4, #0]
   b65bc:	4620      	mov	r0, r4
   b65be:	68db      	ldr	r3, [r3, #12]
        }
    }
   b65c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b65c4:	4718      	bx	r3
    }
   b65c6:	bd10      	pop	{r4, pc}

000b65c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b65c8:	4802      	ldr	r0, [pc, #8]	; (b65d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b65ca:	2300      	movs	r3, #0
   b65cc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b65ce:	f7ff bc09 	b.w	b5de4 <os_mutex_recursive_create>
   b65d2:	bf00      	nop
   b65d4:	2003e6dc 	.word	0x2003e6dc

000b65d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b65d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65da:	4606      	mov	r6, r0
   b65dc:	460d      	mov	r5, r1
  size_t n = 0;
   b65de:	188f      	adds	r7, r1, r2
   b65e0:	2400      	movs	r4, #0
  while (size--) {
   b65e2:	42bd      	cmp	r5, r7
   b65e4:	d00c      	beq.n	b6600 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b65e6:	6833      	ldr	r3, [r6, #0]
   b65e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b65ec:	689b      	ldr	r3, [r3, #8]
   b65ee:	4630      	mov	r0, r6
   b65f0:	4798      	blx	r3
     if (chunk>=0)
   b65f2:	1e03      	subs	r3, r0, #0
   b65f4:	db01      	blt.n	b65fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b65f6:	441c      	add	r4, r3
  while (size--) {
   b65f8:	e7f3      	b.n	b65e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b65fa:	2c00      	cmp	r4, #0
   b65fc:	bf08      	it	eq
   b65fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6600:	4620      	mov	r0, r4
   b6602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6604 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6604:	b513      	push	{r0, r1, r4, lr}
   b6606:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6608:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b660a:	b159      	cbz	r1, b6624 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b660c:	9101      	str	r1, [sp, #4]
   b660e:	f001 fe39 	bl	b8284 <strlen>
   b6612:	6823      	ldr	r3, [r4, #0]
   b6614:	9901      	ldr	r1, [sp, #4]
   b6616:	68db      	ldr	r3, [r3, #12]
   b6618:	4602      	mov	r2, r0
   b661a:	4620      	mov	r0, r4
    }
   b661c:	b002      	add	sp, #8
   b661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6622:	4718      	bx	r3
    }
   b6624:	b002      	add	sp, #8
   b6626:	bd10      	pop	{r4, pc}

000b6628 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6628:	b508      	push	{r3, lr}
  return write(str);
   b662a:	f7ff ffeb 	bl	b6604 <_ZN5Print5writeEPKc>
}
   b662e:	bd08      	pop	{r3, pc}

000b6630 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6630:	6803      	ldr	r3, [r0, #0]
   b6632:	689b      	ldr	r3, [r3, #8]
   b6634:	4718      	bx	r3

000b6636 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6636:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6638:	210d      	movs	r1, #13
{
   b663a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b663c:	f7ff fff8 	bl	b6630 <_ZN5Print5printEc>
  n += print('\n');
   b6640:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6642:	4604      	mov	r4, r0
  n += print('\n');
   b6644:	4628      	mov	r0, r5
   b6646:	f7ff fff3 	bl	b6630 <_ZN5Print5printEc>
  return n;
}
   b664a:	4420      	add	r0, r4
   b664c:	bd38      	pop	{r3, r4, r5, pc}

000b664e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b664e:	b538      	push	{r3, r4, r5, lr}
   b6650:	4605      	mov	r5, r0
  return write(str);
   b6652:	f7ff ffd7 	bl	b6604 <_ZN5Print5writeEPKc>
   b6656:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6658:	4628      	mov	r0, r5
   b665a:	f7ff ffec 	bl	b6636 <_ZN5Print7printlnEv>
  return n;
}
   b665e:	4420      	add	r0, r4
   b6660:	bd38      	pop	{r3, r4, r5, pc}

000b6662 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6662:	b530      	push	{r4, r5, lr}
   b6664:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6666:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6668:	2a01      	cmp	r2, #1
  *str = '\0';
   b666a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b666e:	bf98      	it	ls
   b6670:	220a      	movls	r2, #10
   b6672:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6674:	460d      	mov	r5, r1
   b6676:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b667a:	fb01 5312 	mls	r3, r1, r2, r5
   b667e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6682:	2b09      	cmp	r3, #9
   b6684:	bf94      	ite	ls
   b6686:	3330      	addls	r3, #48	; 0x30
   b6688:	3337      	addhi	r3, #55	; 0x37
   b668a:	b2db      	uxtb	r3, r3
  } while(n);
   b668c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b668e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6692:	d9ef      	bls.n	b6674 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6694:	4621      	mov	r1, r4
   b6696:	f7ff ffb5 	bl	b6604 <_ZN5Print5writeEPKc>
}
   b669a:	b00b      	add	sp, #44	; 0x2c
   b669c:	bd30      	pop	{r4, r5, pc}

000b669e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b669e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b66a2:	b086      	sub	sp, #24
   b66a4:	af00      	add	r7, sp, #0
   b66a6:	4605      	mov	r5, r0
   b66a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b66aa:	1d38      	adds	r0, r7, #4
   b66ac:	2114      	movs	r1, #20
{
   b66ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   b66b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b66b2:	f7ff fdcb 	bl	b624c <vsnprintf>

    if (n<bufsize)
   b66b6:	2813      	cmp	r0, #19
   b66b8:	d80e      	bhi.n	b66d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b66ba:	1d39      	adds	r1, r7, #4
   b66bc:	4628      	mov	r0, r5
   b66be:	f7ff ffa1 	bl	b6604 <_ZN5Print5writeEPKc>
   b66c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b66c4:	b11e      	cbz	r6, b66ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b66c6:	4628      	mov	r0, r5
   b66c8:	f7ff ffb5 	bl	b6636 <_ZN5Print7printlnEv>
   b66cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b66ce:	4620      	mov	r0, r4
   b66d0:	3718      	adds	r7, #24
   b66d2:	46bd      	mov	sp, r7
   b66d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b66d8:	f100 0308 	add.w	r3, r0, #8
   b66dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b66e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b66e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b66e6:	4622      	mov	r2, r4
   b66e8:	1c41      	adds	r1, r0, #1
   b66ea:	683b      	ldr	r3, [r7, #0]
   b66ec:	4668      	mov	r0, sp
   b66ee:	f7ff fdad 	bl	b624c <vsnprintf>
  return write(str);
   b66f2:	4669      	mov	r1, sp
   b66f4:	4628      	mov	r0, r5
   b66f6:	f7ff ff85 	bl	b6604 <_ZN5Print5writeEPKc>
   b66fa:	4604      	mov	r4, r0
   b66fc:	46c5      	mov	sp, r8
   b66fe:	e7e1      	b.n	b66c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6700 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6700:	4b01      	ldr	r3, [pc, #4]	; (b6708 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6702:	4a02      	ldr	r2, [pc, #8]	; (b670c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6704:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6706:	4770      	bx	lr
   b6708:	2003e6e0 	.word	0x2003e6e0
   b670c:	000ba8d0 	.word	0x000ba8d0

000b6710 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6710:	4b02      	ldr	r3, [pc, #8]	; (b671c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6712:	681a      	ldr	r2, [r3, #0]
   b6714:	4b02      	ldr	r3, [pc, #8]	; (b6720 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6716:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6718:	4770      	bx	lr
   b671a:	bf00      	nop
   b671c:	2003e30c 	.word	0x2003e30c
   b6720:	2003e6e4 	.word	0x2003e6e4

000b6724 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6724:	2100      	movs	r1, #0
   b6726:	f7ff bcf5 	b.w	b6114 <system_delay_ms>
	...

000b672c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b672c:	b510      	push	{r4, lr}
   b672e:	4b04      	ldr	r3, [pc, #16]	; (b6740 <_ZN9TCPClientD1Ev+0x14>)
   b6730:	6003      	str	r3, [r0, #0]
   b6732:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b6734:	6980      	ldr	r0, [r0, #24]
   b6736:	b108      	cbz	r0, b673c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b6738:	f7ff ff32 	bl	b65a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b673c:	4620      	mov	r0, r4
   b673e:	bd10      	pop	{r4, pc}
   b6740:	000ba9c8 	.word	0x000ba9c8

000b6744 <_ZN9TCPClientD0Ev>:
   b6744:	b510      	push	{r4, lr}
   b6746:	4604      	mov	r4, r0
   b6748:	f7ff fff0 	bl	b672c <_ZN9TCPClientD1Ev>
   b674c:	4620      	mov	r0, r4
   b674e:	211c      	movs	r1, #28
   b6750:	f7fd fca5 	bl	b409e <_ZdlPvj>
   b6754:	4620      	mov	r0, r4
   b6756:	bd10      	pop	{r4, pc}

000b6758 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6758:	4b01      	ldr	r3, [pc, #4]	; (b6760 <_GLOBAL__sub_I_RGB+0x8>)
   b675a:	2200      	movs	r2, #0
   b675c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b675e:	4770      	bx	lr
   b6760:	2003e6e8 	.word	0x2003e6e8

000b6764 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6764:	4b01      	ldr	r3, [pc, #4]	; (b676c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6766:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6768:	4770      	bx	lr
   b676a:	bf00      	nop
   b676c:	2003e310 	.word	0x2003e310

000b6770 <serialEventRun>:
{
   b6770:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6772:	4b0b      	ldr	r3, [pc, #44]	; (b67a0 <serialEventRun+0x30>)
   b6774:	b143      	cbz	r3, b6788 <serialEventRun+0x18>
   b6776:	f000 f981 	bl	b6a7c <_Z16_fetch_usbserialv>
   b677a:	6803      	ldr	r3, [r0, #0]
   b677c:	691b      	ldr	r3, [r3, #16]
   b677e:	4798      	blx	r3
   b6780:	2800      	cmp	r0, #0
   b6782:	dd01      	ble.n	b6788 <serialEventRun+0x18>
        serialEvent();
   b6784:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6788:	4b06      	ldr	r3, [pc, #24]	; (b67a4 <serialEventRun+0x34>)
   b678a:	b143      	cbz	r3, b679e <serialEventRun+0x2e>
   b678c:	f000 feec 	bl	b7568 <_Z22__fetch_global_Serial1v>
   b6790:	6803      	ldr	r3, [r0, #0]
   b6792:	691b      	ldr	r3, [r3, #16]
   b6794:	4798      	blx	r3
   b6796:	2800      	cmp	r0, #0
   b6798:	dd01      	ble.n	b679e <serialEventRun+0x2e>
        serialEvent1();
   b679a:	f3af 8000 	nop.w
}
   b679e:	bd08      	pop	{r3, pc}
	...

000b67a8 <_post_loop>:
{
   b67a8:	b508      	push	{r3, lr}
	serialEventRun();
   b67aa:	f7ff ffe1 	bl	b6770 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b67ae:	f7ff fb09 	bl	b5dc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b67b2:	4b01      	ldr	r3, [pc, #4]	; (b67b8 <_post_loop+0x10>)
   b67b4:	6018      	str	r0, [r3, #0]
}
   b67b6:	bd08      	pop	{r3, pc}
   b67b8:	2003e740 	.word	0x2003e740

000b67bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b67bc:	4805      	ldr	r0, [pc, #20]	; (b67d4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b67be:	4a06      	ldr	r2, [pc, #24]	; (b67d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b67c0:	4906      	ldr	r1, [pc, #24]	; (b67dc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b67c2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b67c4:	1a12      	subs	r2, r2, r0
   b67c6:	f001 fcec 	bl	b81a2 <memcpy>
    __backup_sram_signature = signature;
   b67ca:	4b05      	ldr	r3, [pc, #20]	; (b67e0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b67cc:	4a05      	ldr	r2, [pc, #20]	; (b67e4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b67ce:	601a      	str	r2, [r3, #0]
}
   b67d0:	bd08      	pop	{r3, pc}
   b67d2:	bf00      	nop
   b67d4:	2003f400 	.word	0x2003f400
   b67d8:	2003f404 	.word	0x2003f404
   b67dc:	000bafe4 	.word	0x000bafe4
   b67e0:	2003f400 	.word	0x2003f400
   b67e4:	9a271c1e 	.word	0x9a271c1e

000b67e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b67e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b67ea:	2300      	movs	r3, #0
   b67ec:	9300      	str	r3, [sp, #0]
   b67ee:	461a      	mov	r2, r3
   b67f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b67f4:	f7ff fca0 	bl	b6138 <system_ctrl_set_result>
}
   b67f8:	b003      	add	sp, #12
   b67fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6800 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6800:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6802:	8843      	ldrh	r3, [r0, #2]
   b6804:	2b0a      	cmp	r3, #10
   b6806:	d008      	beq.n	b681a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6808:	2b50      	cmp	r3, #80	; 0x50
   b680a:	d10b      	bne.n	b6824 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b680c:	4b09      	ldr	r3, [pc, #36]	; (b6834 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b680e:	681b      	ldr	r3, [r3, #0]
   b6810:	b14b      	cbz	r3, b6826 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6812:	b003      	add	sp, #12
   b6814:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6818:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b681a:	f7ff ffe5 	bl	b67e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b681e:	b003      	add	sp, #12
   b6820:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6824:	2300      	movs	r3, #0
   b6826:	9300      	str	r3, [sp, #0]
   b6828:	461a      	mov	r2, r3
   b682a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b682e:	f7ff fc83 	bl	b6138 <system_ctrl_set_result>
}
   b6832:	e7f4      	b.n	b681e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6834:	2003e6fc 	.word	0x2003e6fc

000b6838 <module_user_init_hook>:
{
   b6838:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b683a:	4812      	ldr	r0, [pc, #72]	; (b6884 <module_user_init_hook+0x4c>)
   b683c:	2100      	movs	r1, #0
   b683e:	f7ff fd25 	bl	b628c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6842:	4b11      	ldr	r3, [pc, #68]	; (b6888 <module_user_init_hook+0x50>)
   b6844:	681a      	ldr	r2, [r3, #0]
   b6846:	4b11      	ldr	r3, [pc, #68]	; (b688c <module_user_init_hook+0x54>)
   b6848:	429a      	cmp	r2, r3
   b684a:	4b11      	ldr	r3, [pc, #68]	; (b6890 <module_user_init_hook+0x58>)
   b684c:	bf0c      	ite	eq
   b684e:	2201      	moveq	r2, #1
   b6850:	2200      	movne	r2, #0
   b6852:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6854:	d001      	beq.n	b685a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6856:	f7ff ffb1 	bl	b67bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b685a:	f7ff fa9b 	bl	b5d94 <HAL_RNG_GetRandomNumber>
   b685e:	4604      	mov	r4, r0
    srand(seed);
   b6860:	f001 fcd0 	bl	b8204 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6864:	4b0b      	ldr	r3, [pc, #44]	; (b6894 <module_user_init_hook+0x5c>)
   b6866:	b113      	cbz	r3, b686e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6868:	4620      	mov	r0, r4
   b686a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b686e:	2100      	movs	r1, #0
   b6870:	4808      	ldr	r0, [pc, #32]	; (b6894 <module_user_init_hook+0x5c>)
   b6872:	f7ff fcd3 	bl	b621c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b687a:	4807      	ldr	r0, [pc, #28]	; (b6898 <module_user_init_hook+0x60>)
   b687c:	2100      	movs	r1, #0
   b687e:	f7ff bc51 	b.w	b6124 <system_ctrl_set_app_request_handler>
   b6882:	bf00      	nop
   b6884:	000b6765 	.word	0x000b6765
   b6888:	2003f400 	.word	0x2003f400
   b688c:	9a271c1e 	.word	0x9a271c1e
   b6890:	2003e6f8 	.word	0x2003e6f8
   b6894:	00000000 	.word	0x00000000
   b6898:	000b6801 	.word	0x000b6801

000b689c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b689c:	4770      	bx	lr

000b689e <_ZN9IPAddressD0Ev>:
   b689e:	b510      	push	{r4, lr}
   b68a0:	2118      	movs	r1, #24
   b68a2:	4604      	mov	r4, r0
   b68a4:	f7fd fbfb 	bl	b409e <_ZdlPvj>
   b68a8:	4620      	mov	r0, r4
   b68aa:	bd10      	pop	{r4, pc}

000b68ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b68ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b68ae:	7d03      	ldrb	r3, [r0, #20]
   b68b0:	2b06      	cmp	r3, #6
{
   b68b2:	b08d      	sub	sp, #52	; 0x34
   b68b4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b68b6:	f100 0704 	add.w	r7, r0, #4
   b68ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b68be:	d012      	beq.n	b68e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b68c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b68c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b68c8:	220a      	movs	r2, #10
   b68ca:	4630      	mov	r0, r6
   b68cc:	f7ff fec9 	bl	b6662 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b68d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b68d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b68d4:	d019      	beq.n	b690a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b68d6:	2c00      	cmp	r4, #0
   b68d8:	d0f4      	beq.n	b68c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b68da:	212e      	movs	r1, #46	; 0x2e
   b68dc:	4630      	mov	r0, r6
   b68de:	f7ff fea7 	bl	b6630 <_ZN5Print5printEc>
   b68e2:	4404      	add	r4, r0
   b68e4:	e7ee      	b.n	b68c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b68e6:	232f      	movs	r3, #47	; 0x2f
   b68e8:	466a      	mov	r2, sp
   b68ea:	4639      	mov	r1, r7
   b68ec:	200a      	movs	r0, #10
		buf[0] = 0;
   b68ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b68f2:	f7ff fa7f 	bl	b5df4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b68f6:	4668      	mov	r0, sp
   b68f8:	f001 fcc4 	bl	b8284 <strlen>
   b68fc:	6833      	ldr	r3, [r6, #0]
   b68fe:	4602      	mov	r2, r0
   b6900:	68db      	ldr	r3, [r3, #12]
   b6902:	4669      	mov	r1, sp
   b6904:	4630      	mov	r0, r6
   b6906:	4798      	blx	r3
   b6908:	4604      	mov	r4, r0
    }
    return n;
}
   b690a:	4620      	mov	r0, r4
   b690c:	b00d      	add	sp, #52	; 0x34
   b690e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6910 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6910:	b510      	push	{r4, lr}
   b6912:	4b05      	ldr	r3, [pc, #20]	; (b6928 <_ZN9IPAddressC1Ev+0x18>)
   b6914:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6916:	2211      	movs	r2, #17
   b6918:	f840 3b04 	str.w	r3, [r0], #4
   b691c:	2100      	movs	r1, #0
   b691e:	f001 fc68 	bl	b81f2 <memset>
}
   b6922:	4620      	mov	r0, r4
   b6924:	bd10      	pop	{r4, pc}
   b6926:	bf00      	nop
   b6928:	000ba8f8 	.word	0x000ba8f8

000b692c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b692c:	4603      	mov	r3, r0
   b692e:	4a07      	ldr	r2, [pc, #28]	; (b694c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6930:	b510      	push	{r4, lr}
   b6932:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6936:	f101 0210 	add.w	r2, r1, #16
   b693a:	f851 4b04 	ldr.w	r4, [r1], #4
   b693e:	f843 4b04 	str.w	r4, [r3], #4
   b6942:	4291      	cmp	r1, r2
   b6944:	d1f9      	bne.n	b693a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6946:	780a      	ldrb	r2, [r1, #0]
   b6948:	701a      	strb	r2, [r3, #0]
}
   b694a:	bd10      	pop	{r4, pc}
   b694c:	000ba8f8 	.word	0x000ba8f8

000b6950 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6950:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6952:	2b04      	cmp	r3, #4
   b6954:	d104      	bne.n	b6960 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6956:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6958:	3800      	subs	r0, #0
   b695a:	bf18      	it	ne
   b695c:	2001      	movne	r0, #1
   b695e:	4770      	bx	lr
    } else if (version() == 6) {
   b6960:	2b06      	cmp	r3, #6
   b6962:	d107      	bne.n	b6974 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6964:	6843      	ldr	r3, [r0, #4]
   b6966:	b93b      	cbnz	r3, b6978 <_ZNK9IPAddresscvbEv+0x28>
   b6968:	6883      	ldr	r3, [r0, #8]
   b696a:	b92b      	cbnz	r3, b6978 <_ZNK9IPAddresscvbEv+0x28>
   b696c:	68c3      	ldr	r3, [r0, #12]
   b696e:	b91b      	cbnz	r3, b6978 <_ZNK9IPAddresscvbEv+0x28>
   b6970:	6900      	ldr	r0, [r0, #16]
   b6972:	e7f1      	b.n	b6958 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6974:	2000      	movs	r0, #0
   b6976:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6978:	2001      	movs	r0, #1
}
   b697a:	4770      	bx	lr

000b697c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b697c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b697e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6982:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6986:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b698a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b698e:	2304      	movs	r3, #4
   b6990:	6041      	str	r1, [r0, #4]
   b6992:	7503      	strb	r3, [r0, #20]
}
   b6994:	bd10      	pop	{r4, pc}
	...

000b6998 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6998:	b507      	push	{r0, r1, r2, lr}
   b699a:	4b06      	ldr	r3, [pc, #24]	; (b69b4 <_ZN9IPAddressC1EPKh+0x1c>)
   b699c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b699e:	78cb      	ldrb	r3, [r1, #3]
   b69a0:	9300      	str	r3, [sp, #0]
   b69a2:	788b      	ldrb	r3, [r1, #2]
   b69a4:	784a      	ldrb	r2, [r1, #1]
   b69a6:	7809      	ldrb	r1, [r1, #0]
   b69a8:	f7ff ffe8 	bl	b697c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b69ac:	b003      	add	sp, #12
   b69ae:	f85d fb04 	ldr.w	pc, [sp], #4
   b69b2:	bf00      	nop
   b69b4:	000ba8f8 	.word	0x000ba8f8

000b69b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b69b8:	7441      	strb	r1, [r0, #17]
}
   b69ba:	4770      	bx	lr

000b69bc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b69bc:	4770      	bx	lr

000b69be <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b69be:	4770      	bx	lr

000b69c0 <_ZN9USBSerial4readEv>:
{
   b69c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b69c2:	2100      	movs	r1, #0
   b69c4:	7c00      	ldrb	r0, [r0, #16]
   b69c6:	f7ff fb6d 	bl	b60a4 <HAL_USB_USART_Receive_Data>
}
   b69ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69ce:	bd08      	pop	{r3, pc}

000b69d0 <_ZN9USBSerial4peekEv>:
{
   b69d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b69d2:	2101      	movs	r1, #1
   b69d4:	7c00      	ldrb	r0, [r0, #16]
   b69d6:	f7ff fb65 	bl	b60a4 <HAL_USB_USART_Receive_Data>
}
   b69da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69de:	bd08      	pop	{r3, pc}

000b69e0 <_ZN9USBSerial17availableForWriteEv>:
{
   b69e0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b69e2:	7c00      	ldrb	r0, [r0, #16]
   b69e4:	f7ff fb56 	bl	b6094 <HAL_USB_USART_Available_Data_For_Write>
}
   b69e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69ec:	bd08      	pop	{r3, pc}

000b69ee <_ZN9USBSerial9availableEv>:
{
   b69ee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b69f0:	7c00      	ldrb	r0, [r0, #16]
   b69f2:	f7ff fb47 	bl	b6084 <HAL_USB_USART_Available_Data>
}
   b69f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69fa:	bd08      	pop	{r3, pc}

000b69fc <_ZN9USBSerial5writeEh>:
{
   b69fc:	b513      	push	{r0, r1, r4, lr}
   b69fe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6a00:	7c00      	ldrb	r0, [r0, #16]
{
   b6a02:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6a04:	f7ff fb46 	bl	b6094 <HAL_USB_USART_Available_Data_For_Write>
   b6a08:	2800      	cmp	r0, #0
   b6a0a:	9901      	ldr	r1, [sp, #4]
   b6a0c:	dc01      	bgt.n	b6a12 <_ZN9USBSerial5writeEh+0x16>
   b6a0e:	7c60      	ldrb	r0, [r4, #17]
   b6a10:	b120      	cbz	r0, b6a1c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6a12:	7c20      	ldrb	r0, [r4, #16]
   b6a14:	f7ff fb4e 	bl	b60b4 <HAL_USB_USART_Send_Data>
   b6a18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6a1c:	b002      	add	sp, #8
   b6a1e:	bd10      	pop	{r4, pc}

000b6a20 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6a20:	7c00      	ldrb	r0, [r0, #16]
   b6a22:	f7ff bb4f 	b.w	b60c4 <HAL_USB_USART_Flush_Data>

000b6a26 <_ZN9USBSerialD0Ev>:
   b6a26:	b510      	push	{r4, lr}
   b6a28:	2114      	movs	r1, #20
   b6a2a:	4604      	mov	r4, r0
   b6a2c:	f7fd fb37 	bl	b409e <_ZdlPvj>
   b6a30:	4620      	mov	r0, r4
   b6a32:	bd10      	pop	{r4, pc}

000b6a34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6a34:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a3a:	4604      	mov	r4, r0
   b6a3c:	4608      	mov	r0, r1
   b6a3e:	2100      	movs	r1, #0
   b6a40:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6a44:	4b04      	ldr	r3, [pc, #16]	; (b6a58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6a46:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6a48:	2301      	movs	r3, #1
  _serial = serial;
   b6a4a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6a4c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6a4e:	4611      	mov	r1, r2
   b6a50:	f7ff fb08 	bl	b6064 <HAL_USB_USART_Init>
}
   b6a54:	4620      	mov	r0, r4
   b6a56:	bd10      	pop	{r4, pc}
   b6a58:	000ba90c 	.word	0x000ba90c

000b6a5c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6a5c:	7c00      	ldrb	r0, [r0, #16]
   b6a5e:	2200      	movs	r2, #0
   b6a60:	f7ff bb08 	b.w	b6074 <HAL_USB_USART_Begin>

000b6a64 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6a64:	7c00      	ldrb	r0, [r0, #16]
   b6a66:	f7ff bb35 	b.w	b60d4 <HAL_USB_USART_Is_Connected>

000b6a6a <_Z19acquireSerialBufferv>:
{
   b6a6a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6a6c:	2214      	movs	r2, #20
{
   b6a6e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6a70:	2100      	movs	r1, #0
   b6a72:	f001 fbbe 	bl	b81f2 <memset>
}
   b6a76:	4620      	mov	r0, r4
   b6a78:	bd10      	pop	{r4, pc}
	...

000b6a7c <_Z16_fetch_usbserialv>:
{
   b6a7c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6a7e:	4c0f      	ldr	r4, [pc, #60]	; (b6abc <_Z16_fetch_usbserialv+0x40>)
{
   b6a80:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6a82:	a803      	add	r0, sp, #12
   b6a84:	f7ff fff1 	bl	b6a6a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6a88:	7821      	ldrb	r1, [r4, #0]
   b6a8a:	f3bf 8f5b 	dmb	ish
   b6a8e:	f011 0101 	ands.w	r1, r1, #1
   b6a92:	d10f      	bne.n	b6ab4 <_Z16_fetch_usbserialv+0x38>
   b6a94:	4620      	mov	r0, r4
   b6a96:	9101      	str	r1, [sp, #4]
   b6a98:	f7fd fb10 	bl	b40bc <__cxa_guard_acquire>
   b6a9c:	9901      	ldr	r1, [sp, #4]
   b6a9e:	b148      	cbz	r0, b6ab4 <_Z16_fetch_usbserialv+0x38>
   b6aa0:	aa03      	add	r2, sp, #12
   b6aa2:	4807      	ldr	r0, [pc, #28]	; (b6ac0 <_Z16_fetch_usbserialv+0x44>)
   b6aa4:	f7ff ffc6 	bl	b6a34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	f7fd fb0c 	bl	b40c6 <__cxa_guard_release>
   b6aae:	4805      	ldr	r0, [pc, #20]	; (b6ac4 <_Z16_fetch_usbserialv+0x48>)
   b6ab0:	f001 fb6e 	bl	b8190 <atexit>
	return _usbserial;
}
   b6ab4:	4802      	ldr	r0, [pc, #8]	; (b6ac0 <_Z16_fetch_usbserialv+0x44>)
   b6ab6:	b008      	add	sp, #32
   b6ab8:	bd10      	pop	{r4, pc}
   b6aba:	bf00      	nop
   b6abc:	2003e700 	.word	0x2003e700
   b6ac0:	2003e704 	.word	0x2003e704
   b6ac4:	000b69bd 	.word	0x000b69bd

000b6ac8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6ac8:	4770      	bx	lr

000b6aca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6aca:	7441      	strb	r1, [r0, #17]
}
   b6acc:	4770      	bx	lr

000b6ace <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6ace:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6ad0:	7c00      	ldrb	r0, [r0, #16]
   b6ad2:	f7ff f9d7 	bl	b5e84 <hal_usart_available_data_for_write>
}
   b6ad6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ada:	bd08      	pop	{r3, pc}

000b6adc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6adc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6ade:	7c00      	ldrb	r0, [r0, #16]
   b6ae0:	f7ff f9a8 	bl	b5e34 <hal_usart_available>
}
   b6ae4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ae8:	bd08      	pop	{r3, pc}

000b6aea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6aea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6aec:	7c00      	ldrb	r0, [r0, #16]
   b6aee:	f7ff f9b1 	bl	b5e54 <hal_usart_peek>
}
   b6af2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6af6:	bd08      	pop	{r3, pc}

000b6af8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6af8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6afa:	7c00      	ldrb	r0, [r0, #16]
   b6afc:	f7ff f9a2 	bl	b5e44 <hal_usart_read>
}
   b6b00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b04:	bd08      	pop	{r3, pc}

000b6b06 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6b06:	7c00      	ldrb	r0, [r0, #16]
   b6b08:	f7ff b9ac 	b.w	b5e64 <hal_usart_flush>

000b6b0c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b0e:	7c45      	ldrb	r5, [r0, #17]
{
   b6b10:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b12:	b12d      	cbz	r5, b6b20 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6b14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6b16:	b003      	add	sp, #12
   b6b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6b1c:	f7ff b982 	b.w	b5e24 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b20:	7c00      	ldrb	r0, [r0, #16]
   b6b22:	9101      	str	r1, [sp, #4]
   b6b24:	f7ff f9ae 	bl	b5e84 <hal_usart_available_data_for_write>
   b6b28:	2800      	cmp	r0, #0
   b6b2a:	9901      	ldr	r1, [sp, #4]
   b6b2c:	dcf2      	bgt.n	b6b14 <_ZN11USARTSerial5writeEh+0x8>
}
   b6b2e:	4628      	mov	r0, r5
   b6b30:	b003      	add	sp, #12
   b6b32:	bd30      	pop	{r4, r5, pc}

000b6b34 <_ZN11USARTSerialD0Ev>:
   b6b34:	b510      	push	{r4, lr}
   b6b36:	2114      	movs	r1, #20
   b6b38:	4604      	mov	r4, r0
   b6b3a:	f7fd fab0 	bl	b409e <_ZdlPvj>
   b6b3e:	4620      	mov	r0, r4
   b6b40:	bd10      	pop	{r4, pc}
	...

000b6b44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6b44:	b510      	push	{r4, lr}
   b6b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6b4a:	4604      	mov	r4, r0
   b6b4c:	4608      	mov	r0, r1
   b6b4e:	4611      	mov	r1, r2
   b6b50:	2200      	movs	r2, #0
   b6b52:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6b56:	4b04      	ldr	r3, [pc, #16]	; (b6b68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6b58:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6b5a:	2301      	movs	r3, #1
  _serial = serial;
   b6b5c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6b5e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6b60:	f7ff f998 	bl	b5e94 <hal_usart_init_ex>
}
   b6b64:	4620      	mov	r0, r4
   b6b66:	bd10      	pop	{r4, pc}
   b6b68:	000ba93c 	.word	0x000ba93c

000b6b6c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6b6c:	4770      	bx	lr

000b6b6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b70:	4606      	mov	r6, r0
   b6b72:	4615      	mov	r5, r2
   b6b74:	460c      	mov	r4, r1
   b6b76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6b78:	42bc      	cmp	r4, r7
   b6b7a:	d006      	beq.n	b6b8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6b7c:	6833      	ldr	r3, [r6, #0]
   b6b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6b82:	689b      	ldr	r3, [r3, #8]
   b6b84:	4630      	mov	r0, r6
   b6b86:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6b88:	e7f6      	b.n	b6b78 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6b8a:	4628      	mov	r0, r5
   b6b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b8e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6b8e:	7c00      	ldrb	r0, [r0, #16]
   b6b90:	2200      	movs	r2, #0
   b6b92:	f7ff b99f 	b.w	b5ed4 <hal_i2c_write>

000b6b96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6b96:	7c00      	ldrb	r0, [r0, #16]
   b6b98:	2100      	movs	r1, #0
   b6b9a:	f7ff b9a3 	b.w	b5ee4 <hal_i2c_available>

000b6b9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6b9e:	7c00      	ldrb	r0, [r0, #16]
   b6ba0:	2100      	movs	r1, #0
   b6ba2:	f7ff b9a7 	b.w	b5ef4 <hal_i2c_read>

000b6ba6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6ba6:	7c00      	ldrb	r0, [r0, #16]
   b6ba8:	2100      	movs	r1, #0
   b6baa:	f7ff b9ab 	b.w	b5f04 <hal_i2c_peek>

000b6bae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6bae:	7c00      	ldrb	r0, [r0, #16]
   b6bb0:	2100      	movs	r1, #0
   b6bb2:	f7ff b9af 	b.w	b5f14 <hal_i2c_flush>

000b6bb6 <_ZN7TwoWireD0Ev>:
   b6bb6:	b510      	push	{r4, lr}
   b6bb8:	2114      	movs	r1, #20
   b6bba:	4604      	mov	r4, r0
   b6bbc:	f7fd fa6f 	bl	b409e <_ZdlPvj>
   b6bc0:	4620      	mov	r0, r4
   b6bc2:	bd10      	pop	{r4, pc}

000b6bc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6bc4:	b538      	push	{r3, r4, r5, lr}
   b6bc6:	4604      	mov	r4, r0
   b6bc8:	4615      	mov	r5, r2
   b6bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6bce:	2200      	movs	r2, #0
   b6bd0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6bd4:	4b09      	ldr	r3, [pc, #36]	; (b6bfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6bd6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6bd8:	4608      	mov	r0, r1
   b6bda:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6bdc:	4629      	mov	r1, r5
   b6bde:	f7ff f9a9 	bl	b5f34 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6be2:	30bf      	adds	r0, #191	; 0xbf
   b6be4:	d108      	bne.n	b6bf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6be6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6be8:	07db      	lsls	r3, r3, #31
   b6bea:	d505      	bpl.n	b6bf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6bec:	6868      	ldr	r0, [r5, #4]
   b6bee:	f7ff fb25 	bl	b623c <free>
    free(conf.tx_buffer);
   b6bf2:	68e8      	ldr	r0, [r5, #12]
   b6bf4:	f7ff fb22 	bl	b623c <free>
}
   b6bf8:	4620      	mov	r0, r4
   b6bfa:	bd38      	pop	{r3, r4, r5, pc}
   b6bfc:	000ba96c 	.word	0x000ba96c

000b6c00 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6c00:	2300      	movs	r3, #0
   b6c02:	7c00      	ldrb	r0, [r0, #16]
   b6c04:	461a      	mov	r2, r3
   b6c06:	4619      	mov	r1, r3
   b6c08:	f7ff b94c 	b.w	b5ea4 <hal_i2c_begin>

000b6c0c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6c0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6c0e:	2200      	movs	r2, #0
   b6c10:	2314      	movs	r3, #20
   b6c12:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6c16:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6c1a:	780b      	ldrb	r3, [r1, #0]
   b6c1c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6c20:	684b      	ldr	r3, [r1, #4]
   b6c22:	9303      	str	r3, [sp, #12]
   b6c24:	68cb      	ldr	r3, [r1, #12]
   b6c26:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6c28:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6c2a:	7a0b      	ldrb	r3, [r1, #8]
   b6c2c:	9305      	str	r3, [sp, #20]
   b6c2e:	a901      	add	r1, sp, #4
   b6c30:	f7ff f988 	bl	b5f44 <hal_i2c_request_ex>
}
   b6c34:	b007      	add	sp, #28
   b6c36:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c3a <_ZN7TwoWire11requestFromEhjh>:
{
   b6c3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6c3c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6c3e:	f88d 1000 	strb.w	r1, [sp]
   b6c42:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6c46:	9103      	str	r1, [sp, #12]
   b6c48:	bf18      	it	ne
   b6c4a:	2301      	movne	r3, #1
   b6c4c:	4669      	mov	r1, sp
    size_ = size;
   b6c4e:	9201      	str	r2, [sp, #4]
   b6c50:	f88d 3008 	strb.w	r3, [sp, #8]
   b6c54:	f7ff ffda 	bl	b6c0c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6c58:	b005      	add	sp, #20
   b6c5a:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c5e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6c5e:	2301      	movs	r3, #1
   b6c60:	f7ff bfeb 	b.w	b6c3a <_ZN7TwoWire11requestFromEhjh>

000b6c64 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6c64:	7c00      	ldrb	r0, [r0, #16]
   b6c66:	2200      	movs	r2, #0
   b6c68:	f7ff b924 	b.w	b5eb4 <hal_i2c_begin_transmission>

000b6c6c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6c6c:	b2c9      	uxtb	r1, r1
   b6c6e:	f7ff bff9 	b.w	b6c64 <_ZN7TwoWire17beginTransmissionEh>

000b6c72 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6c72:	7c00      	ldrb	r0, [r0, #16]
   b6c74:	2200      	movs	r2, #0
   b6c76:	f7ff b925 	b.w	b5ec4 <hal_i2c_end_transmission>

000b6c7a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6c7a:	2101      	movs	r1, #1
   b6c7c:	f7ff bff9 	b.w	b6c72 <_ZN7TwoWire15endTransmissionEh>

000b6c80 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6c80:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6c82:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6c84:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6c88:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6c8a:	2201      	movs	r2, #1
   b6c8c:	f04f 33ff 	mov.w	r3, #4294967295
   b6c90:	f10d 0107 	add.w	r1, sp, #7
   b6c94:	47a0      	blx	r4
}
   b6c96:	b002      	add	sp, #8
   b6c98:	bd10      	pop	{r4, pc}

000b6c9a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6c9a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6c9c:	6803      	ldr	r3, [r0, #0]
   b6c9e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6ca0:	f04f 33ff 	mov.w	r3, #4294967295
   b6ca4:	46a4      	mov	ip, r4
}
   b6ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6caa:	4760      	bx	ip

000b6cac <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6cac:	b513      	push	{r0, r1, r4, lr}
   b6cae:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6cb0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6cb2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6cb6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6cb8:	f10d 0107 	add.w	r1, sp, #7
   b6cbc:	2201      	movs	r2, #1
   b6cbe:	47a0      	blx	r4
}
   b6cc0:	b002      	add	sp, #8
   b6cc2:	bd10      	pop	{r4, pc}

000b6cc4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6cc4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6cc6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6cc8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6ccc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6cd0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6cd2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6cd4:	d008      	beq.n	b6ce8 <_ZN9TCPClient4readEv+0x24>
   b6cd6:	6963      	ldr	r3, [r4, #20]
   b6cd8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6cdc:	1c51      	adds	r1, r2, #1
   b6cde:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6ce2:	4413      	add	r3, r2
   b6ce4:	7918      	ldrb	r0, [r3, #4]
}
   b6ce6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6ce8:	6803      	ldr	r3, [r0, #0]
   b6cea:	691b      	ldr	r3, [r3, #16]
   b6cec:	4798      	blx	r3
   b6cee:	2800      	cmp	r0, #0
   b6cf0:	d1f1      	bne.n	b6cd6 <_ZN9TCPClient4readEv+0x12>
   b6cf2:	f04f 30ff 	mov.w	r0, #4294967295
   b6cf6:	e7f6      	b.n	b6ce6 <_ZN9TCPClient4readEv+0x22>

000b6cf8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6cf8:	4770      	bx	lr

000b6cfa <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6cfa:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6cfc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6cfe:	43c0      	mvns	r0, r0
   b6d00:	0fc0      	lsrs	r0, r0, #31
   b6d02:	4770      	bx	lr

000b6d04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6d04:	4770      	bx	lr
	...

000b6d08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6d08:	4b06      	ldr	r3, [pc, #24]	; (b6d24 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6d0a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6d0c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6d0e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6d12:	d005      	beq.n	b6d20 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6d14:	4608      	mov	r0, r1
   b6d16:	f000 fc8d 	bl	b7634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6d1a:	2800      	cmp	r0, #0
   b6d1c:	bf08      	it	eq
   b6d1e:	2400      	moveq	r4, #0
      }
   b6d20:	4620      	mov	r0, r4
   b6d22:	bd10      	pop	{r4, pc}
   b6d24:	000ba8c8 	.word	0x000ba8c8

000b6d28 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6d28:	b510      	push	{r4, lr}
   b6d2a:	21ac      	movs	r1, #172	; 0xac
   b6d2c:	4604      	mov	r4, r0
   b6d2e:	f7fd f9b6 	bl	b409e <_ZdlPvj>
   b6d32:	4620      	mov	r0, r4
   b6d34:	bd10      	pop	{r4, pc}

000b6d36 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6d36:	21ac      	movs	r1, #172	; 0xac
   b6d38:	f7fd b9b1 	b.w	b409e <_ZdlPvj>

000b6d3c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6d40:	f04f 0800 	mov.w	r8, #0
   b6d44:	b086      	sub	sp, #24
   b6d46:	461c      	mov	r4, r3
   b6d48:	f8c0 8004 	str.w	r8, [r0, #4]
   b6d4c:	4605      	mov	r5, r0
   b6d4e:	460e      	mov	r6, r1
   b6d50:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6d52:	4641      	mov	r1, r8
   b6d54:	2210      	movs	r2, #16
   b6d56:	a802      	add	r0, sp, #8
   b6d58:	f001 fa4b 	bl	b81f2 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6d5c:	1c63      	adds	r3, r4, #1
   b6d5e:	d009      	beq.n	b6d74 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d64:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6d68:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6d6c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6d70:	435c      	muls	r4, r3
   b6d72:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6d74:	6968      	ldr	r0, [r5, #20]
   b6d76:	2310      	movs	r3, #16
   b6d78:	9300      	str	r3, [sp, #0]
   b6d7a:	6800      	ldr	r0, [r0, #0]
   b6d7c:	ab02      	add	r3, sp, #8
   b6d7e:	f241 0205 	movw	r2, #4101	; 0x1005
   b6d82:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6d86:	f7ff f8e5 	bl	b5f54 <sock_setsockopt>
    if (ret < 0) {
   b6d8a:	2800      	cmp	r0, #0
   b6d8c:	da07      	bge.n	b6d9e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6d8e:	f7ff fa6d 	bl	b626c <__errno>
   b6d92:	6803      	ldr	r3, [r0, #0]
   b6d94:	606b      	str	r3, [r5, #4]
        return 0;
   b6d96:	2000      	movs	r0, #0
}
   b6d98:	b006      	add	sp, #24
   b6d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6d9e:	6968      	ldr	r0, [r5, #20]
   b6da0:	2300      	movs	r3, #0
   b6da2:	6800      	ldr	r0, [r0, #0]
   b6da4:	463a      	mov	r2, r7
   b6da6:	4631      	mov	r1, r6
   b6da8:	f7ff f8f4 	bl	b5f94 <sock_send>
    if (ret < 0) {
   b6dac:	1e03      	subs	r3, r0, #0
   b6dae:	dbee      	blt.n	b6d8e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6db0:	4618      	mov	r0, r3
   b6db2:	e7f1      	b.n	b6d98 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6db4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6db4:	b530      	push	{r4, r5, lr}
   b6db6:	b087      	sub	sp, #28
   b6db8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6dba:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6dbc:	4668      	mov	r0, sp
   b6dbe:	f7ff fdeb 	bl	b6998 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6dc4:	3404      	adds	r4, #4
   b6dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6dc8:	682b      	ldr	r3, [r5, #0]
   b6dca:	7023      	strb	r3, [r4, #0]
    }
   b6dcc:	b007      	add	sp, #28
   b6dce:	bd30      	pop	{r4, r5, pc}

000b6dd0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6dd0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6dd2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6dd4:	4b05      	ldr	r3, [pc, #20]	; (b6dec <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6dd6:	4604      	mov	r4, r0
   b6dd8:	358c      	adds	r5, #140	; 0x8c
   b6dda:	f844 3b04 	str.w	r3, [r4], #4
   b6dde:	4606      	mov	r6, r0
   b6de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6de4:	682b      	ldr	r3, [r5, #0]
   b6de6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6de8:	4630      	mov	r0, r6
   b6dea:	bd70      	pop	{r4, r5, r6, pc}
   b6dec:	000ba8f8 	.word	0x000ba8f8

000b6df0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6df4:	4698      	mov	r8, r3
    stop();
   b6df6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6df8:	b093      	sub	sp, #76	; 0x4c
   b6dfa:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6dfc:	2400      	movs	r4, #0
    stop();
   b6dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e00:	4606      	mov	r6, r0
   b6e02:	4617      	mov	r7, r2
    stop();
   b6e04:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6e06:	4628      	mov	r0, r5
   b6e08:	466b      	mov	r3, sp
   b6e0a:	4622      	mov	r2, r4
   b6e0c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6e0e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6e10:	f7fe ff90 	bl	b5d34 <netdb_getaddrinfo>
   b6e14:	4605      	mov	r5, r0
   b6e16:	2800      	cmp	r0, #0
   b6e18:	d163      	bne.n	b6ee2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6e1a:	9b00      	ldr	r3, [sp, #0]
   b6e1c:	2b00      	cmp	r3, #0
   b6e1e:	d04b      	beq.n	b6eb8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6e20:	695b      	ldr	r3, [r3, #20]
   b6e22:	2b00      	cmp	r3, #0
   b6e24:	d048      	beq.n	b6eb8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6e26:	a806      	add	r0, sp, #24
   b6e28:	f7ff fd72 	bl	b6910 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6e2c:	9b00      	ldr	r3, [sp, #0]
   b6e2e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6e30:	7863      	ldrb	r3, [r4, #1]
   b6e32:	2b02      	cmp	r3, #2
   b6e34:	d104      	bne.n	b6e40 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6e36:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6e38:	a806      	add	r0, sp, #24
   b6e3a:	f7ff ffbb 	bl	b6db4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6e3e:	e026      	b.n	b6e8e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6e40:	2b0a      	cmp	r3, #10
   b6e42:	d124      	bne.n	b6e8e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6e44:	2211      	movs	r2, #17
   b6e46:	4629      	mov	r1, r5
   b6e48:	a801      	add	r0, sp, #4
   b6e4a:	f001 f9d2 	bl	b81f2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6e4e:	68a3      	ldr	r3, [r4, #8]
   b6e50:	2b00      	cmp	r3, #0
   b6e52:	d038      	beq.n	b6ec6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6e54:	f104 0308 	add.w	r3, r4, #8
   b6e58:	f10d 0c04 	add.w	ip, sp, #4
   b6e5c:	3418      	adds	r4, #24
   b6e5e:	6818      	ldr	r0, [r3, #0]
   b6e60:	6859      	ldr	r1, [r3, #4]
   b6e62:	4662      	mov	r2, ip
   b6e64:	c203      	stmia	r2!, {r0, r1}
   b6e66:	3308      	adds	r3, #8
   b6e68:	42a3      	cmp	r3, r4
   b6e6a:	4694      	mov	ip, r2
   b6e6c:	d1f7      	bne.n	b6e5e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6e6e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6e70:	a901      	add	r1, sp, #4
   b6e72:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6e74:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6e78:	f7ff fd58 	bl	b692c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6e7c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6e80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6e84:	ac07      	add	r4, sp, #28
   b6e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e88:	f8dc 3000 	ldr.w	r3, [ip]
   b6e8c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6e8e:	a806      	add	r0, sp, #24
   b6e90:	f7ff fd5e 	bl	b6950 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6e94:	b180      	cbz	r0, b6eb8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6e96:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6e98:	ad07      	add	r5, sp, #28
   b6e9a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6e9e:	4b12      	ldr	r3, [pc, #72]	; (b6ee8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6ea0:	930c      	str	r3, [sp, #48]	; 0x30
   b6ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ea4:	ac0d      	add	r4, sp, #52	; 0x34
   b6ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ea8:	682b      	ldr	r3, [r5, #0]
   b6eaa:	7023      	strb	r3, [r4, #0]
   b6eac:	463a      	mov	r2, r7
   b6eae:	4643      	mov	r3, r8
   b6eb0:	a90c      	add	r1, sp, #48	; 0x30
   b6eb2:	4630      	mov	r0, r6
   b6eb4:	47c8      	blx	r9
   b6eb6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6eb8:	9800      	ldr	r0, [sp, #0]
   b6eba:	f7fe ff33 	bl	b5d24 <netdb_freeaddrinfo>
}
   b6ebe:	4628      	mov	r0, r5
   b6ec0:	b013      	add	sp, #76	; 0x4c
   b6ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6ec6:	68e3      	ldr	r3, [r4, #12]
   b6ec8:	2b00      	cmp	r3, #0
   b6eca:	d1c3      	bne.n	b6e54 <_ZN9TCPClient7connectEPKctm+0x64>
   b6ecc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6ed0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6ed4:	f7fe ff96 	bl	b5e04 <inet_htonl>
   b6ed8:	4581      	cmp	r9, r0
   b6eda:	d1bb      	bne.n	b6e54 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6edc:	f104 0114 	add.w	r1, r4, #20
   b6ee0:	e7aa      	b.n	b6e38 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6ee2:	4625      	mov	r5, r4
   b6ee4:	e7e8      	b.n	b6eb8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6ee6:	bf00      	nop
   b6ee8:	000ba8f8 	.word	0x000ba8f8

000b6eec <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6eec:	b538      	push	{r3, r4, r5, lr}
   b6eee:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6ef0:	681a      	ldr	r2, [r3, #0]
   b6ef2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6ef4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6ef6:	da10      	bge.n	b6f1a <_ZN9TCPClient9connectedEv+0x2e>
   b6ef8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6efc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f00:	429a      	cmp	r2, r3
   b6f02:	d10a      	bne.n	b6f1a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6f04:	6803      	ldr	r3, [r0, #0]
   b6f06:	691b      	ldr	r3, [r3, #16]
   b6f08:	4798      	blx	r3
        if (!rv) {
   b6f0a:	4604      	mov	r4, r0
   b6f0c:	b928      	cbnz	r0, b6f1a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6f0e:	682b      	ldr	r3, [r5, #0]
   b6f10:	4628      	mov	r0, r5
   b6f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f14:	4798      	blx	r3
        rv = available();
   b6f16:	4620      	mov	r0, r4
}
   b6f18:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6f1a:	2001      	movs	r0, #1
   b6f1c:	e7fc      	b.n	b6f18 <_ZN9TCPClient9connectedEv+0x2c>

000b6f1e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6f1e:	b510      	push	{r4, lr}
   b6f20:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6f22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f2a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6f2c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6f2e:	d005      	beq.n	b6f3c <_ZN9TCPClient4peekEv+0x1e>
   b6f30:	6963      	ldr	r3, [r4, #20]
   b6f32:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6f36:	4413      	add	r3, r2
   b6f38:	7918      	ldrb	r0, [r3, #4]
}
   b6f3a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6f3c:	6803      	ldr	r3, [r0, #0]
   b6f3e:	691b      	ldr	r3, [r3, #16]
   b6f40:	4798      	blx	r3
   b6f42:	2800      	cmp	r0, #0
   b6f44:	d1f4      	bne.n	b6f30 <_ZN9TCPClient4peekEv+0x12>
   b6f46:	f04f 30ff 	mov.w	r0, #4294967295
   b6f4a:	e7f6      	b.n	b6f3a <_ZN9TCPClient4peekEv+0x1c>

000b6f4c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f4e:	6943      	ldr	r3, [r0, #20]
   b6f50:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6f52:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f56:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f5a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6f5c:	4605      	mov	r5, r0
   b6f5e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6f60:	d016      	beq.n	b6f90 <_ZN9TCPClient4readEPhj+0x44>
   b6f62:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6f64:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6f68:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6f6c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6f6e:	42bc      	cmp	r4, r7
   b6f70:	bf28      	it	cs
   b6f72:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6f74:	3304      	adds	r3, #4
   b6f76:	4622      	mov	r2, r4
   b6f78:	4419      	add	r1, r3
   b6f7a:	4630      	mov	r0, r6
   b6f7c:	f001 f911 	bl	b81a2 <memcpy>
   b6f80:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6f82:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6f86:	4423      	add	r3, r4
   b6f88:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6f90:	6803      	ldr	r3, [r0, #0]
   b6f92:	691b      	ldr	r3, [r3, #16]
   b6f94:	4798      	blx	r3
   b6f96:	2800      	cmp	r0, #0
   b6f98:	d1e3      	bne.n	b6f62 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6f9a:	f04f 34ff 	mov.w	r4, #4294967295
   b6f9e:	e7f5      	b.n	b6f8c <_ZN9TCPClient4readEPhj+0x40>

000b6fa0 <_ZN9TCPClient12flush_bufferEv>:
   b6fa0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6fa2:	2300      	movs	r3, #0
   b6fa4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6fa8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6faa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6fae:	4770      	bx	lr

000b6fb0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6fb4:	461f      	mov	r7, r3
    stop();
   b6fb6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6fb8:	460c      	mov	r4, r1
    stop();
   b6fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6fbc:	b08a      	sub	sp, #40	; 0x28
   b6fbe:	4605      	mov	r5, r0
   b6fc0:	4616      	mov	r6, r2
    stop();
   b6fc2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6fc4:	7d23      	ldrb	r3, [r4, #20]
   b6fc6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6fca:	2b04      	cmp	r3, #4
   b6fcc:	bf0c      	ite	eq
   b6fce:	2002      	moveq	r0, #2
   b6fd0:	200a      	movne	r0, #10
   b6fd2:	2206      	movs	r2, #6
   b6fd4:	2101      	movs	r1, #1
   b6fd6:	f7fe ffe5 	bl	b5fa4 <sock_socket>
   b6fda:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6fde:	696b      	ldr	r3, [r5, #20]
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	2b00      	cmp	r3, #0
   b6fe4:	da08      	bge.n	b6ff8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6fe6:	682b      	ldr	r3, [r5, #0]
   b6fe8:	4628      	mov	r0, r5
   b6fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6fec:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6fee:	4798      	blx	r3
}
   b6ff0:	4620      	mov	r0, r4
   b6ff2:	b00a      	add	sp, #40	; 0x28
   b6ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6ff8:	4628      	mov	r0, r5
   b6ffa:	f7ff ffd1 	bl	b6fa0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6ffe:	b1b7      	cbz	r7, b702e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7000:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7002:	a903      	add	r1, sp, #12
   b7004:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7006:	9303      	str	r3, [sp, #12]
   b7008:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b700c:	f7fe feba 	bl	b5d84 <if_index_to_name>
   b7010:	2800      	cmp	r0, #0
   b7012:	d1e8      	bne.n	b6fe6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7014:	6968      	ldr	r0, [r5, #20]
   b7016:	2306      	movs	r3, #6
   b7018:	9300      	str	r3, [sp, #0]
   b701a:	6800      	ldr	r0, [r0, #0]
   b701c:	ab03      	add	r3, sp, #12
   b701e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7022:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7026:	f7fe ff95 	bl	b5f54 <sock_setsockopt>
   b702a:	2800      	cmp	r0, #0
   b702c:	d1db      	bne.n	b6fe6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b702e:	221c      	movs	r2, #28
   b7030:	2100      	movs	r1, #0
   b7032:	a803      	add	r0, sp, #12
   b7034:	f001 f8dd 	bl	b81f2 <memset>
    if (ip.version() == 4) {
   b7038:	7d23      	ldrb	r3, [r4, #20]
   b703a:	2b04      	cmp	r3, #4
   b703c:	d11d      	bne.n	b707a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b703e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7042:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7044:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7048:	f7fe fee4 	bl	b5e14 <inet_htons>
   b704c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7050:	6860      	ldr	r0, [r4, #4]
   b7052:	f7fe fed7 	bl	b5e04 <inet_htonl>
   b7056:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7058:	696b      	ldr	r3, [r5, #20]
   b705a:	221c      	movs	r2, #28
   b705c:	6818      	ldr	r0, [r3, #0]
   b705e:	a903      	add	r1, sp, #12
   b7060:	f7fe ff88 	bl	b5f74 <sock_connect>
   b7064:	2800      	cmp	r0, #0
   b7066:	d1be      	bne.n	b6fe6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7068:	3404      	adds	r4, #4
   b706a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b706c:	696d      	ldr	r5, [r5, #20]
   b706e:	358c      	adds	r5, #140	; 0x8c
   b7070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7072:	6823      	ldr	r3, [r4, #0]
   b7074:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7076:	2401      	movs	r4, #1
   b7078:	e7ba      	b.n	b6ff0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b707a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b707e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7080:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7084:	f7fe fec6 	bl	b5e14 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7088:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b708a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b708e:	1d23      	adds	r3, r4, #4
   b7090:	f104 0714 	add.w	r7, r4, #20
   b7094:	6818      	ldr	r0, [r3, #0]
   b7096:	6859      	ldr	r1, [r3, #4]
   b7098:	4632      	mov	r2, r6
   b709a:	c203      	stmia	r2!, {r0, r1}
   b709c:	3308      	adds	r3, #8
   b709e:	42bb      	cmp	r3, r7
   b70a0:	4616      	mov	r6, r2
   b70a2:	d1f7      	bne.n	b7094 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b70a4:	e7d8      	b.n	b7058 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b70a8 <_ZN9TCPClient9availableEv>:
{
   b70a8:	b530      	push	{r4, r5, lr}
   b70aa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b70ac:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b70b0:	b08b      	sub	sp, #44	; 0x2c
   b70b2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b70b4:	b12b      	cbz	r3, b70c2 <_ZN9TCPClient9availableEv+0x1a>
   b70b6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b70ba:	429a      	cmp	r2, r3
   b70bc:	d101      	bne.n	b70c2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b70be:	f7ff ff6f 	bl	b6fa0 <_ZN9TCPClient12flush_bufferEv>
   b70c2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b70c4:	6808      	ldr	r0, [r1, #0]
   b70c6:	2800      	cmp	r0, #0
   b70c8:	db18      	blt.n	b70fc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b70ca:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b70ce:	2d7f      	cmp	r5, #127	; 0x7f
   b70d0:	d814      	bhi.n	b70fc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b70d2:	3104      	adds	r1, #4
   b70d4:	2308      	movs	r3, #8
   b70d6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b70da:	4429      	add	r1, r5
   b70dc:	f7fe ff52 	bl	b5f84 <sock_recv>
            if (ret > 0) {
   b70e0:	2800      	cmp	r0, #0
   b70e2:	dd13      	ble.n	b710c <_ZN9TCPClient9availableEv+0x64>
   b70e4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b70e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b70ea:	b90a      	cbnz	r2, b70f0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b70ec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b70f0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b70f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b70f6:	4410      	add	r0, r2
   b70f8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b70fc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b70fe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7102:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7106:	1ac0      	subs	r0, r0, r3
   b7108:	b00b      	add	sp, #44	; 0x2c
   b710a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b710c:	f7ff f8ae 	bl	b626c <__errno>
   b7110:	6803      	ldr	r3, [r0, #0]
   b7112:	2b0b      	cmp	r3, #11
   b7114:	d0f2      	beq.n	b70fc <_ZN9TCPClient9availableEv+0x54>
   b7116:	f7ff f8a9 	bl	b626c <__errno>
   b711a:	6803      	ldr	r3, [r0, #0]
   b711c:	2b0b      	cmp	r3, #11
   b711e:	d0ed      	beq.n	b70fc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7120:	2320      	movs	r3, #32
   b7122:	2500      	movs	r5, #0
   b7124:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7128:	f7ff f8a0 	bl	b626c <__errno>
   b712c:	6803      	ldr	r3, [r0, #0]
   b712e:	9301      	str	r3, [sp, #4]
   b7130:	4b08      	ldr	r3, [pc, #32]	; (b7154 <_ZN9TCPClient9availableEv+0xac>)
   b7132:	4909      	ldr	r1, [pc, #36]	; (b7158 <_ZN9TCPClient9availableEv+0xb0>)
   b7134:	9300      	str	r3, [sp, #0]
   b7136:	aa02      	add	r2, sp, #8
   b7138:	462b      	mov	r3, r5
   b713a:	2032      	movs	r0, #50	; 0x32
   b713c:	f7fe ffda 	bl	b60f4 <log_message>
                    sock_close(d_->sock);
   b7140:	6963      	ldr	r3, [r4, #20]
   b7142:	6818      	ldr	r0, [r3, #0]
   b7144:	f7fe ff0e 	bl	b5f64 <sock_close>
   b7148:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b714a:	f04f 32ff 	mov.w	r2, #4294967295
   b714e:	601a      	str	r2, [r3, #0]
   b7150:	e7d4      	b.n	b70fc <_ZN9TCPClient9availableEv+0x54>
   b7152:	bf00      	nop
   b7154:	000ba993 	.word	0x000ba993
   b7158:	000ba98c 	.word	0x000ba98c

000b715c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b715c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b715e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7160:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7162:	6818      	ldr	r0, [r3, #0]
   b7164:	2800      	cmp	r0, #0
   b7166:	db01      	blt.n	b716c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7168:	f7fe fefc 	bl	b5f64 <sock_close>
   b716c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b716e:	f04f 32ff 	mov.w	r2, #4294967295
   b7172:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7174:	6960      	ldr	r0, [r4, #20]
   b7176:	2211      	movs	r2, #17
   b7178:	2100      	movs	r1, #0
   b717a:	308c      	adds	r0, #140	; 0x8c
   b717c:	f001 f839 	bl	b81f2 <memset>
    flush_buffer();
   b7180:	4620      	mov	r0, r4
}
   b7182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7186:	f7ff bf0b 	b.w	b6fa0 <_ZN9TCPClient12flush_bufferEv>

000b718a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b718a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b718c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b718e:	4604      	mov	r4, r0
          total(0) {
   b7190:	6001      	str	r1, [r0, #0]
   b7192:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7196:	3088      	adds	r0, #136	; 0x88
   b7198:	f7ff fbba 	bl	b6910 <_ZN9IPAddressC1Ev>
}
   b719c:	4620      	mov	r0, r4
   b719e:	bd10      	pop	{r4, pc}

000b71a0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b71a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b71a2:	2300      	movs	r3, #0
   b71a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b71a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b71ac:	4a0e      	ldr	r2, [pc, #56]	; (b71e8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b71ae:	6103      	str	r3, [r0, #16]
   b71b0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b71b2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b71b4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b71b6:	20ac      	movs	r0, #172	; 0xac
   b71b8:	9101      	str	r1, [sp, #4]
   b71ba:	f7fc ff6c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b71be:	1e05      	subs	r5, r0, #0
   b71c0:	f105 060c 	add.w	r6, r5, #12
   b71c4:	d008      	beq.n	b71d8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b71c6:	2301      	movs	r3, #1
   b71c8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b71cc:	4b07      	ldr	r3, [pc, #28]	; (b71ec <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b71ce:	9901      	ldr	r1, [sp, #4]
   b71d0:	602b      	str	r3, [r5, #0]
   b71d2:	4630      	mov	r0, r6
   b71d4:	f7ff ffd9 	bl	b718a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b71d8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b71da:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b71de:	f7ff fedf 	bl	b6fa0 <_ZN9TCPClient12flush_bufferEv>
}
   b71e2:	b002      	add	sp, #8
   b71e4:	bd70      	pop	{r4, r5, r6, pc}
   b71e6:	bf00      	nop
   b71e8:	000ba9c8 	.word	0x000ba9c8
   b71ec:	000ba9ac 	.word	0x000ba9ac

000b71f0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b71f0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b71f2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b71f6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b71f8:	f7ff ffd2 	bl	b71a0 <_ZN9TCPClientC1Ei>
}
   b71fc:	4620      	mov	r0, r4
   b71fe:	bd10      	pop	{r4, pc}

000b7200 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7200:	b510      	push	{r4, lr}
   b7202:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7204:	6800      	ldr	r0, [r0, #0]
   b7206:	2800      	cmp	r0, #0
   b7208:	db01      	blt.n	b720e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b720a:	f7fe feab 	bl	b5f64 <sock_close>
    }
}
   b720e:	4620      	mov	r0, r4
   b7210:	bd10      	pop	{r4, pc}

000b7212 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7212:	300c      	adds	r0, #12
   b7214:	f7ff bff4 	b.w	b7200 <_ZN9TCPClient4DataD1Ev>

000b7218 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7218:	2200      	movs	r2, #0
   b721a:	6840      	ldr	r0, [r0, #4]
   b721c:	4611      	mov	r1, r2
   b721e:	f7fe bfad 	b.w	b617c <network_ready>

000b7222 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7222:	2200      	movs	r2, #0
   b7224:	6840      	ldr	r0, [r0, #4]
   b7226:	4611      	mov	r1, r2
   b7228:	f7fe bfc8 	b.w	b61bc <network_listening>

000b722c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b722c:	2200      	movs	r2, #0
   b722e:	6840      	ldr	r0, [r0, #4]
   b7230:	4611      	mov	r1, r2
   b7232:	f7fe bfd3 	b.w	b61dc <network_get_listen_timeout>

000b7236 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7236:	6840      	ldr	r0, [r0, #4]
   b7238:	2200      	movs	r2, #0
   b723a:	f7fe bfc7 	b.w	b61cc <network_set_listen_timeout>

000b723e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b723e:	6840      	ldr	r0, [r0, #4]
   b7240:	2200      	movs	r2, #0
   b7242:	f081 0101 	eor.w	r1, r1, #1
   b7246:	f7fe bfb1 	b.w	b61ac <network_listen>

000b724a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b724a:	2300      	movs	r3, #0
   b724c:	6840      	ldr	r0, [r0, #4]
   b724e:	461a      	mov	r2, r3
   b7250:	4619      	mov	r1, r3
   b7252:	f7fe bfa3 	b.w	b619c <network_off>

000b7256 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7256:	2300      	movs	r3, #0
   b7258:	6840      	ldr	r0, [r0, #4]
   b725a:	461a      	mov	r2, r3
   b725c:	4619      	mov	r1, r3
   b725e:	f7fe bf95 	b.w	b618c <network_on>

000b7262 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7262:	2200      	movs	r2, #0
   b7264:	6840      	ldr	r0, [r0, #4]
   b7266:	4611      	mov	r1, r2
   b7268:	f7fe bf78 	b.w	b615c <network_connecting>

000b726c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b726c:	6840      	ldr	r0, [r0, #4]
   b726e:	2200      	movs	r2, #0
   b7270:	2102      	movs	r1, #2
   b7272:	f7fe bf7b 	b.w	b616c <network_disconnect>

000b7276 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7276:	2300      	movs	r3, #0
   b7278:	6840      	ldr	r0, [r0, #4]
   b727a:	461a      	mov	r2, r3
   b727c:	f7fe bf66 	b.w	b614c <network_connect>

000b7280 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7280:	4b02      	ldr	r3, [pc, #8]	; (b728c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7282:	2204      	movs	r2, #4
   b7284:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7286:	4a02      	ldr	r2, [pc, #8]	; (b7290 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7288:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b728a:	4770      	bx	lr
   b728c:	2003e718 	.word	0x2003e718
   b7290:	000baa14 	.word	0x000baa14

000b7294 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7294:	2300      	movs	r3, #0
   b7296:	6840      	ldr	r0, [r0, #4]
   b7298:	461a      	mov	r2, r3
   b729a:	f7fe bf57 	b.w	b614c <network_connect>

000b729e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b729e:	6840      	ldr	r0, [r0, #4]
   b72a0:	2200      	movs	r2, #0
   b72a2:	2102      	movs	r1, #2
   b72a4:	f7fe bf62 	b.w	b616c <network_disconnect>

000b72a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b72a8:	2200      	movs	r2, #0
   b72aa:	6840      	ldr	r0, [r0, #4]
   b72ac:	4611      	mov	r1, r2
   b72ae:	f7fe bf55 	b.w	b615c <network_connecting>

000b72b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b72b2:	2200      	movs	r2, #0
   b72b4:	6840      	ldr	r0, [r0, #4]
   b72b6:	4611      	mov	r1, r2
   b72b8:	f7fe bf60 	b.w	b617c <network_ready>

000b72bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b72bc:	2300      	movs	r3, #0
   b72be:	6840      	ldr	r0, [r0, #4]
   b72c0:	461a      	mov	r2, r3
   b72c2:	4619      	mov	r1, r3
   b72c4:	f7fe bf62 	b.w	b618c <network_on>

000b72c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b72c8:	2300      	movs	r3, #0
   b72ca:	6840      	ldr	r0, [r0, #4]
   b72cc:	461a      	mov	r2, r3
   b72ce:	4619      	mov	r1, r3
   b72d0:	f7fe bf64 	b.w	b619c <network_off>

000b72d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b72d4:	6840      	ldr	r0, [r0, #4]
   b72d6:	2100      	movs	r1, #0
   b72d8:	f7fe bf88 	b.w	b61ec <network_is_on>

000b72dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b72dc:	6840      	ldr	r0, [r0, #4]
   b72de:	2100      	movs	r1, #0
   b72e0:	f7fe bf8c 	b.w	b61fc <network_is_off>

000b72e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b72e4:	6840      	ldr	r0, [r0, #4]
   b72e6:	2200      	movs	r2, #0
   b72e8:	f081 0101 	eor.w	r1, r1, #1
   b72ec:	f7fe bf5e 	b.w	b61ac <network_listen>

000b72f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b72f0:	6840      	ldr	r0, [r0, #4]
   b72f2:	2200      	movs	r2, #0
   b72f4:	f7fe bf6a 	b.w	b61cc <network_set_listen_timeout>

000b72f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b72f8:	2200      	movs	r2, #0
   b72fa:	6840      	ldr	r0, [r0, #4]
   b72fc:	4611      	mov	r1, r2
   b72fe:	f7fe bf6d 	b.w	b61dc <network_get_listen_timeout>

000b7302 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7302:	2200      	movs	r2, #0
   b7304:	6840      	ldr	r0, [r0, #4]
   b7306:	4611      	mov	r1, r2
   b7308:	f7fe bf58 	b.w	b61bc <network_listening>

000b730c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b730c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7310:	b095      	sub	sp, #84	; 0x54
   b7312:	4614      	mov	r4, r2
   b7314:	460d      	mov	r5, r1
   b7316:	4607      	mov	r7, r0
    IPAddress addr;
   b7318:	f7ff fafa 	bl	b6910 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b731c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b731e:	221c      	movs	r2, #28
   b7320:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7322:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7324:	f000 ff65 	bl	b81f2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7328:	2340      	movs	r3, #64	; 0x40
   b732a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b732c:	4620      	mov	r0, r4
   b732e:	466b      	mov	r3, sp
   b7330:	aa0c      	add	r2, sp, #48	; 0x30
   b7332:	2100      	movs	r1, #0
   b7334:	f7fe fcfe 	bl	b5d34 <netdb_getaddrinfo>
    if (!r) {
   b7338:	4604      	mov	r4, r0
   b733a:	2800      	cmp	r0, #0
   b733c:	d14b      	bne.n	b73d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b733e:	4602      	mov	r2, r0
   b7340:	2101      	movs	r1, #1
   b7342:	6868      	ldr	r0, [r5, #4]
   b7344:	f7fe ff1a 	bl	b617c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7348:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b734a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b734c:	4622      	mov	r2, r4
   b734e:	6868      	ldr	r0, [r5, #4]
   b7350:	f7fe ff14 	bl	b617c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7354:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7356:	4681      	mov	r9, r0
        bool ok = false;
   b7358:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b735a:	2e00      	cmp	r6, #0
   b735c:	d03b      	beq.n	b73d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b735e:	2900      	cmp	r1, #0
   b7360:	d139      	bne.n	b73d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7362:	6873      	ldr	r3, [r6, #4]
   b7364:	2b02      	cmp	r3, #2
   b7366:	d003      	beq.n	b7370 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7368:	2b0a      	cmp	r3, #10
   b736a:	d011      	beq.n	b7390 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b736c:	69f6      	ldr	r6, [r6, #28]
   b736e:	e7f4      	b.n	b735a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7370:	f1b8 0f00 	cmp.w	r8, #0
   b7374:	d0fa      	beq.n	b736c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7376:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7378:	a806      	add	r0, sp, #24
   b737a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b737c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b737e:	f7ff fb0b 	bl	b6998 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7384:	1d3c      	adds	r4, r7, #4
   b7386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7388:	682b      	ldr	r3, [r5, #0]
   b738a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b738c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b738e:	e7ed      	b.n	b736c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7390:	f1b9 0f00 	cmp.w	r9, #0
   b7394:	d0ea      	beq.n	b736c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7396:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7398:	2210      	movs	r2, #16
   b739a:	a801      	add	r0, sp, #4
   b739c:	f000 ff29 	bl	b81f2 <memset>
                    a.v = 6;
   b73a0:	2306      	movs	r3, #6
   b73a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b73a6:	ad01      	add	r5, sp, #4
   b73a8:	f104 0308 	add.w	r3, r4, #8
   b73ac:	3418      	adds	r4, #24
   b73ae:	6818      	ldr	r0, [r3, #0]
   b73b0:	6859      	ldr	r1, [r3, #4]
   b73b2:	462a      	mov	r2, r5
   b73b4:	c203      	stmia	r2!, {r0, r1}
   b73b6:	3308      	adds	r3, #8
   b73b8:	42a3      	cmp	r3, r4
   b73ba:	4615      	mov	r5, r2
   b73bc:	d1f7      	bne.n	b73ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b73be:	a901      	add	r1, sp, #4
   b73c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b73c2:	ad07      	add	r5, sp, #28
   b73c4:	f7ff fab2 	bl	b692c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b73c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b73ca:	1d3c      	adds	r4, r7, #4
   b73cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b73ce:	682b      	ldr	r3, [r5, #0]
   b73d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b73d2:	4649      	mov	r1, r9
   b73d4:	e7ca      	b.n	b736c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b73d6:	9800      	ldr	r0, [sp, #0]
   b73d8:	f7fe fca4 	bl	b5d24 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b73dc:	4638      	mov	r0, r7
   b73de:	b015      	add	sp, #84	; 0x54
   b73e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b73e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b73e4:	4b02      	ldr	r3, [pc, #8]	; (b73f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b73e6:	4a03      	ldr	r2, [pc, #12]	; (b73f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b73e8:	601a      	str	r2, [r3, #0]
   b73ea:	2200      	movs	r2, #0
   b73ec:	605a      	str	r2, [r3, #4]

} // spark
   b73ee:	4770      	bx	lr
   b73f0:	2003e720 	.word	0x2003e720
   b73f4:	000baa50 	.word	0x000baa50

000b73f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b73f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b73fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b73fc:	d902      	bls.n	b7404 <pinAvailable+0xc>
    return false;
   b73fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7400:	b002      	add	sp, #8
   b7402:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7404:	f1a0 030b 	sub.w	r3, r0, #11
   b7408:	2b02      	cmp	r3, #2
   b740a:	d81a      	bhi.n	b7442 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b740c:	4c17      	ldr	r4, [pc, #92]	; (b746c <pinAvailable+0x74>)
   b740e:	7821      	ldrb	r1, [r4, #0]
   b7410:	f3bf 8f5b 	dmb	ish
   b7414:	f011 0101 	ands.w	r1, r1, #1
   b7418:	d10b      	bne.n	b7432 <pinAvailable+0x3a>
   b741a:	4620      	mov	r0, r4
   b741c:	9101      	str	r1, [sp, #4]
   b741e:	f7fc fe4d 	bl	b40bc <__cxa_guard_acquire>
   b7422:	9901      	ldr	r1, [sp, #4]
   b7424:	b128      	cbz	r0, b7432 <pinAvailable+0x3a>
   b7426:	4812      	ldr	r0, [pc, #72]	; (b7470 <pinAvailable+0x78>)
   b7428:	f7fe ff7c 	bl	b6324 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b742c:	4620      	mov	r0, r4
   b742e:	f7fc fe4a 	bl	b40c6 <__cxa_guard_release>
   b7432:	4b0f      	ldr	r3, [pc, #60]	; (b7470 <pinAvailable+0x78>)
   b7434:	7818      	ldrb	r0, [r3, #0]
   b7436:	f7fe fded 	bl	b6014 <hal_spi_is_enabled>
   b743a:	2800      	cmp	r0, #0
   b743c:	d1df      	bne.n	b73fe <pinAvailable+0x6>
  return true; // 'pin' is available
   b743e:	2001      	movs	r0, #1
   b7440:	e7de      	b.n	b7400 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7442:	2801      	cmp	r0, #1
   b7444:	d809      	bhi.n	b745a <pinAvailable+0x62>
   b7446:	f000 f8cf 	bl	b75e8 <_Z19__fetch_global_Wirev>
   b744a:	2100      	movs	r1, #0
   b744c:	7c00      	ldrb	r0, [r0, #16]
   b744e:	f7fe fd69 	bl	b5f24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7452:	f080 0001 	eor.w	r0, r0, #1
   b7456:	b2c0      	uxtb	r0, r0
   b7458:	e7d2      	b.n	b7400 <pinAvailable+0x8>
   b745a:	3809      	subs	r0, #9
   b745c:	2801      	cmp	r0, #1
   b745e:	d8ee      	bhi.n	b743e <pinAvailable+0x46>
   b7460:	f000 f882 	bl	b7568 <_Z22__fetch_global_Serial1v>
   b7464:	7c00      	ldrb	r0, [r0, #16]
   b7466:	f7fe fd05 	bl	b5e74 <hal_usart_is_enabled>
   b746a:	e7f2      	b.n	b7452 <pinAvailable+0x5a>
   b746c:	2003e6b8 	.word	0x2003e6b8
   b7470:	2003e6bc 	.word	0x2003e6bc

000b7474 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7474:	2823      	cmp	r0, #35	; 0x23
{
   b7476:	b538      	push	{r3, r4, r5, lr}
   b7478:	4604      	mov	r4, r0
   b747a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b747c:	d80a      	bhi.n	b7494 <pinMode+0x20>
   b747e:	29ff      	cmp	r1, #255	; 0xff
   b7480:	d008      	beq.n	b7494 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7482:	f7ff ffb9 	bl	b73f8 <pinAvailable>
   b7486:	b128      	cbz	r0, b7494 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7488:	4629      	mov	r1, r5
   b748a:	4620      	mov	r0, r4
}
   b748c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7490:	f7fe bc58 	b.w	b5d44 <HAL_Pin_Mode>
}
   b7494:	bd38      	pop	{r3, r4, r5, pc}

000b7496 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7496:	b538      	push	{r3, r4, r5, lr}
   b7498:	4604      	mov	r4, r0
   b749a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b749c:	f7fe fc5a 	bl	b5d54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b74a0:	28ff      	cmp	r0, #255	; 0xff
   b74a2:	d010      	beq.n	b74c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b74a4:	2806      	cmp	r0, #6
   b74a6:	d804      	bhi.n	b74b2 <digitalWrite+0x1c>
   b74a8:	234d      	movs	r3, #77	; 0x4d
   b74aa:	fa23 f000 	lsr.w	r0, r3, r0
   b74ae:	07c3      	lsls	r3, r0, #31
   b74b0:	d409      	bmi.n	b74c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b74b2:	4620      	mov	r0, r4
   b74b4:	f7ff ffa0 	bl	b73f8 <pinAvailable>
   b74b8:	b128      	cbz	r0, b74c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b74ba:	4629      	mov	r1, r5
   b74bc:	4620      	mov	r0, r4
}
   b74be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b74c2:	f7fe bc4f 	b.w	b5d64 <HAL_GPIO_Write>
}
   b74c6:	bd38      	pop	{r3, r4, r5, pc}

000b74c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b74c8:	b510      	push	{r4, lr}
   b74ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b74cc:	f7fe fc42 	bl	b5d54 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b74d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b74d2:	b2db      	uxtb	r3, r3
   b74d4:	2b01      	cmp	r3, #1
   b74d6:	d908      	bls.n	b74ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b74d8:	4620      	mov	r0, r4
   b74da:	f7ff ff8d 	bl	b73f8 <pinAvailable>
   b74de:	b120      	cbz	r0, b74ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b74e0:	4620      	mov	r0, r4
}
   b74e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b74e6:	f7fe bc45 	b.w	b5d74 <HAL_GPIO_Read>
}
   b74ea:	2000      	movs	r0, #0
   b74ec:	bd10      	pop	{r4, pc}

000b74ee <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b74ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74f2:	4690      	mov	r8, r2
   b74f4:	461f      	mov	r7, r3
   b74f6:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b74f8:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b74fa:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b74fc:	f1c4 0107 	rsb	r1, r4, #7
   b7500:	f1b8 0f00 	cmp.w	r8, #0
   b7504:	d112      	bne.n	b752c <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7506:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b750a:	f001 0101 	and.w	r1, r1, #1
   b750e:	4630      	mov	r0, r6
   b7510:	f7ff ffc1 	bl	b7496 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7514:	2101      	movs	r1, #1
   b7516:	4628      	mov	r0, r5
   b7518:	f7ff ffbd 	bl	b7496 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b751c:	2100      	movs	r1, #0
   b751e:	4628      	mov	r0, r5
   b7520:	f7ff ffb9 	bl	b7496 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7524:	3c01      	subs	r4, #1
   b7526:	d2e9      	bcs.n	b74fc <shiftOut+0xe>
  }
}
   b7528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b752c:	fa47 f104 	asr.w	r1, r7, r4
   b7530:	e7eb      	b.n	b750a <shiftOut+0x1c>

000b7532 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7532:	4770      	bx	lr

000b7534 <_Z20acquireSerial1Bufferv>:
{
   b7534:	b538      	push	{r3, r4, r5, lr}
   b7536:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7538:	2514      	movs	r5, #20
   b753a:	462a      	mov	r2, r5
   b753c:	2100      	movs	r1, #0
   b753e:	f000 fe58 	bl	b81f2 <memset>
   b7542:	8025      	strh	r5, [r4, #0]
   b7544:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7546:	4907      	ldr	r1, [pc, #28]	; (b7564 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7548:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b754a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b754c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b754e:	f000 f86f 	bl	b7630 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7552:	4904      	ldr	r1, [pc, #16]	; (b7564 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7554:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7556:	4628      	mov	r0, r5
   b7558:	f000 f86a 	bl	b7630 <_ZnajRKSt9nothrow_t>
    };
   b755c:	60e0      	str	r0, [r4, #12]
}
   b755e:	4620      	mov	r0, r4
   b7560:	bd38      	pop	{r3, r4, r5, pc}
   b7562:	bf00      	nop
   b7564:	000baa84 	.word	0x000baa84

000b7568 <_Z22__fetch_global_Serial1v>:
{
   b7568:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b756a:	4d0e      	ldr	r5, [pc, #56]	; (b75a4 <_Z22__fetch_global_Serial1v+0x3c>)
   b756c:	7829      	ldrb	r1, [r5, #0]
   b756e:	f3bf 8f5b 	dmb	ish
   b7572:	f011 0401 	ands.w	r4, r1, #1
{
   b7576:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7578:	d111      	bne.n	b759e <_Z22__fetch_global_Serial1v+0x36>
   b757a:	4628      	mov	r0, r5
   b757c:	f7fc fd9e 	bl	b40bc <__cxa_guard_acquire>
   b7580:	b168      	cbz	r0, b759e <_Z22__fetch_global_Serial1v+0x36>
   b7582:	a801      	add	r0, sp, #4
   b7584:	f7ff ffd6 	bl	b7534 <_Z20acquireSerial1Bufferv>
   b7588:	aa01      	add	r2, sp, #4
   b758a:	4621      	mov	r1, r4
   b758c:	4806      	ldr	r0, [pc, #24]	; (b75a8 <_Z22__fetch_global_Serial1v+0x40>)
   b758e:	f7ff fad9 	bl	b6b44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7592:	4628      	mov	r0, r5
   b7594:	f7fc fd97 	bl	b40c6 <__cxa_guard_release>
   b7598:	4804      	ldr	r0, [pc, #16]	; (b75ac <_Z22__fetch_global_Serial1v+0x44>)
   b759a:	f000 fdf9 	bl	b8190 <atexit>
    return serial1;
}
   b759e:	4802      	ldr	r0, [pc, #8]	; (b75a8 <_Z22__fetch_global_Serial1v+0x40>)
   b75a0:	b007      	add	sp, #28
   b75a2:	bd30      	pop	{r4, r5, pc}
   b75a4:	2003e728 	.word	0x2003e728
   b75a8:	2003e72c 	.word	0x2003e72c
   b75ac:	000b7533 	.word	0x000b7533

000b75b0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b75b0:	4770      	bx	lr
	...

000b75b4 <_Z17acquireWireBufferv>:
{
   b75b4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b75b6:	4b0a      	ldr	r3, [pc, #40]	; (b75e0 <_Z17acquireWireBufferv+0x2c>)
   b75b8:	6003      	str	r3, [r0, #0]
   b75ba:	2301      	movs	r3, #1
{
   b75bc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b75be:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b75c0:	4908      	ldr	r1, [pc, #32]	; (b75e4 <_Z17acquireWireBufferv+0x30>)
   b75c2:	2020      	movs	r0, #32
   b75c4:	f000 f834 	bl	b7630 <_ZnajRKSt9nothrow_t>
	};
   b75c8:	2520      	movs	r5, #32
   b75ca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b75cc:	4905      	ldr	r1, [pc, #20]	; (b75e4 <_Z17acquireWireBufferv+0x30>)
	};
   b75ce:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b75d0:	4628      	mov	r0, r5
   b75d2:	f000 f82d 	bl	b7630 <_ZnajRKSt9nothrow_t>
	};
   b75d6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b75da:	4620      	mov	r0, r4
   b75dc:	bd38      	pop	{r3, r4, r5, pc}
   b75de:	bf00      	nop
   b75e0:	00010018 	.word	0x00010018
   b75e4:	000baa84 	.word	0x000baa84

000b75e8 <_Z19__fetch_global_Wirev>:
{
   b75e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b75ea:	4d0e      	ldr	r5, [pc, #56]	; (b7624 <_Z19__fetch_global_Wirev+0x3c>)
   b75ec:	7829      	ldrb	r1, [r5, #0]
   b75ee:	f3bf 8f5b 	dmb	ish
   b75f2:	f011 0401 	ands.w	r4, r1, #1
{
   b75f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b75f8:	d111      	bne.n	b761e <_Z19__fetch_global_Wirev+0x36>
   b75fa:	4628      	mov	r0, r5
   b75fc:	f7fc fd5e 	bl	b40bc <__cxa_guard_acquire>
   b7600:	b168      	cbz	r0, b761e <_Z19__fetch_global_Wirev+0x36>
   b7602:	4668      	mov	r0, sp
   b7604:	f7ff ffd6 	bl	b75b4 <_Z17acquireWireBufferv>
   b7608:	466a      	mov	r2, sp
   b760a:	4621      	mov	r1, r4
   b760c:	4806      	ldr	r0, [pc, #24]	; (b7628 <_Z19__fetch_global_Wirev+0x40>)
   b760e:	f7ff fad9 	bl	b6bc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7612:	4628      	mov	r0, r5
   b7614:	f7fc fd57 	bl	b40c6 <__cxa_guard_release>
   b7618:	4804      	ldr	r0, [pc, #16]	; (b762c <_Z19__fetch_global_Wirev+0x44>)
   b761a:	f000 fdb9 	bl	b8190 <atexit>
	return wire;
}
   b761e:	4802      	ldr	r0, [pc, #8]	; (b7628 <_Z19__fetch_global_Wirev+0x40>)
   b7620:	b007      	add	sp, #28
   b7622:	bd30      	pop	{r4, r5, pc}
   b7624:	2003e744 	.word	0x2003e744
   b7628:	2003e748 	.word	0x2003e748
   b762c:	000b75b1 	.word	0x000b75b1

000b7630 <_ZnajRKSt9nothrow_t>:
   b7630:	f7fc bd33 	b.w	b409a <_Znaj>

000b7634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7634:	4901      	ldr	r1, [pc, #4]	; (b763c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7636:	f000 b8f9 	b.w	b782c <_ZNKSt9type_infoeqERKS_>
   b763a:	bf00      	nop
   b763c:	000baaa0 	.word	0x000baaa0

000b7640 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7640:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7642:	2400      	movs	r4, #0
   b7644:	2310      	movs	r3, #16
   b7646:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b764a:	6803      	ldr	r3, [r0, #0]
   b764c:	4615      	mov	r5, r2
   b764e:	699e      	ldr	r6, [r3, #24]
   b7650:	6812      	ldr	r2, [r2, #0]
   b7652:	466b      	mov	r3, sp
   b7654:	e9cd 4400 	strd	r4, r4, [sp]
   b7658:	47b0      	blx	r6
   b765a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b765e:	f003 0306 	and.w	r3, r3, #6
   b7662:	2b06      	cmp	r3, #6
   b7664:	bf03      	ittte	eq
   b7666:	9b00      	ldreq	r3, [sp, #0]
   b7668:	602b      	streq	r3, [r5, #0]
   b766a:	2001      	moveq	r0, #1
   b766c:	4620      	movne	r0, r4
   b766e:	b004      	add	sp, #16
   b7670:	bd70      	pop	{r4, r5, r6, pc}

000b7672 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7672:	9800      	ldr	r0, [sp, #0]
   b7674:	4290      	cmp	r0, r2
   b7676:	bf14      	ite	ne
   b7678:	2001      	movne	r0, #1
   b767a:	2006      	moveq	r0, #6
   b767c:	4770      	bx	lr
	...

000b7680 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7680:	b510      	push	{r4, lr}
   b7682:	4b03      	ldr	r3, [pc, #12]	; (b7690 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7684:	6003      	str	r3, [r0, #0]
   b7686:	4604      	mov	r4, r0
   b7688:	f000 f8cd 	bl	b7826 <_ZNSt9type_infoD1Ev>
   b768c:	4620      	mov	r0, r4
   b768e:	bd10      	pop	{r4, pc}
   b7690:	000baae0 	.word	0x000baae0

000b7694 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7694:	b510      	push	{r4, lr}
   b7696:	4604      	mov	r4, r0
   b7698:	f7ff fff2 	bl	b7680 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b769c:	4620      	mov	r0, r4
   b769e:	2108      	movs	r1, #8
   b76a0:	f7fc fcfd 	bl	b409e <_ZdlPvj>
   b76a4:	4620      	mov	r0, r4
   b76a6:	bd10      	pop	{r4, pc}

000b76a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b76a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76ac:	461f      	mov	r7, r3
   b76ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b76b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b76b6:	4598      	cmp	r8, r3
   b76b8:	4606      	mov	r6, r0
   b76ba:	4615      	mov	r5, r2
   b76bc:	d107      	bne.n	b76ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b76be:	9907      	ldr	r1, [sp, #28]
   b76c0:	f000 f8b4 	bl	b782c <_ZNKSt9type_infoeqERKS_>
   b76c4:	b118      	cbz	r0, b76ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b76c6:	7165      	strb	r5, [r4, #5]
   b76c8:	2000      	movs	r0, #0
   b76ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b76ce:	4639      	mov	r1, r7
   b76d0:	4630      	mov	r0, r6
   b76d2:	f000 f8ab 	bl	b782c <_ZNKSt9type_infoeqERKS_>
   b76d6:	2800      	cmp	r0, #0
   b76d8:	d0f6      	beq.n	b76c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b76da:	2301      	movs	r3, #1
   b76dc:	f8c4 8000 	str.w	r8, [r4]
   b76e0:	7125      	strb	r5, [r4, #4]
   b76e2:	71a3      	strb	r3, [r4, #6]
   b76e4:	e7f0      	b.n	b76c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b76e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b76e6:	b538      	push	{r3, r4, r5, lr}
   b76e8:	4615      	mov	r5, r2
   b76ea:	461c      	mov	r4, r3
   b76ec:	f000 f89e 	bl	b782c <_ZNKSt9type_infoeqERKS_>
   b76f0:	b120      	cbz	r0, b76fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b76f2:	2308      	movs	r3, #8
   b76f4:	60e3      	str	r3, [r4, #12]
   b76f6:	2306      	movs	r3, #6
   b76f8:	6025      	str	r5, [r4, #0]
   b76fa:	7123      	strb	r3, [r4, #4]
   b76fc:	bd38      	pop	{r3, r4, r5, pc}

000b76fe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b76fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7700:	4605      	mov	r5, r0
   b7702:	460c      	mov	r4, r1
   b7704:	9201      	str	r2, [sp, #4]
   b7706:	461e      	mov	r6, r3
   b7708:	f000 f890 	bl	b782c <_ZNKSt9type_infoeqERKS_>
   b770c:	b950      	cbnz	r0, b7724 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b770e:	2e03      	cmp	r6, #3
   b7710:	d808      	bhi.n	b7724 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7712:	6823      	ldr	r3, [r4, #0]
   b7714:	9a01      	ldr	r2, [sp, #4]
   b7716:	695b      	ldr	r3, [r3, #20]
   b7718:	4629      	mov	r1, r5
   b771a:	4620      	mov	r0, r4
   b771c:	b002      	add	sp, #8
   b771e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7722:	4718      	bx	r3
   b7724:	b002      	add	sp, #8
   b7726:	bd70      	pop	{r4, r5, r6, pc}

000b7728 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7728:	b510      	push	{r4, lr}
   b772a:	4b03      	ldr	r3, [pc, #12]	; (b7738 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b772c:	6003      	str	r3, [r0, #0]
   b772e:	4604      	mov	r4, r0
   b7730:	f7ff ffa6 	bl	b7680 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7734:	4620      	mov	r0, r4
   b7736:	bd10      	pop	{r4, pc}
   b7738:	000bab40 	.word	0x000bab40

000b773c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b773c:	b510      	push	{r4, lr}
   b773e:	4604      	mov	r4, r0
   b7740:	f7ff fff2 	bl	b7728 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7744:	4620      	mov	r0, r4
   b7746:	210c      	movs	r1, #12
   b7748:	f7fc fca9 	bl	b409e <_ZdlPvj>
   b774c:	4620      	mov	r0, r4
   b774e:	bd10      	pop	{r4, pc}

000b7750 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7752:	9f08      	ldr	r7, [sp, #32]
   b7754:	4297      	cmp	r7, r2
   b7756:	4605      	mov	r5, r0
   b7758:	460e      	mov	r6, r1
   b775a:	4614      	mov	r4, r2
   b775c:	d00a      	beq.n	b7774 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b775e:	68a8      	ldr	r0, [r5, #8]
   b7760:	6802      	ldr	r2, [r0, #0]
   b7762:	9708      	str	r7, [sp, #32]
   b7764:	6a15      	ldr	r5, [r2, #32]
   b7766:	4631      	mov	r1, r6
   b7768:	4622      	mov	r2, r4
   b776a:	46ac      	mov	ip, r5
   b776c:	b003      	add	sp, #12
   b776e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7772:	4760      	bx	ip
   b7774:	4619      	mov	r1, r3
   b7776:	9301      	str	r3, [sp, #4]
   b7778:	f000 f858 	bl	b782c <_ZNKSt9type_infoeqERKS_>
   b777c:	9b01      	ldr	r3, [sp, #4]
   b777e:	2800      	cmp	r0, #0
   b7780:	d0ed      	beq.n	b775e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7782:	2006      	movs	r0, #6
   b7784:	b003      	add	sp, #12
   b7786:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7788 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b778c:	460d      	mov	r5, r1
   b778e:	4619      	mov	r1, r3
   b7790:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7794:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7798:	4681      	mov	r9, r0
   b779a:	4617      	mov	r7, r2
   b779c:	4698      	mov	r8, r3
   b779e:	f000 f845 	bl	b782c <_ZNKSt9type_infoeqERKS_>
   b77a2:	b190      	cbz	r0, b77ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b77a4:	2d00      	cmp	r5, #0
   b77a6:	6034      	str	r4, [r6, #0]
   b77a8:	7137      	strb	r7, [r6, #4]
   b77aa:	db09      	blt.n	b77c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b77ac:	1961      	adds	r1, r4, r5
   b77ae:	458a      	cmp	sl, r1
   b77b0:	bf0c      	ite	eq
   b77b2:	2106      	moveq	r1, #6
   b77b4:	2101      	movne	r1, #1
   b77b6:	71b1      	strb	r1, [r6, #6]
   b77b8:	2000      	movs	r0, #0
   b77ba:	b001      	add	sp, #4
   b77bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b77c0:	3502      	adds	r5, #2
   b77c2:	d1f9      	bne.n	b77b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b77c4:	2301      	movs	r3, #1
   b77c6:	71b3      	strb	r3, [r6, #6]
   b77c8:	e7f6      	b.n	b77b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b77ca:	4554      	cmp	r4, sl
   b77cc:	d106      	bne.n	b77dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b77ce:	4659      	mov	r1, fp
   b77d0:	4648      	mov	r0, r9
   b77d2:	f000 f82b 	bl	b782c <_ZNKSt9type_infoeqERKS_>
   b77d6:	b108      	cbz	r0, b77dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b77d8:	7177      	strb	r7, [r6, #5]
   b77da:	e7ed      	b.n	b77b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b77dc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b77e0:	6803      	ldr	r3, [r0, #0]
   b77e2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b77e6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b77ea:	69dc      	ldr	r4, [r3, #28]
   b77ec:	463a      	mov	r2, r7
   b77ee:	4643      	mov	r3, r8
   b77f0:	4629      	mov	r1, r5
   b77f2:	46a4      	mov	ip, r4
   b77f4:	b001      	add	sp, #4
   b77f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b77fa:	4760      	bx	ip

000b77fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b77fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7800:	4607      	mov	r7, r0
   b7802:	460c      	mov	r4, r1
   b7804:	4615      	mov	r5, r2
   b7806:	461e      	mov	r6, r3
   b7808:	f7ff ff6d 	bl	b76e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b780c:	b948      	cbnz	r0, b7822 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b780e:	68b8      	ldr	r0, [r7, #8]
   b7810:	6803      	ldr	r3, [r0, #0]
   b7812:	699f      	ldr	r7, [r3, #24]
   b7814:	462a      	mov	r2, r5
   b7816:	4633      	mov	r3, r6
   b7818:	4621      	mov	r1, r4
   b781a:	46bc      	mov	ip, r7
   b781c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7820:	4760      	bx	ip
   b7822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7826 <_ZNSt9type_infoD1Ev>:
   b7826:	4770      	bx	lr

000b7828 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7828:	2000      	movs	r0, #0
   b782a:	4770      	bx	lr

000b782c <_ZNKSt9type_infoeqERKS_>:
   b782c:	4281      	cmp	r1, r0
   b782e:	b508      	push	{r3, lr}
   b7830:	d00e      	beq.n	b7850 <_ZNKSt9type_infoeqERKS_+0x24>
   b7832:	6840      	ldr	r0, [r0, #4]
   b7834:	7803      	ldrb	r3, [r0, #0]
   b7836:	2b2a      	cmp	r3, #42	; 0x2a
   b7838:	d00c      	beq.n	b7854 <_ZNKSt9type_infoeqERKS_+0x28>
   b783a:	6849      	ldr	r1, [r1, #4]
   b783c:	780b      	ldrb	r3, [r1, #0]
   b783e:	2b2a      	cmp	r3, #42	; 0x2a
   b7840:	bf08      	it	eq
   b7842:	3101      	addeq	r1, #1
   b7844:	f000 fd0c 	bl	b8260 <strcmp>
   b7848:	fab0 f080 	clz	r0, r0
   b784c:	0940      	lsrs	r0, r0, #5
   b784e:	bd08      	pop	{r3, pc}
   b7850:	2001      	movs	r0, #1
   b7852:	e7fc      	b.n	b784e <_ZNKSt9type_infoeqERKS_+0x22>
   b7854:	2000      	movs	r0, #0
   b7856:	e7fa      	b.n	b784e <_ZNKSt9type_infoeqERKS_+0x22>

000b7858 <nan>:
   b7858:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7860 <nan+0x8>
   b785c:	4770      	bx	lr
   b785e:	bf00      	nop
   b7860:	00000000 	.word	0x00000000
   b7864:	7ff80000 	.word	0x7ff80000

000b7868 <__aeabi_drsub>:
   b7868:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b786c:	e002      	b.n	b7874 <__adddf3>
   b786e:	bf00      	nop

000b7870 <__aeabi_dsub>:
   b7870:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7874 <__adddf3>:
   b7874:	b530      	push	{r4, r5, lr}
   b7876:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b787a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b787e:	ea94 0f05 	teq	r4, r5
   b7882:	bf08      	it	eq
   b7884:	ea90 0f02 	teqeq	r0, r2
   b7888:	bf1f      	itttt	ne
   b788a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b788e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7892:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7896:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b789a:	f000 80e2 	beq.w	b7a62 <__adddf3+0x1ee>
   b789e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b78a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b78a6:	bfb8      	it	lt
   b78a8:	426d      	neglt	r5, r5
   b78aa:	dd0c      	ble.n	b78c6 <__adddf3+0x52>
   b78ac:	442c      	add	r4, r5
   b78ae:	ea80 0202 	eor.w	r2, r0, r2
   b78b2:	ea81 0303 	eor.w	r3, r1, r3
   b78b6:	ea82 0000 	eor.w	r0, r2, r0
   b78ba:	ea83 0101 	eor.w	r1, r3, r1
   b78be:	ea80 0202 	eor.w	r2, r0, r2
   b78c2:	ea81 0303 	eor.w	r3, r1, r3
   b78c6:	2d36      	cmp	r5, #54	; 0x36
   b78c8:	bf88      	it	hi
   b78ca:	bd30      	pophi	{r4, r5, pc}
   b78cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b78d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b78d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b78d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b78dc:	d002      	beq.n	b78e4 <__adddf3+0x70>
   b78de:	4240      	negs	r0, r0
   b78e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b78e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b78e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b78ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b78f0:	d002      	beq.n	b78f8 <__adddf3+0x84>
   b78f2:	4252      	negs	r2, r2
   b78f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b78f8:	ea94 0f05 	teq	r4, r5
   b78fc:	f000 80a7 	beq.w	b7a4e <__adddf3+0x1da>
   b7900:	f1a4 0401 	sub.w	r4, r4, #1
   b7904:	f1d5 0e20 	rsbs	lr, r5, #32
   b7908:	db0d      	blt.n	b7926 <__adddf3+0xb2>
   b790a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b790e:	fa22 f205 	lsr.w	r2, r2, r5
   b7912:	1880      	adds	r0, r0, r2
   b7914:	f141 0100 	adc.w	r1, r1, #0
   b7918:	fa03 f20e 	lsl.w	r2, r3, lr
   b791c:	1880      	adds	r0, r0, r2
   b791e:	fa43 f305 	asr.w	r3, r3, r5
   b7922:	4159      	adcs	r1, r3
   b7924:	e00e      	b.n	b7944 <__adddf3+0xd0>
   b7926:	f1a5 0520 	sub.w	r5, r5, #32
   b792a:	f10e 0e20 	add.w	lr, lr, #32
   b792e:	2a01      	cmp	r2, #1
   b7930:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7934:	bf28      	it	cs
   b7936:	f04c 0c02 	orrcs.w	ip, ip, #2
   b793a:	fa43 f305 	asr.w	r3, r3, r5
   b793e:	18c0      	adds	r0, r0, r3
   b7940:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7944:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7948:	d507      	bpl.n	b795a <__adddf3+0xe6>
   b794a:	f04f 0e00 	mov.w	lr, #0
   b794e:	f1dc 0c00 	rsbs	ip, ip, #0
   b7952:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7956:	eb6e 0101 	sbc.w	r1, lr, r1
   b795a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b795e:	d31b      	bcc.n	b7998 <__adddf3+0x124>
   b7960:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7964:	d30c      	bcc.n	b7980 <__adddf3+0x10c>
   b7966:	0849      	lsrs	r1, r1, #1
   b7968:	ea5f 0030 	movs.w	r0, r0, rrx
   b796c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7970:	f104 0401 	add.w	r4, r4, #1
   b7974:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7978:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b797c:	f080 809a 	bcs.w	b7ab4 <__adddf3+0x240>
   b7980:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7984:	bf08      	it	eq
   b7986:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b798a:	f150 0000 	adcs.w	r0, r0, #0
   b798e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7992:	ea41 0105 	orr.w	r1, r1, r5
   b7996:	bd30      	pop	{r4, r5, pc}
   b7998:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b799c:	4140      	adcs	r0, r0
   b799e:	eb41 0101 	adc.w	r1, r1, r1
   b79a2:	3c01      	subs	r4, #1
   b79a4:	bf28      	it	cs
   b79a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b79aa:	d2e9      	bcs.n	b7980 <__adddf3+0x10c>
   b79ac:	f091 0f00 	teq	r1, #0
   b79b0:	bf04      	itt	eq
   b79b2:	4601      	moveq	r1, r0
   b79b4:	2000      	moveq	r0, #0
   b79b6:	fab1 f381 	clz	r3, r1
   b79ba:	bf08      	it	eq
   b79bc:	3320      	addeq	r3, #32
   b79be:	f1a3 030b 	sub.w	r3, r3, #11
   b79c2:	f1b3 0220 	subs.w	r2, r3, #32
   b79c6:	da0c      	bge.n	b79e2 <__adddf3+0x16e>
   b79c8:	320c      	adds	r2, #12
   b79ca:	dd08      	ble.n	b79de <__adddf3+0x16a>
   b79cc:	f102 0c14 	add.w	ip, r2, #20
   b79d0:	f1c2 020c 	rsb	r2, r2, #12
   b79d4:	fa01 f00c 	lsl.w	r0, r1, ip
   b79d8:	fa21 f102 	lsr.w	r1, r1, r2
   b79dc:	e00c      	b.n	b79f8 <__adddf3+0x184>
   b79de:	f102 0214 	add.w	r2, r2, #20
   b79e2:	bfd8      	it	le
   b79e4:	f1c2 0c20 	rsble	ip, r2, #32
   b79e8:	fa01 f102 	lsl.w	r1, r1, r2
   b79ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   b79f0:	bfdc      	itt	le
   b79f2:	ea41 010c 	orrle.w	r1, r1, ip
   b79f6:	4090      	lslle	r0, r2
   b79f8:	1ae4      	subs	r4, r4, r3
   b79fa:	bfa2      	ittt	ge
   b79fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7a00:	4329      	orrge	r1, r5
   b7a02:	bd30      	popge	{r4, r5, pc}
   b7a04:	ea6f 0404 	mvn.w	r4, r4
   b7a08:	3c1f      	subs	r4, #31
   b7a0a:	da1c      	bge.n	b7a46 <__adddf3+0x1d2>
   b7a0c:	340c      	adds	r4, #12
   b7a0e:	dc0e      	bgt.n	b7a2e <__adddf3+0x1ba>
   b7a10:	f104 0414 	add.w	r4, r4, #20
   b7a14:	f1c4 0220 	rsb	r2, r4, #32
   b7a18:	fa20 f004 	lsr.w	r0, r0, r4
   b7a1c:	fa01 f302 	lsl.w	r3, r1, r2
   b7a20:	ea40 0003 	orr.w	r0, r0, r3
   b7a24:	fa21 f304 	lsr.w	r3, r1, r4
   b7a28:	ea45 0103 	orr.w	r1, r5, r3
   b7a2c:	bd30      	pop	{r4, r5, pc}
   b7a2e:	f1c4 040c 	rsb	r4, r4, #12
   b7a32:	f1c4 0220 	rsb	r2, r4, #32
   b7a36:	fa20 f002 	lsr.w	r0, r0, r2
   b7a3a:	fa01 f304 	lsl.w	r3, r1, r4
   b7a3e:	ea40 0003 	orr.w	r0, r0, r3
   b7a42:	4629      	mov	r1, r5
   b7a44:	bd30      	pop	{r4, r5, pc}
   b7a46:	fa21 f004 	lsr.w	r0, r1, r4
   b7a4a:	4629      	mov	r1, r5
   b7a4c:	bd30      	pop	{r4, r5, pc}
   b7a4e:	f094 0f00 	teq	r4, #0
   b7a52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7a56:	bf06      	itte	eq
   b7a58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7a5c:	3401      	addeq	r4, #1
   b7a5e:	3d01      	subne	r5, #1
   b7a60:	e74e      	b.n	b7900 <__adddf3+0x8c>
   b7a62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7a66:	bf18      	it	ne
   b7a68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7a6c:	d029      	beq.n	b7ac2 <__adddf3+0x24e>
   b7a6e:	ea94 0f05 	teq	r4, r5
   b7a72:	bf08      	it	eq
   b7a74:	ea90 0f02 	teqeq	r0, r2
   b7a78:	d005      	beq.n	b7a86 <__adddf3+0x212>
   b7a7a:	ea54 0c00 	orrs.w	ip, r4, r0
   b7a7e:	bf04      	itt	eq
   b7a80:	4619      	moveq	r1, r3
   b7a82:	4610      	moveq	r0, r2
   b7a84:	bd30      	pop	{r4, r5, pc}
   b7a86:	ea91 0f03 	teq	r1, r3
   b7a8a:	bf1e      	ittt	ne
   b7a8c:	2100      	movne	r1, #0
   b7a8e:	2000      	movne	r0, #0
   b7a90:	bd30      	popne	{r4, r5, pc}
   b7a92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7a96:	d105      	bne.n	b7aa4 <__adddf3+0x230>
   b7a98:	0040      	lsls	r0, r0, #1
   b7a9a:	4149      	adcs	r1, r1
   b7a9c:	bf28      	it	cs
   b7a9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7aa2:	bd30      	pop	{r4, r5, pc}
   b7aa4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7aa8:	bf3c      	itt	cc
   b7aaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7aae:	bd30      	popcc	{r4, r5, pc}
   b7ab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7ab4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7ab8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7abc:	f04f 0000 	mov.w	r0, #0
   b7ac0:	bd30      	pop	{r4, r5, pc}
   b7ac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7ac6:	bf1a      	itte	ne
   b7ac8:	4619      	movne	r1, r3
   b7aca:	4610      	movne	r0, r2
   b7acc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7ad0:	bf1c      	itt	ne
   b7ad2:	460b      	movne	r3, r1
   b7ad4:	4602      	movne	r2, r0
   b7ad6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7ada:	bf06      	itte	eq
   b7adc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7ae0:	ea91 0f03 	teqeq	r1, r3
   b7ae4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7ae8:	bd30      	pop	{r4, r5, pc}
   b7aea:	bf00      	nop

000b7aec <__aeabi_ui2d>:
   b7aec:	f090 0f00 	teq	r0, #0
   b7af0:	bf04      	itt	eq
   b7af2:	2100      	moveq	r1, #0
   b7af4:	4770      	bxeq	lr
   b7af6:	b530      	push	{r4, r5, lr}
   b7af8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7afc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7b00:	f04f 0500 	mov.w	r5, #0
   b7b04:	f04f 0100 	mov.w	r1, #0
   b7b08:	e750      	b.n	b79ac <__adddf3+0x138>
   b7b0a:	bf00      	nop

000b7b0c <__aeabi_i2d>:
   b7b0c:	f090 0f00 	teq	r0, #0
   b7b10:	bf04      	itt	eq
   b7b12:	2100      	moveq	r1, #0
   b7b14:	4770      	bxeq	lr
   b7b16:	b530      	push	{r4, r5, lr}
   b7b18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7b1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7b20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7b24:	bf48      	it	mi
   b7b26:	4240      	negmi	r0, r0
   b7b28:	f04f 0100 	mov.w	r1, #0
   b7b2c:	e73e      	b.n	b79ac <__adddf3+0x138>
   b7b2e:	bf00      	nop

000b7b30 <__aeabi_f2d>:
   b7b30:	0042      	lsls	r2, r0, #1
   b7b32:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7b36:	ea4f 0131 	mov.w	r1, r1, rrx
   b7b3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7b3e:	bf1f      	itttt	ne
   b7b40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7b44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7b48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7b4c:	4770      	bxne	lr
   b7b4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7b52:	bf08      	it	eq
   b7b54:	4770      	bxeq	lr
   b7b56:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7b5a:	bf04      	itt	eq
   b7b5c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7b60:	4770      	bxeq	lr
   b7b62:	b530      	push	{r4, r5, lr}
   b7b64:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7b68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7b6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7b70:	e71c      	b.n	b79ac <__adddf3+0x138>
   b7b72:	bf00      	nop

000b7b74 <__aeabi_ul2d>:
   b7b74:	ea50 0201 	orrs.w	r2, r0, r1
   b7b78:	bf08      	it	eq
   b7b7a:	4770      	bxeq	lr
   b7b7c:	b530      	push	{r4, r5, lr}
   b7b7e:	f04f 0500 	mov.w	r5, #0
   b7b82:	e00a      	b.n	b7b9a <__aeabi_l2d+0x16>

000b7b84 <__aeabi_l2d>:
   b7b84:	ea50 0201 	orrs.w	r2, r0, r1
   b7b88:	bf08      	it	eq
   b7b8a:	4770      	bxeq	lr
   b7b8c:	b530      	push	{r4, r5, lr}
   b7b8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7b92:	d502      	bpl.n	b7b9a <__aeabi_l2d+0x16>
   b7b94:	4240      	negs	r0, r0
   b7b96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7b9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7ba2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7ba6:	f43f aed8 	beq.w	b795a <__adddf3+0xe6>
   b7baa:	f04f 0203 	mov.w	r2, #3
   b7bae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7bb2:	bf18      	it	ne
   b7bb4:	3203      	addne	r2, #3
   b7bb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7bba:	bf18      	it	ne
   b7bbc:	3203      	addne	r2, #3
   b7bbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7bc2:	f1c2 0320 	rsb	r3, r2, #32
   b7bc6:	fa00 fc03 	lsl.w	ip, r0, r3
   b7bca:	fa20 f002 	lsr.w	r0, r0, r2
   b7bce:	fa01 fe03 	lsl.w	lr, r1, r3
   b7bd2:	ea40 000e 	orr.w	r0, r0, lr
   b7bd6:	fa21 f102 	lsr.w	r1, r1, r2
   b7bda:	4414      	add	r4, r2
   b7bdc:	e6bd      	b.n	b795a <__adddf3+0xe6>
   b7bde:	bf00      	nop

000b7be0 <__aeabi_dmul>:
   b7be0:	b570      	push	{r4, r5, r6, lr}
   b7be2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7be6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7bea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7bee:	bf1d      	ittte	ne
   b7bf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7bf4:	ea94 0f0c 	teqne	r4, ip
   b7bf8:	ea95 0f0c 	teqne	r5, ip
   b7bfc:	f000 f8de 	bleq	b7dbc <__aeabi_dmul+0x1dc>
   b7c00:	442c      	add	r4, r5
   b7c02:	ea81 0603 	eor.w	r6, r1, r3
   b7c06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7c0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7c0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7c12:	bf18      	it	ne
   b7c14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7c18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7c20:	d038      	beq.n	b7c94 <__aeabi_dmul+0xb4>
   b7c22:	fba0 ce02 	umull	ip, lr, r0, r2
   b7c26:	f04f 0500 	mov.w	r5, #0
   b7c2a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7c2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7c32:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7c36:	f04f 0600 	mov.w	r6, #0
   b7c3a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7c3e:	f09c 0f00 	teq	ip, #0
   b7c42:	bf18      	it	ne
   b7c44:	f04e 0e01 	orrne.w	lr, lr, #1
   b7c48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7c4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7c50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7c54:	d204      	bcs.n	b7c60 <__aeabi_dmul+0x80>
   b7c56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7c5a:	416d      	adcs	r5, r5
   b7c5c:	eb46 0606 	adc.w	r6, r6, r6
   b7c60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7c64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7c68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7c6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7c70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7c74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7c78:	bf88      	it	hi
   b7c7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7c7e:	d81e      	bhi.n	b7cbe <__aeabi_dmul+0xde>
   b7c80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7c84:	bf08      	it	eq
   b7c86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7c8a:	f150 0000 	adcs.w	r0, r0, #0
   b7c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7c92:	bd70      	pop	{r4, r5, r6, pc}
   b7c94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7c98:	ea46 0101 	orr.w	r1, r6, r1
   b7c9c:	ea40 0002 	orr.w	r0, r0, r2
   b7ca0:	ea81 0103 	eor.w	r1, r1, r3
   b7ca4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7ca8:	bfc2      	ittt	gt
   b7caa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7cae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7cb2:	bd70      	popgt	{r4, r5, r6, pc}
   b7cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7cb8:	f04f 0e00 	mov.w	lr, #0
   b7cbc:	3c01      	subs	r4, #1
   b7cbe:	f300 80ab 	bgt.w	b7e18 <__aeabi_dmul+0x238>
   b7cc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7cc6:	bfde      	ittt	le
   b7cc8:	2000      	movle	r0, #0
   b7cca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7cce:	bd70      	pople	{r4, r5, r6, pc}
   b7cd0:	f1c4 0400 	rsb	r4, r4, #0
   b7cd4:	3c20      	subs	r4, #32
   b7cd6:	da35      	bge.n	b7d44 <__aeabi_dmul+0x164>
   b7cd8:	340c      	adds	r4, #12
   b7cda:	dc1b      	bgt.n	b7d14 <__aeabi_dmul+0x134>
   b7cdc:	f104 0414 	add.w	r4, r4, #20
   b7ce0:	f1c4 0520 	rsb	r5, r4, #32
   b7ce4:	fa00 f305 	lsl.w	r3, r0, r5
   b7ce8:	fa20 f004 	lsr.w	r0, r0, r4
   b7cec:	fa01 f205 	lsl.w	r2, r1, r5
   b7cf0:	ea40 0002 	orr.w	r0, r0, r2
   b7cf4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7cf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7cfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7d00:	fa21 f604 	lsr.w	r6, r1, r4
   b7d04:	eb42 0106 	adc.w	r1, r2, r6
   b7d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7d0c:	bf08      	it	eq
   b7d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7d12:	bd70      	pop	{r4, r5, r6, pc}
   b7d14:	f1c4 040c 	rsb	r4, r4, #12
   b7d18:	f1c4 0520 	rsb	r5, r4, #32
   b7d1c:	fa00 f304 	lsl.w	r3, r0, r4
   b7d20:	fa20 f005 	lsr.w	r0, r0, r5
   b7d24:	fa01 f204 	lsl.w	r2, r1, r4
   b7d28:	ea40 0002 	orr.w	r0, r0, r2
   b7d2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7d30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7d34:	f141 0100 	adc.w	r1, r1, #0
   b7d38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7d3c:	bf08      	it	eq
   b7d3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7d42:	bd70      	pop	{r4, r5, r6, pc}
   b7d44:	f1c4 0520 	rsb	r5, r4, #32
   b7d48:	fa00 f205 	lsl.w	r2, r0, r5
   b7d4c:	ea4e 0e02 	orr.w	lr, lr, r2
   b7d50:	fa20 f304 	lsr.w	r3, r0, r4
   b7d54:	fa01 f205 	lsl.w	r2, r1, r5
   b7d58:	ea43 0302 	orr.w	r3, r3, r2
   b7d5c:	fa21 f004 	lsr.w	r0, r1, r4
   b7d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7d64:	fa21 f204 	lsr.w	r2, r1, r4
   b7d68:	ea20 0002 	bic.w	r0, r0, r2
   b7d6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7d70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7d74:	bf08      	it	eq
   b7d76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7d7a:	bd70      	pop	{r4, r5, r6, pc}
   b7d7c:	f094 0f00 	teq	r4, #0
   b7d80:	d10f      	bne.n	b7da2 <__aeabi_dmul+0x1c2>
   b7d82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7d86:	0040      	lsls	r0, r0, #1
   b7d88:	eb41 0101 	adc.w	r1, r1, r1
   b7d8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7d90:	bf08      	it	eq
   b7d92:	3c01      	subeq	r4, #1
   b7d94:	d0f7      	beq.n	b7d86 <__aeabi_dmul+0x1a6>
   b7d96:	ea41 0106 	orr.w	r1, r1, r6
   b7d9a:	f095 0f00 	teq	r5, #0
   b7d9e:	bf18      	it	ne
   b7da0:	4770      	bxne	lr
   b7da2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7da6:	0052      	lsls	r2, r2, #1
   b7da8:	eb43 0303 	adc.w	r3, r3, r3
   b7dac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7db0:	bf08      	it	eq
   b7db2:	3d01      	subeq	r5, #1
   b7db4:	d0f7      	beq.n	b7da6 <__aeabi_dmul+0x1c6>
   b7db6:	ea43 0306 	orr.w	r3, r3, r6
   b7dba:	4770      	bx	lr
   b7dbc:	ea94 0f0c 	teq	r4, ip
   b7dc0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7dc4:	bf18      	it	ne
   b7dc6:	ea95 0f0c 	teqne	r5, ip
   b7dca:	d00c      	beq.n	b7de6 <__aeabi_dmul+0x206>
   b7dcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7dd0:	bf18      	it	ne
   b7dd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7dd6:	d1d1      	bne.n	b7d7c <__aeabi_dmul+0x19c>
   b7dd8:	ea81 0103 	eor.w	r1, r1, r3
   b7ddc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7de0:	f04f 0000 	mov.w	r0, #0
   b7de4:	bd70      	pop	{r4, r5, r6, pc}
   b7de6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7dea:	bf06      	itte	eq
   b7dec:	4610      	moveq	r0, r2
   b7dee:	4619      	moveq	r1, r3
   b7df0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7df4:	d019      	beq.n	b7e2a <__aeabi_dmul+0x24a>
   b7df6:	ea94 0f0c 	teq	r4, ip
   b7dfa:	d102      	bne.n	b7e02 <__aeabi_dmul+0x222>
   b7dfc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7e00:	d113      	bne.n	b7e2a <__aeabi_dmul+0x24a>
   b7e02:	ea95 0f0c 	teq	r5, ip
   b7e06:	d105      	bne.n	b7e14 <__aeabi_dmul+0x234>
   b7e08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7e0c:	bf1c      	itt	ne
   b7e0e:	4610      	movne	r0, r2
   b7e10:	4619      	movne	r1, r3
   b7e12:	d10a      	bne.n	b7e2a <__aeabi_dmul+0x24a>
   b7e14:	ea81 0103 	eor.w	r1, r1, r3
   b7e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7e1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7e20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7e24:	f04f 0000 	mov.w	r0, #0
   b7e28:	bd70      	pop	{r4, r5, r6, pc}
   b7e2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7e2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7e32:	bd70      	pop	{r4, r5, r6, pc}

000b7e34 <__aeabi_ddiv>:
   b7e34:	b570      	push	{r4, r5, r6, lr}
   b7e36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7e3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7e3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7e42:	bf1d      	ittte	ne
   b7e44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7e48:	ea94 0f0c 	teqne	r4, ip
   b7e4c:	ea95 0f0c 	teqne	r5, ip
   b7e50:	f000 f8a7 	bleq	b7fa2 <__aeabi_ddiv+0x16e>
   b7e54:	eba4 0405 	sub.w	r4, r4, r5
   b7e58:	ea81 0e03 	eor.w	lr, r1, r3
   b7e5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7e60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7e64:	f000 8088 	beq.w	b7f78 <__aeabi_ddiv+0x144>
   b7e68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7e6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7e70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7e74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7e78:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7e7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7e80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7e84:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7e88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7e8c:	429d      	cmp	r5, r3
   b7e8e:	bf08      	it	eq
   b7e90:	4296      	cmpeq	r6, r2
   b7e92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7e96:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7e9a:	d202      	bcs.n	b7ea2 <__aeabi_ddiv+0x6e>
   b7e9c:	085b      	lsrs	r3, r3, #1
   b7e9e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7ea2:	1ab6      	subs	r6, r6, r2
   b7ea4:	eb65 0503 	sbc.w	r5, r5, r3
   b7ea8:	085b      	lsrs	r3, r3, #1
   b7eaa:	ea4f 0232 	mov.w	r2, r2, rrx
   b7eae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7eb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7eb6:	ebb6 0e02 	subs.w	lr, r6, r2
   b7eba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7ebe:	bf22      	ittt	cs
   b7ec0:	1ab6      	subcs	r6, r6, r2
   b7ec2:	4675      	movcs	r5, lr
   b7ec4:	ea40 000c 	orrcs.w	r0, r0, ip
   b7ec8:	085b      	lsrs	r3, r3, #1
   b7eca:	ea4f 0232 	mov.w	r2, r2, rrx
   b7ece:	ebb6 0e02 	subs.w	lr, r6, r2
   b7ed2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7ed6:	bf22      	ittt	cs
   b7ed8:	1ab6      	subcs	r6, r6, r2
   b7eda:	4675      	movcs	r5, lr
   b7edc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7ee0:	085b      	lsrs	r3, r3, #1
   b7ee2:	ea4f 0232 	mov.w	r2, r2, rrx
   b7ee6:	ebb6 0e02 	subs.w	lr, r6, r2
   b7eea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7eee:	bf22      	ittt	cs
   b7ef0:	1ab6      	subcs	r6, r6, r2
   b7ef2:	4675      	movcs	r5, lr
   b7ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7ef8:	085b      	lsrs	r3, r3, #1
   b7efa:	ea4f 0232 	mov.w	r2, r2, rrx
   b7efe:	ebb6 0e02 	subs.w	lr, r6, r2
   b7f02:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7f06:	bf22      	ittt	cs
   b7f08:	1ab6      	subcs	r6, r6, r2
   b7f0a:	4675      	movcs	r5, lr
   b7f0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7f10:	ea55 0e06 	orrs.w	lr, r5, r6
   b7f14:	d018      	beq.n	b7f48 <__aeabi_ddiv+0x114>
   b7f16:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7f1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7f1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7f22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7f26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7f2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7f2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7f32:	d1c0      	bne.n	b7eb6 <__aeabi_ddiv+0x82>
   b7f34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7f38:	d10b      	bne.n	b7f52 <__aeabi_ddiv+0x11e>
   b7f3a:	ea41 0100 	orr.w	r1, r1, r0
   b7f3e:	f04f 0000 	mov.w	r0, #0
   b7f42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7f46:	e7b6      	b.n	b7eb6 <__aeabi_ddiv+0x82>
   b7f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7f4c:	bf04      	itt	eq
   b7f4e:	4301      	orreq	r1, r0
   b7f50:	2000      	moveq	r0, #0
   b7f52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7f56:	bf88      	it	hi
   b7f58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7f5c:	f63f aeaf 	bhi.w	b7cbe <__aeabi_dmul+0xde>
   b7f60:	ebb5 0c03 	subs.w	ip, r5, r3
   b7f64:	bf04      	itt	eq
   b7f66:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7f6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7f6e:	f150 0000 	adcs.w	r0, r0, #0
   b7f72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7f76:	bd70      	pop	{r4, r5, r6, pc}
   b7f78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7f7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7f80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7f84:	bfc2      	ittt	gt
   b7f86:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7f8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7f8e:	bd70      	popgt	{r4, r5, r6, pc}
   b7f90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7f94:	f04f 0e00 	mov.w	lr, #0
   b7f98:	3c01      	subs	r4, #1
   b7f9a:	e690      	b.n	b7cbe <__aeabi_dmul+0xde>
   b7f9c:	ea45 0e06 	orr.w	lr, r5, r6
   b7fa0:	e68d      	b.n	b7cbe <__aeabi_dmul+0xde>
   b7fa2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7fa6:	ea94 0f0c 	teq	r4, ip
   b7faa:	bf08      	it	eq
   b7fac:	ea95 0f0c 	teqeq	r5, ip
   b7fb0:	f43f af3b 	beq.w	b7e2a <__aeabi_dmul+0x24a>
   b7fb4:	ea94 0f0c 	teq	r4, ip
   b7fb8:	d10a      	bne.n	b7fd0 <__aeabi_ddiv+0x19c>
   b7fba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7fbe:	f47f af34 	bne.w	b7e2a <__aeabi_dmul+0x24a>
   b7fc2:	ea95 0f0c 	teq	r5, ip
   b7fc6:	f47f af25 	bne.w	b7e14 <__aeabi_dmul+0x234>
   b7fca:	4610      	mov	r0, r2
   b7fcc:	4619      	mov	r1, r3
   b7fce:	e72c      	b.n	b7e2a <__aeabi_dmul+0x24a>
   b7fd0:	ea95 0f0c 	teq	r5, ip
   b7fd4:	d106      	bne.n	b7fe4 <__aeabi_ddiv+0x1b0>
   b7fd6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7fda:	f43f aefd 	beq.w	b7dd8 <__aeabi_dmul+0x1f8>
   b7fde:	4610      	mov	r0, r2
   b7fe0:	4619      	mov	r1, r3
   b7fe2:	e722      	b.n	b7e2a <__aeabi_dmul+0x24a>
   b7fe4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7fe8:	bf18      	it	ne
   b7fea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7fee:	f47f aec5 	bne.w	b7d7c <__aeabi_dmul+0x19c>
   b7ff2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7ff6:	f47f af0d 	bne.w	b7e14 <__aeabi_dmul+0x234>
   b7ffa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7ffe:	f47f aeeb 	bne.w	b7dd8 <__aeabi_dmul+0x1f8>
   b8002:	e712      	b.n	b7e2a <__aeabi_dmul+0x24a>

000b8004 <__gedf2>:
   b8004:	f04f 3cff 	mov.w	ip, #4294967295
   b8008:	e006      	b.n	b8018 <__cmpdf2+0x4>
   b800a:	bf00      	nop

000b800c <__ledf2>:
   b800c:	f04f 0c01 	mov.w	ip, #1
   b8010:	e002      	b.n	b8018 <__cmpdf2+0x4>
   b8012:	bf00      	nop

000b8014 <__cmpdf2>:
   b8014:	f04f 0c01 	mov.w	ip, #1
   b8018:	f84d cd04 	str.w	ip, [sp, #-4]!
   b801c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8028:	bf18      	it	ne
   b802a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b802e:	d01b      	beq.n	b8068 <__cmpdf2+0x54>
   b8030:	b001      	add	sp, #4
   b8032:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8036:	bf0c      	ite	eq
   b8038:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b803c:	ea91 0f03 	teqne	r1, r3
   b8040:	bf02      	ittt	eq
   b8042:	ea90 0f02 	teqeq	r0, r2
   b8046:	2000      	moveq	r0, #0
   b8048:	4770      	bxeq	lr
   b804a:	f110 0f00 	cmn.w	r0, #0
   b804e:	ea91 0f03 	teq	r1, r3
   b8052:	bf58      	it	pl
   b8054:	4299      	cmppl	r1, r3
   b8056:	bf08      	it	eq
   b8058:	4290      	cmpeq	r0, r2
   b805a:	bf2c      	ite	cs
   b805c:	17d8      	asrcs	r0, r3, #31
   b805e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8062:	f040 0001 	orr.w	r0, r0, #1
   b8066:	4770      	bx	lr
   b8068:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b806c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8070:	d102      	bne.n	b8078 <__cmpdf2+0x64>
   b8072:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8076:	d107      	bne.n	b8088 <__cmpdf2+0x74>
   b8078:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b807c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8080:	d1d6      	bne.n	b8030 <__cmpdf2+0x1c>
   b8082:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8086:	d0d3      	beq.n	b8030 <__cmpdf2+0x1c>
   b8088:	f85d 0b04 	ldr.w	r0, [sp], #4
   b808c:	4770      	bx	lr
   b808e:	bf00      	nop

000b8090 <__aeabi_cdrcmple>:
   b8090:	4684      	mov	ip, r0
   b8092:	4610      	mov	r0, r2
   b8094:	4662      	mov	r2, ip
   b8096:	468c      	mov	ip, r1
   b8098:	4619      	mov	r1, r3
   b809a:	4663      	mov	r3, ip
   b809c:	e000      	b.n	b80a0 <__aeabi_cdcmpeq>
   b809e:	bf00      	nop

000b80a0 <__aeabi_cdcmpeq>:
   b80a0:	b501      	push	{r0, lr}
   b80a2:	f7ff ffb7 	bl	b8014 <__cmpdf2>
   b80a6:	2800      	cmp	r0, #0
   b80a8:	bf48      	it	mi
   b80aa:	f110 0f00 	cmnmi.w	r0, #0
   b80ae:	bd01      	pop	{r0, pc}

000b80b0 <__aeabi_dcmpeq>:
   b80b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b80b4:	f7ff fff4 	bl	b80a0 <__aeabi_cdcmpeq>
   b80b8:	bf0c      	ite	eq
   b80ba:	2001      	moveq	r0, #1
   b80bc:	2000      	movne	r0, #0
   b80be:	f85d fb08 	ldr.w	pc, [sp], #8
   b80c2:	bf00      	nop

000b80c4 <__aeabi_dcmplt>:
   b80c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b80c8:	f7ff ffea 	bl	b80a0 <__aeabi_cdcmpeq>
   b80cc:	bf34      	ite	cc
   b80ce:	2001      	movcc	r0, #1
   b80d0:	2000      	movcs	r0, #0
   b80d2:	f85d fb08 	ldr.w	pc, [sp], #8
   b80d6:	bf00      	nop

000b80d8 <__aeabi_dcmple>:
   b80d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b80dc:	f7ff ffe0 	bl	b80a0 <__aeabi_cdcmpeq>
   b80e0:	bf94      	ite	ls
   b80e2:	2001      	movls	r0, #1
   b80e4:	2000      	movhi	r0, #0
   b80e6:	f85d fb08 	ldr.w	pc, [sp], #8
   b80ea:	bf00      	nop

000b80ec <__aeabi_dcmpge>:
   b80ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   b80f0:	f7ff ffce 	bl	b8090 <__aeabi_cdrcmple>
   b80f4:	bf94      	ite	ls
   b80f6:	2001      	movls	r0, #1
   b80f8:	2000      	movhi	r0, #0
   b80fa:	f85d fb08 	ldr.w	pc, [sp], #8
   b80fe:	bf00      	nop

000b8100 <__aeabi_dcmpgt>:
   b8100:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8104:	f7ff ffc4 	bl	b8090 <__aeabi_cdrcmple>
   b8108:	bf34      	ite	cc
   b810a:	2001      	movcc	r0, #1
   b810c:	2000      	movcs	r0, #0
   b810e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8112:	bf00      	nop

000b8114 <__aeabi_d2uiz>:
   b8114:	004a      	lsls	r2, r1, #1
   b8116:	d211      	bcs.n	b813c <__aeabi_d2uiz+0x28>
   b8118:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b811c:	d211      	bcs.n	b8142 <__aeabi_d2uiz+0x2e>
   b811e:	d50d      	bpl.n	b813c <__aeabi_d2uiz+0x28>
   b8120:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8124:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8128:	d40e      	bmi.n	b8148 <__aeabi_d2uiz+0x34>
   b812a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b812e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8132:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8136:	fa23 f002 	lsr.w	r0, r3, r2
   b813a:	4770      	bx	lr
   b813c:	f04f 0000 	mov.w	r0, #0
   b8140:	4770      	bx	lr
   b8142:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8146:	d102      	bne.n	b814e <__aeabi_d2uiz+0x3a>
   b8148:	f04f 30ff 	mov.w	r0, #4294967295
   b814c:	4770      	bx	lr
   b814e:	f04f 0000 	mov.w	r0, #0
   b8152:	4770      	bx	lr

000b8154 <__aeabi_d2ulz>:
   b8154:	b5d0      	push	{r4, r6, r7, lr}
   b8156:	4b0c      	ldr	r3, [pc, #48]	; (b8188 <__aeabi_d2ulz+0x34>)
   b8158:	2200      	movs	r2, #0
   b815a:	4606      	mov	r6, r0
   b815c:	460f      	mov	r7, r1
   b815e:	f7ff fd3f 	bl	b7be0 <__aeabi_dmul>
   b8162:	f7ff ffd7 	bl	b8114 <__aeabi_d2uiz>
   b8166:	4604      	mov	r4, r0
   b8168:	f7ff fcc0 	bl	b7aec <__aeabi_ui2d>
   b816c:	4b07      	ldr	r3, [pc, #28]	; (b818c <__aeabi_d2ulz+0x38>)
   b816e:	2200      	movs	r2, #0
   b8170:	f7ff fd36 	bl	b7be0 <__aeabi_dmul>
   b8174:	4602      	mov	r2, r0
   b8176:	460b      	mov	r3, r1
   b8178:	4630      	mov	r0, r6
   b817a:	4639      	mov	r1, r7
   b817c:	f7ff fb78 	bl	b7870 <__aeabi_dsub>
   b8180:	f7ff ffc8 	bl	b8114 <__aeabi_d2uiz>
   b8184:	4621      	mov	r1, r4
   b8186:	bdd0      	pop	{r4, r6, r7, pc}
   b8188:	3df00000 	.word	0x3df00000
   b818c:	41f00000 	.word	0x41f00000

000b8190 <atexit>:
   b8190:	2300      	movs	r3, #0
   b8192:	4601      	mov	r1, r0
   b8194:	461a      	mov	r2, r3
   b8196:	4618      	mov	r0, r3
   b8198:	f000 bef4 	b.w	b8f84 <__register_exitproc>

000b819c <atof>:
   b819c:	2100      	movs	r1, #0
   b819e:	f000 bee5 	b.w	b8f6c <strtod>

000b81a2 <memcpy>:
   b81a2:	440a      	add	r2, r1
   b81a4:	4291      	cmp	r1, r2
   b81a6:	f100 33ff 	add.w	r3, r0, #4294967295
   b81aa:	d100      	bne.n	b81ae <memcpy+0xc>
   b81ac:	4770      	bx	lr
   b81ae:	b510      	push	{r4, lr}
   b81b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   b81b4:	f803 4f01 	strb.w	r4, [r3, #1]!
   b81b8:	4291      	cmp	r1, r2
   b81ba:	d1f9      	bne.n	b81b0 <memcpy+0xe>
   b81bc:	bd10      	pop	{r4, pc}

000b81be <memmove>:
   b81be:	4288      	cmp	r0, r1
   b81c0:	b510      	push	{r4, lr}
   b81c2:	eb01 0402 	add.w	r4, r1, r2
   b81c6:	d902      	bls.n	b81ce <memmove+0x10>
   b81c8:	4284      	cmp	r4, r0
   b81ca:	4623      	mov	r3, r4
   b81cc:	d807      	bhi.n	b81de <memmove+0x20>
   b81ce:	1e43      	subs	r3, r0, #1
   b81d0:	42a1      	cmp	r1, r4
   b81d2:	d008      	beq.n	b81e6 <memmove+0x28>
   b81d4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b81d8:	f803 2f01 	strb.w	r2, [r3, #1]!
   b81dc:	e7f8      	b.n	b81d0 <memmove+0x12>
   b81de:	4402      	add	r2, r0
   b81e0:	4601      	mov	r1, r0
   b81e2:	428a      	cmp	r2, r1
   b81e4:	d100      	bne.n	b81e8 <memmove+0x2a>
   b81e6:	bd10      	pop	{r4, pc}
   b81e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b81ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b81f0:	e7f7      	b.n	b81e2 <memmove+0x24>

000b81f2 <memset>:
   b81f2:	4402      	add	r2, r0
   b81f4:	4603      	mov	r3, r0
   b81f6:	4293      	cmp	r3, r2
   b81f8:	d100      	bne.n	b81fc <memset+0xa>
   b81fa:	4770      	bx	lr
   b81fc:	f803 1b01 	strb.w	r1, [r3], #1
   b8200:	e7f9      	b.n	b81f6 <memset+0x4>
	...

000b8204 <srand>:
   b8204:	b538      	push	{r3, r4, r5, lr}
   b8206:	4b10      	ldr	r3, [pc, #64]	; (b8248 <srand+0x44>)
   b8208:	681d      	ldr	r5, [r3, #0]
   b820a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b820c:	4604      	mov	r4, r0
   b820e:	b9b3      	cbnz	r3, b823e <srand+0x3a>
   b8210:	2018      	movs	r0, #24
   b8212:	f7fe f80b 	bl	b622c <malloc>
   b8216:	4602      	mov	r2, r0
   b8218:	63a8      	str	r0, [r5, #56]	; 0x38
   b821a:	b920      	cbnz	r0, b8226 <srand+0x22>
   b821c:	4b0b      	ldr	r3, [pc, #44]	; (b824c <srand+0x48>)
   b821e:	480c      	ldr	r0, [pc, #48]	; (b8250 <srand+0x4c>)
   b8220:	2142      	movs	r1, #66	; 0x42
   b8222:	f7fe f82b 	bl	b627c <__assert_func>
   b8226:	490b      	ldr	r1, [pc, #44]	; (b8254 <srand+0x50>)
   b8228:	4b0b      	ldr	r3, [pc, #44]	; (b8258 <srand+0x54>)
   b822a:	e9c0 1300 	strd	r1, r3, [r0]
   b822e:	4b0b      	ldr	r3, [pc, #44]	; (b825c <srand+0x58>)
   b8230:	6083      	str	r3, [r0, #8]
   b8232:	230b      	movs	r3, #11
   b8234:	8183      	strh	r3, [r0, #12]
   b8236:	2100      	movs	r1, #0
   b8238:	2001      	movs	r0, #1
   b823a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b823e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8240:	2200      	movs	r2, #0
   b8242:	611c      	str	r4, [r3, #16]
   b8244:	615a      	str	r2, [r3, #20]
   b8246:	bd38      	pop	{r3, r4, r5, pc}
   b8248:	2003e310 	.word	0x2003e310
   b824c:	000bab79 	.word	0x000bab79
   b8250:	000bab90 	.word	0x000bab90
   b8254:	abcd330e 	.word	0xabcd330e
   b8258:	e66d1234 	.word	0xe66d1234
   b825c:	0005deec 	.word	0x0005deec

000b8260 <strcmp>:
   b8260:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8264:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8268:	2a01      	cmp	r2, #1
   b826a:	bf28      	it	cs
   b826c:	429a      	cmpcs	r2, r3
   b826e:	d0f7      	beq.n	b8260 <strcmp>
   b8270:	1ad0      	subs	r0, r2, r3
   b8272:	4770      	bx	lr

000b8274 <strcpy>:
   b8274:	4603      	mov	r3, r0
   b8276:	f811 2b01 	ldrb.w	r2, [r1], #1
   b827a:	f803 2b01 	strb.w	r2, [r3], #1
   b827e:	2a00      	cmp	r2, #0
   b8280:	d1f9      	bne.n	b8276 <strcpy+0x2>
   b8282:	4770      	bx	lr

000b8284 <strlen>:
   b8284:	4603      	mov	r3, r0
   b8286:	f813 2b01 	ldrb.w	r2, [r3], #1
   b828a:	2a00      	cmp	r2, #0
   b828c:	d1fb      	bne.n	b8286 <strlen+0x2>
   b828e:	1a18      	subs	r0, r3, r0
   b8290:	3801      	subs	r0, #1
   b8292:	4770      	bx	lr

000b8294 <strncasecmp>:
   b8294:	b570      	push	{r4, r5, r6, lr}
   b8296:	4e0f      	ldr	r6, [pc, #60]	; (b82d4 <strncasecmp+0x40>)
   b8298:	4604      	mov	r4, r0
   b829a:	440a      	add	r2, r1
   b829c:	428a      	cmp	r2, r1
   b829e:	d101      	bne.n	b82a4 <strncasecmp+0x10>
   b82a0:	2000      	movs	r0, #0
   b82a2:	e013      	b.n	b82cc <strncasecmp+0x38>
   b82a4:	f814 3b01 	ldrb.w	r3, [r4], #1
   b82a8:	5d98      	ldrb	r0, [r3, r6]
   b82aa:	f000 0003 	and.w	r0, r0, #3
   b82ae:	2801      	cmp	r0, #1
   b82b0:	f811 0b01 	ldrb.w	r0, [r1], #1
   b82b4:	5c35      	ldrb	r5, [r6, r0]
   b82b6:	f005 0503 	and.w	r5, r5, #3
   b82ba:	bf08      	it	eq
   b82bc:	3320      	addeq	r3, #32
   b82be:	2d01      	cmp	r5, #1
   b82c0:	bf08      	it	eq
   b82c2:	3020      	addeq	r0, #32
   b82c4:	1a1b      	subs	r3, r3, r0
   b82c6:	d102      	bne.n	b82ce <strncasecmp+0x3a>
   b82c8:	2800      	cmp	r0, #0
   b82ca:	d1e7      	bne.n	b829c <strncasecmp+0x8>
   b82cc:	bd70      	pop	{r4, r5, r6, pc}
   b82ce:	4618      	mov	r0, r3
   b82d0:	e7fc      	b.n	b82cc <strncasecmp+0x38>
   b82d2:	bf00      	nop
   b82d4:	000bac71 	.word	0x000bac71

000b82d8 <strncmp>:
   b82d8:	b510      	push	{r4, lr}
   b82da:	b17a      	cbz	r2, b82fc <strncmp+0x24>
   b82dc:	4603      	mov	r3, r0
   b82de:	3901      	subs	r1, #1
   b82e0:	1884      	adds	r4, r0, r2
   b82e2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b82e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b82ea:	4290      	cmp	r0, r2
   b82ec:	d101      	bne.n	b82f2 <strncmp+0x1a>
   b82ee:	42a3      	cmp	r3, r4
   b82f0:	d101      	bne.n	b82f6 <strncmp+0x1e>
   b82f2:	1a80      	subs	r0, r0, r2
   b82f4:	bd10      	pop	{r4, pc}
   b82f6:	2800      	cmp	r0, #0
   b82f8:	d1f3      	bne.n	b82e2 <strncmp+0xa>
   b82fa:	e7fa      	b.n	b82f2 <strncmp+0x1a>
   b82fc:	4610      	mov	r0, r2
   b82fe:	e7f9      	b.n	b82f4 <strncmp+0x1c>

000b8300 <strncpy>:
   b8300:	b510      	push	{r4, lr}
   b8302:	3901      	subs	r1, #1
   b8304:	4603      	mov	r3, r0
   b8306:	b132      	cbz	r2, b8316 <strncpy+0x16>
   b8308:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b830c:	f803 4b01 	strb.w	r4, [r3], #1
   b8310:	3a01      	subs	r2, #1
   b8312:	2c00      	cmp	r4, #0
   b8314:	d1f7      	bne.n	b8306 <strncpy+0x6>
   b8316:	441a      	add	r2, r3
   b8318:	2100      	movs	r1, #0
   b831a:	4293      	cmp	r3, r2
   b831c:	d100      	bne.n	b8320 <strncpy+0x20>
   b831e:	bd10      	pop	{r4, pc}
   b8320:	f803 1b01 	strb.w	r1, [r3], #1
   b8324:	e7f9      	b.n	b831a <strncpy+0x1a>

000b8326 <sulp>:
   b8326:	b570      	push	{r4, r5, r6, lr}
   b8328:	4604      	mov	r4, r0
   b832a:	460d      	mov	r5, r1
   b832c:	ec45 4b10 	vmov	d0, r4, r5
   b8330:	4616      	mov	r6, r2
   b8332:	f001 fd81 	bl	b9e38 <__ulp>
   b8336:	ec51 0b10 	vmov	r0, r1, d0
   b833a:	b17e      	cbz	r6, b835c <sulp+0x36>
   b833c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8340:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8344:	2b00      	cmp	r3, #0
   b8346:	dd09      	ble.n	b835c <sulp+0x36>
   b8348:	051b      	lsls	r3, r3, #20
   b834a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b834e:	2400      	movs	r4, #0
   b8350:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b8354:	4622      	mov	r2, r4
   b8356:	462b      	mov	r3, r5
   b8358:	f7ff fc42 	bl	b7be0 <__aeabi_dmul>
   b835c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8360 <_strtod_l>:
   b8360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8364:	ed2d 8b02 	vpush	{d8}
   b8368:	b09d      	sub	sp, #116	; 0x74
   b836a:	461f      	mov	r7, r3
   b836c:	2300      	movs	r3, #0
   b836e:	9318      	str	r3, [sp, #96]	; 0x60
   b8370:	4ba2      	ldr	r3, [pc, #648]	; (b85fc <_strtod_l+0x29c>)
   b8372:	9213      	str	r2, [sp, #76]	; 0x4c
   b8374:	681b      	ldr	r3, [r3, #0]
   b8376:	9305      	str	r3, [sp, #20]
   b8378:	4604      	mov	r4, r0
   b837a:	4618      	mov	r0, r3
   b837c:	4688      	mov	r8, r1
   b837e:	f7ff ff81 	bl	b8284 <strlen>
   b8382:	f04f 0a00 	mov.w	sl, #0
   b8386:	4605      	mov	r5, r0
   b8388:	f04f 0b00 	mov.w	fp, #0
   b838c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8392:	781a      	ldrb	r2, [r3, #0]
   b8394:	2a2b      	cmp	r2, #43	; 0x2b
   b8396:	d04e      	beq.n	b8436 <_strtod_l+0xd6>
   b8398:	d83b      	bhi.n	b8412 <_strtod_l+0xb2>
   b839a:	2a0d      	cmp	r2, #13
   b839c:	d834      	bhi.n	b8408 <_strtod_l+0xa8>
   b839e:	2a08      	cmp	r2, #8
   b83a0:	d834      	bhi.n	b840c <_strtod_l+0xac>
   b83a2:	2a00      	cmp	r2, #0
   b83a4:	d03e      	beq.n	b8424 <_strtod_l+0xc4>
   b83a6:	2300      	movs	r3, #0
   b83a8:	930a      	str	r3, [sp, #40]	; 0x28
   b83aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b83ac:	7833      	ldrb	r3, [r6, #0]
   b83ae:	2b30      	cmp	r3, #48	; 0x30
   b83b0:	f040 80b0 	bne.w	b8514 <_strtod_l+0x1b4>
   b83b4:	7873      	ldrb	r3, [r6, #1]
   b83b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b83ba:	2b58      	cmp	r3, #88	; 0x58
   b83bc:	d168      	bne.n	b8490 <_strtod_l+0x130>
   b83be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b83c0:	9301      	str	r3, [sp, #4]
   b83c2:	ab18      	add	r3, sp, #96	; 0x60
   b83c4:	9702      	str	r7, [sp, #8]
   b83c6:	9300      	str	r3, [sp, #0]
   b83c8:	4a8d      	ldr	r2, [pc, #564]	; (b8600 <_strtod_l+0x2a0>)
   b83ca:	ab19      	add	r3, sp, #100	; 0x64
   b83cc:	a917      	add	r1, sp, #92	; 0x5c
   b83ce:	4620      	mov	r0, r4
   b83d0:	f000 fea2 	bl	b9118 <__gethex>
   b83d4:	f010 0707 	ands.w	r7, r0, #7
   b83d8:	4605      	mov	r5, r0
   b83da:	d005      	beq.n	b83e8 <_strtod_l+0x88>
   b83dc:	2f06      	cmp	r7, #6
   b83de:	d12c      	bne.n	b843a <_strtod_l+0xda>
   b83e0:	3601      	adds	r6, #1
   b83e2:	2300      	movs	r3, #0
   b83e4:	9617      	str	r6, [sp, #92]	; 0x5c
   b83e6:	930a      	str	r3, [sp, #40]	; 0x28
   b83e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b83ea:	2b00      	cmp	r3, #0
   b83ec:	f040 8590 	bne.w	b8f10 <_strtod_l+0xbb0>
   b83f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b83f2:	b1eb      	cbz	r3, b8430 <_strtod_l+0xd0>
   b83f4:	4652      	mov	r2, sl
   b83f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b83fa:	ec43 2b10 	vmov	d0, r2, r3
   b83fe:	b01d      	add	sp, #116	; 0x74
   b8400:	ecbd 8b02 	vpop	{d8}
   b8404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8408:	2a20      	cmp	r2, #32
   b840a:	d1cc      	bne.n	b83a6 <_strtod_l+0x46>
   b840c:	3301      	adds	r3, #1
   b840e:	9317      	str	r3, [sp, #92]	; 0x5c
   b8410:	e7be      	b.n	b8390 <_strtod_l+0x30>
   b8412:	2a2d      	cmp	r2, #45	; 0x2d
   b8414:	d1c7      	bne.n	b83a6 <_strtod_l+0x46>
   b8416:	2201      	movs	r2, #1
   b8418:	920a      	str	r2, [sp, #40]	; 0x28
   b841a:	1c5a      	adds	r2, r3, #1
   b841c:	9217      	str	r2, [sp, #92]	; 0x5c
   b841e:	785b      	ldrb	r3, [r3, #1]
   b8420:	2b00      	cmp	r3, #0
   b8422:	d1c2      	bne.n	b83aa <_strtod_l+0x4a>
   b8424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8426:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b842a:	2b00      	cmp	r3, #0
   b842c:	f040 856e 	bne.w	b8f0c <_strtod_l+0xbac>
   b8430:	4652      	mov	r2, sl
   b8432:	465b      	mov	r3, fp
   b8434:	e7e1      	b.n	b83fa <_strtod_l+0x9a>
   b8436:	2200      	movs	r2, #0
   b8438:	e7ee      	b.n	b8418 <_strtod_l+0xb8>
   b843a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b843c:	b13a      	cbz	r2, b844e <_strtod_l+0xee>
   b843e:	2135      	movs	r1, #53	; 0x35
   b8440:	a81a      	add	r0, sp, #104	; 0x68
   b8442:	f001 fe04 	bl	ba04e <__copybits>
   b8446:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8448:	4620      	mov	r0, r4
   b844a:	f001 f9c3 	bl	b97d4 <_Bfree>
   b844e:	3f01      	subs	r7, #1
   b8450:	2f04      	cmp	r7, #4
   b8452:	d806      	bhi.n	b8462 <_strtod_l+0x102>
   b8454:	e8df f007 	tbb	[pc, r7]
   b8458:	1714030a 	.word	0x1714030a
   b845c:	0a          	.byte	0x0a
   b845d:	00          	.byte	0x00
   b845e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b8462:	0728      	lsls	r0, r5, #28
   b8464:	d5c0      	bpl.n	b83e8 <_strtod_l+0x88>
   b8466:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b846a:	e7bd      	b.n	b83e8 <_strtod_l+0x88>
   b846c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8470:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b8472:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b8476:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b847a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b847e:	e7f0      	b.n	b8462 <_strtod_l+0x102>
   b8480:	f8df b180 	ldr.w	fp, [pc, #384]	; b8604 <_strtod_l+0x2a4>
   b8484:	e7ed      	b.n	b8462 <_strtod_l+0x102>
   b8486:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b848a:	f04f 3aff 	mov.w	sl, #4294967295
   b848e:	e7e8      	b.n	b8462 <_strtod_l+0x102>
   b8490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8492:	1c5a      	adds	r2, r3, #1
   b8494:	9217      	str	r2, [sp, #92]	; 0x5c
   b8496:	785b      	ldrb	r3, [r3, #1]
   b8498:	2b30      	cmp	r3, #48	; 0x30
   b849a:	d0f9      	beq.n	b8490 <_strtod_l+0x130>
   b849c:	2b00      	cmp	r3, #0
   b849e:	d0a3      	beq.n	b83e8 <_strtod_l+0x88>
   b84a0:	2301      	movs	r3, #1
   b84a2:	f04f 0900 	mov.w	r9, #0
   b84a6:	9304      	str	r3, [sp, #16]
   b84a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b84aa:	9308      	str	r3, [sp, #32]
   b84ac:	f8cd 901c 	str.w	r9, [sp, #28]
   b84b0:	464f      	mov	r7, r9
   b84b2:	220a      	movs	r2, #10
   b84b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b84b6:	7806      	ldrb	r6, [r0, #0]
   b84b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b84bc:	b2d9      	uxtb	r1, r3
   b84be:	2909      	cmp	r1, #9
   b84c0:	d92a      	bls.n	b8518 <_strtod_l+0x1b8>
   b84c2:	9905      	ldr	r1, [sp, #20]
   b84c4:	462a      	mov	r2, r5
   b84c6:	f7ff ff07 	bl	b82d8 <strncmp>
   b84ca:	b398      	cbz	r0, b8534 <_strtod_l+0x1d4>
   b84cc:	2000      	movs	r0, #0
   b84ce:	4632      	mov	r2, r6
   b84d0:	463d      	mov	r5, r7
   b84d2:	9005      	str	r0, [sp, #20]
   b84d4:	4603      	mov	r3, r0
   b84d6:	2a65      	cmp	r2, #101	; 0x65
   b84d8:	d001      	beq.n	b84de <_strtod_l+0x17e>
   b84da:	2a45      	cmp	r2, #69	; 0x45
   b84dc:	d118      	bne.n	b8510 <_strtod_l+0x1b0>
   b84de:	b91d      	cbnz	r5, b84e8 <_strtod_l+0x188>
   b84e0:	9a04      	ldr	r2, [sp, #16]
   b84e2:	4302      	orrs	r2, r0
   b84e4:	d09e      	beq.n	b8424 <_strtod_l+0xc4>
   b84e6:	2500      	movs	r5, #0
   b84e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b84ec:	f108 0201 	add.w	r2, r8, #1
   b84f0:	9217      	str	r2, [sp, #92]	; 0x5c
   b84f2:	f898 2001 	ldrb.w	r2, [r8, #1]
   b84f6:	2a2b      	cmp	r2, #43	; 0x2b
   b84f8:	d075      	beq.n	b85e6 <_strtod_l+0x286>
   b84fa:	2a2d      	cmp	r2, #45	; 0x2d
   b84fc:	d07b      	beq.n	b85f6 <_strtod_l+0x296>
   b84fe:	f04f 0c00 	mov.w	ip, #0
   b8502:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b8506:	2909      	cmp	r1, #9
   b8508:	f240 8082 	bls.w	b8610 <_strtod_l+0x2b0>
   b850c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8510:	2600      	movs	r6, #0
   b8512:	e09d      	b.n	b8650 <_strtod_l+0x2f0>
   b8514:	2300      	movs	r3, #0
   b8516:	e7c4      	b.n	b84a2 <_strtod_l+0x142>
   b8518:	2f08      	cmp	r7, #8
   b851a:	bfd8      	it	le
   b851c:	9907      	ldrle	r1, [sp, #28]
   b851e:	f100 0001 	add.w	r0, r0, #1
   b8522:	bfda      	itte	le
   b8524:	fb02 3301 	mlale	r3, r2, r1, r3
   b8528:	9307      	strle	r3, [sp, #28]
   b852a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b852e:	3701      	adds	r7, #1
   b8530:	9017      	str	r0, [sp, #92]	; 0x5c
   b8532:	e7bf      	b.n	b84b4 <_strtod_l+0x154>
   b8534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8536:	195a      	adds	r2, r3, r5
   b8538:	9217      	str	r2, [sp, #92]	; 0x5c
   b853a:	5d5a      	ldrb	r2, [r3, r5]
   b853c:	2f00      	cmp	r7, #0
   b853e:	d037      	beq.n	b85b0 <_strtod_l+0x250>
   b8540:	9005      	str	r0, [sp, #20]
   b8542:	463d      	mov	r5, r7
   b8544:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8548:	2b09      	cmp	r3, #9
   b854a:	d912      	bls.n	b8572 <_strtod_l+0x212>
   b854c:	2301      	movs	r3, #1
   b854e:	e7c2      	b.n	b84d6 <_strtod_l+0x176>
   b8550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8552:	1c5a      	adds	r2, r3, #1
   b8554:	9217      	str	r2, [sp, #92]	; 0x5c
   b8556:	785a      	ldrb	r2, [r3, #1]
   b8558:	3001      	adds	r0, #1
   b855a:	2a30      	cmp	r2, #48	; 0x30
   b855c:	d0f8      	beq.n	b8550 <_strtod_l+0x1f0>
   b855e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b8562:	2b08      	cmp	r3, #8
   b8564:	f200 84d9 	bhi.w	b8f1a <_strtod_l+0xbba>
   b8568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b856a:	9005      	str	r0, [sp, #20]
   b856c:	2000      	movs	r0, #0
   b856e:	9308      	str	r3, [sp, #32]
   b8570:	4605      	mov	r5, r0
   b8572:	3a30      	subs	r2, #48	; 0x30
   b8574:	f100 0301 	add.w	r3, r0, #1
   b8578:	d014      	beq.n	b85a4 <_strtod_l+0x244>
   b857a:	9905      	ldr	r1, [sp, #20]
   b857c:	4419      	add	r1, r3
   b857e:	9105      	str	r1, [sp, #20]
   b8580:	462b      	mov	r3, r5
   b8582:	eb00 0e05 	add.w	lr, r0, r5
   b8586:	210a      	movs	r1, #10
   b8588:	4573      	cmp	r3, lr
   b858a:	d113      	bne.n	b85b4 <_strtod_l+0x254>
   b858c:	182b      	adds	r3, r5, r0
   b858e:	2b08      	cmp	r3, #8
   b8590:	f105 0501 	add.w	r5, r5, #1
   b8594:	4405      	add	r5, r0
   b8596:	dc1c      	bgt.n	b85d2 <_strtod_l+0x272>
   b8598:	9907      	ldr	r1, [sp, #28]
   b859a:	230a      	movs	r3, #10
   b859c:	fb03 2301 	mla	r3, r3, r1, r2
   b85a0:	9307      	str	r3, [sp, #28]
   b85a2:	2300      	movs	r3, #0
   b85a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b85a6:	1c51      	adds	r1, r2, #1
   b85a8:	9117      	str	r1, [sp, #92]	; 0x5c
   b85aa:	7852      	ldrb	r2, [r2, #1]
   b85ac:	4618      	mov	r0, r3
   b85ae:	e7c9      	b.n	b8544 <_strtod_l+0x1e4>
   b85b0:	4638      	mov	r0, r7
   b85b2:	e7d2      	b.n	b855a <_strtod_l+0x1fa>
   b85b4:	2b08      	cmp	r3, #8
   b85b6:	dc04      	bgt.n	b85c2 <_strtod_l+0x262>
   b85b8:	9e07      	ldr	r6, [sp, #28]
   b85ba:	434e      	muls	r6, r1
   b85bc:	9607      	str	r6, [sp, #28]
   b85be:	3301      	adds	r3, #1
   b85c0:	e7e2      	b.n	b8588 <_strtod_l+0x228>
   b85c2:	f103 0c01 	add.w	ip, r3, #1
   b85c6:	f1bc 0f10 	cmp.w	ip, #16
   b85ca:	bfd8      	it	le
   b85cc:	fb01 f909 	mulle.w	r9, r1, r9
   b85d0:	e7f5      	b.n	b85be <_strtod_l+0x25e>
   b85d2:	2d10      	cmp	r5, #16
   b85d4:	bfdc      	itt	le
   b85d6:	230a      	movle	r3, #10
   b85d8:	fb03 2909 	mlale	r9, r3, r9, r2
   b85dc:	e7e1      	b.n	b85a2 <_strtod_l+0x242>
   b85de:	2300      	movs	r3, #0
   b85e0:	9305      	str	r3, [sp, #20]
   b85e2:	2301      	movs	r3, #1
   b85e4:	e77c      	b.n	b84e0 <_strtod_l+0x180>
   b85e6:	f04f 0c00 	mov.w	ip, #0
   b85ea:	f108 0202 	add.w	r2, r8, #2
   b85ee:	9217      	str	r2, [sp, #92]	; 0x5c
   b85f0:	f898 2002 	ldrb.w	r2, [r8, #2]
   b85f4:	e785      	b.n	b8502 <_strtod_l+0x1a2>
   b85f6:	f04f 0c01 	mov.w	ip, #1
   b85fa:	e7f6      	b.n	b85ea <_strtod_l+0x28a>
   b85fc:	000bae08 	.word	0x000bae08
   b8600:	000bac1c 	.word	0x000bac1c
   b8604:	7ff00000 	.word	0x7ff00000
   b8608:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b860a:	1c51      	adds	r1, r2, #1
   b860c:	9117      	str	r1, [sp, #92]	; 0x5c
   b860e:	7852      	ldrb	r2, [r2, #1]
   b8610:	2a30      	cmp	r2, #48	; 0x30
   b8612:	d0f9      	beq.n	b8608 <_strtod_l+0x2a8>
   b8614:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8618:	2908      	cmp	r1, #8
   b861a:	f63f af79 	bhi.w	b8510 <_strtod_l+0x1b0>
   b861e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b8622:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8624:	9206      	str	r2, [sp, #24]
   b8626:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8628:	1c51      	adds	r1, r2, #1
   b862a:	9117      	str	r1, [sp, #92]	; 0x5c
   b862c:	7852      	ldrb	r2, [r2, #1]
   b862e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b8632:	2e09      	cmp	r6, #9
   b8634:	d937      	bls.n	b86a6 <_strtod_l+0x346>
   b8636:	9e06      	ldr	r6, [sp, #24]
   b8638:	1b89      	subs	r1, r1, r6
   b863a:	2908      	cmp	r1, #8
   b863c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8640:	dc02      	bgt.n	b8648 <_strtod_l+0x2e8>
   b8642:	4576      	cmp	r6, lr
   b8644:	bfa8      	it	ge
   b8646:	4676      	movge	r6, lr
   b8648:	f1bc 0f00 	cmp.w	ip, #0
   b864c:	d000      	beq.n	b8650 <_strtod_l+0x2f0>
   b864e:	4276      	negs	r6, r6
   b8650:	2d00      	cmp	r5, #0
   b8652:	d14d      	bne.n	b86f0 <_strtod_l+0x390>
   b8654:	9904      	ldr	r1, [sp, #16]
   b8656:	4301      	orrs	r1, r0
   b8658:	f47f aec6 	bne.w	b83e8 <_strtod_l+0x88>
   b865c:	2b00      	cmp	r3, #0
   b865e:	f47f aee1 	bne.w	b8424 <_strtod_l+0xc4>
   b8662:	2a69      	cmp	r2, #105	; 0x69
   b8664:	d027      	beq.n	b86b6 <_strtod_l+0x356>
   b8666:	dc24      	bgt.n	b86b2 <_strtod_l+0x352>
   b8668:	2a49      	cmp	r2, #73	; 0x49
   b866a:	d024      	beq.n	b86b6 <_strtod_l+0x356>
   b866c:	2a4e      	cmp	r2, #78	; 0x4e
   b866e:	f47f aed9 	bne.w	b8424 <_strtod_l+0xc4>
   b8672:	499f      	ldr	r1, [pc, #636]	; (b88f0 <_strtod_l+0x590>)
   b8674:	a817      	add	r0, sp, #92	; 0x5c
   b8676:	f000 ffa7 	bl	b95c8 <__match>
   b867a:	2800      	cmp	r0, #0
   b867c:	f43f aed2 	beq.w	b8424 <_strtod_l+0xc4>
   b8680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8682:	781b      	ldrb	r3, [r3, #0]
   b8684:	2b28      	cmp	r3, #40	; 0x28
   b8686:	d12d      	bne.n	b86e4 <_strtod_l+0x384>
   b8688:	499a      	ldr	r1, [pc, #616]	; (b88f4 <_strtod_l+0x594>)
   b868a:	aa1a      	add	r2, sp, #104	; 0x68
   b868c:	a817      	add	r0, sp, #92	; 0x5c
   b868e:	f000 ffaf 	bl	b95f0 <__hexnan>
   b8692:	2805      	cmp	r0, #5
   b8694:	d126      	bne.n	b86e4 <_strtod_l+0x384>
   b8696:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b8698:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b869c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b86a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b86a4:	e6a0      	b.n	b83e8 <_strtod_l+0x88>
   b86a6:	210a      	movs	r1, #10
   b86a8:	fb01 2e0e 	mla	lr, r1, lr, r2
   b86ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b86b0:	e7b9      	b.n	b8626 <_strtod_l+0x2c6>
   b86b2:	2a6e      	cmp	r2, #110	; 0x6e
   b86b4:	e7db      	b.n	b866e <_strtod_l+0x30e>
   b86b6:	4990      	ldr	r1, [pc, #576]	; (b88f8 <_strtod_l+0x598>)
   b86b8:	a817      	add	r0, sp, #92	; 0x5c
   b86ba:	f000 ff85 	bl	b95c8 <__match>
   b86be:	2800      	cmp	r0, #0
   b86c0:	f43f aeb0 	beq.w	b8424 <_strtod_l+0xc4>
   b86c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86c6:	498d      	ldr	r1, [pc, #564]	; (b88fc <_strtod_l+0x59c>)
   b86c8:	3b01      	subs	r3, #1
   b86ca:	a817      	add	r0, sp, #92	; 0x5c
   b86cc:	9317      	str	r3, [sp, #92]	; 0x5c
   b86ce:	f000 ff7b 	bl	b95c8 <__match>
   b86d2:	b910      	cbnz	r0, b86da <_strtod_l+0x37a>
   b86d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86d6:	3301      	adds	r3, #1
   b86d8:	9317      	str	r3, [sp, #92]	; 0x5c
   b86da:	f8df b230 	ldr.w	fp, [pc, #560]	; b890c <_strtod_l+0x5ac>
   b86de:	f04f 0a00 	mov.w	sl, #0
   b86e2:	e681      	b.n	b83e8 <_strtod_l+0x88>
   b86e4:	4886      	ldr	r0, [pc, #536]	; (b8900 <_strtod_l+0x5a0>)
   b86e6:	f7ff f8b7 	bl	b7858 <nan>
   b86ea:	ec5b ab10 	vmov	sl, fp, d0
   b86ee:	e67b      	b.n	b83e8 <_strtod_l+0x88>
   b86f0:	9b05      	ldr	r3, [sp, #20]
   b86f2:	9807      	ldr	r0, [sp, #28]
   b86f4:	1af3      	subs	r3, r6, r3
   b86f6:	2f00      	cmp	r7, #0
   b86f8:	bf08      	it	eq
   b86fa:	462f      	moveq	r7, r5
   b86fc:	2d10      	cmp	r5, #16
   b86fe:	9306      	str	r3, [sp, #24]
   b8700:	46a8      	mov	r8, r5
   b8702:	bfa8      	it	ge
   b8704:	f04f 0810 	movge.w	r8, #16
   b8708:	f7ff f9f0 	bl	b7aec <__aeabi_ui2d>
   b870c:	2d09      	cmp	r5, #9
   b870e:	4682      	mov	sl, r0
   b8710:	468b      	mov	fp, r1
   b8712:	dd13      	ble.n	b873c <_strtod_l+0x3dc>
   b8714:	4b7b      	ldr	r3, [pc, #492]	; (b8904 <_strtod_l+0x5a4>)
   b8716:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b871a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b871e:	f7ff fa5f 	bl	b7be0 <__aeabi_dmul>
   b8722:	4682      	mov	sl, r0
   b8724:	4648      	mov	r0, r9
   b8726:	468b      	mov	fp, r1
   b8728:	f7ff f9e0 	bl	b7aec <__aeabi_ui2d>
   b872c:	4602      	mov	r2, r0
   b872e:	460b      	mov	r3, r1
   b8730:	4650      	mov	r0, sl
   b8732:	4659      	mov	r1, fp
   b8734:	f7ff f89e 	bl	b7874 <__adddf3>
   b8738:	4682      	mov	sl, r0
   b873a:	468b      	mov	fp, r1
   b873c:	2d0f      	cmp	r5, #15
   b873e:	dc38      	bgt.n	b87b2 <_strtod_l+0x452>
   b8740:	9b06      	ldr	r3, [sp, #24]
   b8742:	2b00      	cmp	r3, #0
   b8744:	f43f ae50 	beq.w	b83e8 <_strtod_l+0x88>
   b8748:	dd24      	ble.n	b8794 <_strtod_l+0x434>
   b874a:	2b16      	cmp	r3, #22
   b874c:	dc0b      	bgt.n	b8766 <_strtod_l+0x406>
   b874e:	496d      	ldr	r1, [pc, #436]	; (b8904 <_strtod_l+0x5a4>)
   b8750:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8754:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8758:	4652      	mov	r2, sl
   b875a:	465b      	mov	r3, fp
   b875c:	f7ff fa40 	bl	b7be0 <__aeabi_dmul>
   b8760:	4682      	mov	sl, r0
   b8762:	468b      	mov	fp, r1
   b8764:	e640      	b.n	b83e8 <_strtod_l+0x88>
   b8766:	9a06      	ldr	r2, [sp, #24]
   b8768:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b876c:	4293      	cmp	r3, r2
   b876e:	db20      	blt.n	b87b2 <_strtod_l+0x452>
   b8770:	4c64      	ldr	r4, [pc, #400]	; (b8904 <_strtod_l+0x5a4>)
   b8772:	f1c5 050f 	rsb	r5, r5, #15
   b8776:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b877a:	4652      	mov	r2, sl
   b877c:	465b      	mov	r3, fp
   b877e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8782:	f7ff fa2d 	bl	b7be0 <__aeabi_dmul>
   b8786:	9b06      	ldr	r3, [sp, #24]
   b8788:	1b5d      	subs	r5, r3, r5
   b878a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b878e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b8792:	e7e3      	b.n	b875c <_strtod_l+0x3fc>
   b8794:	9b06      	ldr	r3, [sp, #24]
   b8796:	3316      	adds	r3, #22
   b8798:	db0b      	blt.n	b87b2 <_strtod_l+0x452>
   b879a:	9b05      	ldr	r3, [sp, #20]
   b879c:	1b9e      	subs	r6, r3, r6
   b879e:	4b59      	ldr	r3, [pc, #356]	; (b8904 <_strtod_l+0x5a4>)
   b87a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b87a4:	e9d6 2300 	ldrd	r2, r3, [r6]
   b87a8:	4650      	mov	r0, sl
   b87aa:	4659      	mov	r1, fp
   b87ac:	f7ff fb42 	bl	b7e34 <__aeabi_ddiv>
   b87b0:	e7d6      	b.n	b8760 <_strtod_l+0x400>
   b87b2:	9b06      	ldr	r3, [sp, #24]
   b87b4:	eba5 0808 	sub.w	r8, r5, r8
   b87b8:	4498      	add	r8, r3
   b87ba:	f1b8 0f00 	cmp.w	r8, #0
   b87be:	dd74      	ble.n	b88aa <_strtod_l+0x54a>
   b87c0:	f018 030f 	ands.w	r3, r8, #15
   b87c4:	d00a      	beq.n	b87dc <_strtod_l+0x47c>
   b87c6:	494f      	ldr	r1, [pc, #316]	; (b8904 <_strtod_l+0x5a4>)
   b87c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b87cc:	4652      	mov	r2, sl
   b87ce:	465b      	mov	r3, fp
   b87d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b87d4:	f7ff fa04 	bl	b7be0 <__aeabi_dmul>
   b87d8:	4682      	mov	sl, r0
   b87da:	468b      	mov	fp, r1
   b87dc:	f038 080f 	bics.w	r8, r8, #15
   b87e0:	d04f      	beq.n	b8882 <_strtod_l+0x522>
   b87e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b87e6:	dd22      	ble.n	b882e <_strtod_l+0x4ce>
   b87e8:	2500      	movs	r5, #0
   b87ea:	462e      	mov	r6, r5
   b87ec:	9507      	str	r5, [sp, #28]
   b87ee:	9505      	str	r5, [sp, #20]
   b87f0:	2322      	movs	r3, #34	; 0x22
   b87f2:	f8df b118 	ldr.w	fp, [pc, #280]	; b890c <_strtod_l+0x5ac>
   b87f6:	6023      	str	r3, [r4, #0]
   b87f8:	f04f 0a00 	mov.w	sl, #0
   b87fc:	9b07      	ldr	r3, [sp, #28]
   b87fe:	2b00      	cmp	r3, #0
   b8800:	f43f adf2 	beq.w	b83e8 <_strtod_l+0x88>
   b8804:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8806:	4620      	mov	r0, r4
   b8808:	f000 ffe4 	bl	b97d4 <_Bfree>
   b880c:	9905      	ldr	r1, [sp, #20]
   b880e:	4620      	mov	r0, r4
   b8810:	f000 ffe0 	bl	b97d4 <_Bfree>
   b8814:	4631      	mov	r1, r6
   b8816:	4620      	mov	r0, r4
   b8818:	f000 ffdc 	bl	b97d4 <_Bfree>
   b881c:	9907      	ldr	r1, [sp, #28]
   b881e:	4620      	mov	r0, r4
   b8820:	f000 ffd8 	bl	b97d4 <_Bfree>
   b8824:	4629      	mov	r1, r5
   b8826:	4620      	mov	r0, r4
   b8828:	f000 ffd4 	bl	b97d4 <_Bfree>
   b882c:	e5dc      	b.n	b83e8 <_strtod_l+0x88>
   b882e:	4b36      	ldr	r3, [pc, #216]	; (b8908 <_strtod_l+0x5a8>)
   b8830:	9304      	str	r3, [sp, #16]
   b8832:	2300      	movs	r3, #0
   b8834:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8838:	4650      	mov	r0, sl
   b883a:	4659      	mov	r1, fp
   b883c:	4699      	mov	r9, r3
   b883e:	f1b8 0f01 	cmp.w	r8, #1
   b8842:	dc21      	bgt.n	b8888 <_strtod_l+0x528>
   b8844:	b10b      	cbz	r3, b884a <_strtod_l+0x4ea>
   b8846:	4682      	mov	sl, r0
   b8848:	468b      	mov	fp, r1
   b884a:	4b2f      	ldr	r3, [pc, #188]	; (b8908 <_strtod_l+0x5a8>)
   b884c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8850:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b8854:	4652      	mov	r2, sl
   b8856:	465b      	mov	r3, fp
   b8858:	e9d9 0100 	ldrd	r0, r1, [r9]
   b885c:	f7ff f9c0 	bl	b7be0 <__aeabi_dmul>
   b8860:	4b2a      	ldr	r3, [pc, #168]	; (b890c <_strtod_l+0x5ac>)
   b8862:	460a      	mov	r2, r1
   b8864:	400b      	ands	r3, r1
   b8866:	492a      	ldr	r1, [pc, #168]	; (b8910 <_strtod_l+0x5b0>)
   b8868:	428b      	cmp	r3, r1
   b886a:	4682      	mov	sl, r0
   b886c:	d8bc      	bhi.n	b87e8 <_strtod_l+0x488>
   b886e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b8872:	428b      	cmp	r3, r1
   b8874:	bf86      	itte	hi
   b8876:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8914 <_strtod_l+0x5b4>
   b887a:	f04f 3aff 	movhi.w	sl, #4294967295
   b887e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b8882:	2300      	movs	r3, #0
   b8884:	9304      	str	r3, [sp, #16]
   b8886:	e084      	b.n	b8992 <_strtod_l+0x632>
   b8888:	f018 0f01 	tst.w	r8, #1
   b888c:	d005      	beq.n	b889a <_strtod_l+0x53a>
   b888e:	9b04      	ldr	r3, [sp, #16]
   b8890:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8894:	f7ff f9a4 	bl	b7be0 <__aeabi_dmul>
   b8898:	2301      	movs	r3, #1
   b889a:	9a04      	ldr	r2, [sp, #16]
   b889c:	3208      	adds	r2, #8
   b889e:	f109 0901 	add.w	r9, r9, #1
   b88a2:	ea4f 0868 	mov.w	r8, r8, asr #1
   b88a6:	9204      	str	r2, [sp, #16]
   b88a8:	e7c9      	b.n	b883e <_strtod_l+0x4de>
   b88aa:	d0ea      	beq.n	b8882 <_strtod_l+0x522>
   b88ac:	f1c8 0800 	rsb	r8, r8, #0
   b88b0:	f018 020f 	ands.w	r2, r8, #15
   b88b4:	d00a      	beq.n	b88cc <_strtod_l+0x56c>
   b88b6:	4b13      	ldr	r3, [pc, #76]	; (b8904 <_strtod_l+0x5a4>)
   b88b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b88bc:	4650      	mov	r0, sl
   b88be:	4659      	mov	r1, fp
   b88c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88c4:	f7ff fab6 	bl	b7e34 <__aeabi_ddiv>
   b88c8:	4682      	mov	sl, r0
   b88ca:	468b      	mov	fp, r1
   b88cc:	ea5f 1828 	movs.w	r8, r8, asr #4
   b88d0:	d0d7      	beq.n	b8882 <_strtod_l+0x522>
   b88d2:	f1b8 0f1f 	cmp.w	r8, #31
   b88d6:	dd1f      	ble.n	b8918 <_strtod_l+0x5b8>
   b88d8:	2500      	movs	r5, #0
   b88da:	462e      	mov	r6, r5
   b88dc:	9507      	str	r5, [sp, #28]
   b88de:	9505      	str	r5, [sp, #20]
   b88e0:	2322      	movs	r3, #34	; 0x22
   b88e2:	f04f 0a00 	mov.w	sl, #0
   b88e6:	f04f 0b00 	mov.w	fp, #0
   b88ea:	6023      	str	r3, [r4, #0]
   b88ec:	e786      	b.n	b87fc <_strtod_l+0x49c>
   b88ee:	bf00      	nop
   b88f0:	000bac16 	.word	0x000bac16
   b88f4:	000bac30 	.word	0x000bac30
   b88f8:	000bac0d 	.word	0x000bac0d
   b88fc:	000bac10 	.word	0x000bac10
   b8900:	000ba16d 	.word	0x000ba16d
   b8904:	000baec8 	.word	0x000baec8
   b8908:	000baea0 	.word	0x000baea0
   b890c:	7ff00000 	.word	0x7ff00000
   b8910:	7ca00000 	.word	0x7ca00000
   b8914:	7fefffff 	.word	0x7fefffff
   b8918:	f018 0310 	ands.w	r3, r8, #16
   b891c:	bf18      	it	ne
   b891e:	236a      	movne	r3, #106	; 0x6a
   b8920:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8cd0 <_strtod_l+0x970>
   b8924:	9304      	str	r3, [sp, #16]
   b8926:	4650      	mov	r0, sl
   b8928:	4659      	mov	r1, fp
   b892a:	2300      	movs	r3, #0
   b892c:	f018 0f01 	tst.w	r8, #1
   b8930:	d004      	beq.n	b893c <_strtod_l+0x5dc>
   b8932:	e9d9 2300 	ldrd	r2, r3, [r9]
   b8936:	f7ff f953 	bl	b7be0 <__aeabi_dmul>
   b893a:	2301      	movs	r3, #1
   b893c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8940:	f109 0908 	add.w	r9, r9, #8
   b8944:	d1f2      	bne.n	b892c <_strtod_l+0x5cc>
   b8946:	b10b      	cbz	r3, b894c <_strtod_l+0x5ec>
   b8948:	4682      	mov	sl, r0
   b894a:	468b      	mov	fp, r1
   b894c:	9b04      	ldr	r3, [sp, #16]
   b894e:	b1c3      	cbz	r3, b8982 <_strtod_l+0x622>
   b8950:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b8954:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8958:	2b00      	cmp	r3, #0
   b895a:	4659      	mov	r1, fp
   b895c:	dd11      	ble.n	b8982 <_strtod_l+0x622>
   b895e:	2b1f      	cmp	r3, #31
   b8960:	f340 8124 	ble.w	b8bac <_strtod_l+0x84c>
   b8964:	2b34      	cmp	r3, #52	; 0x34
   b8966:	bfde      	ittt	le
   b8968:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b896c:	f04f 33ff 	movle.w	r3, #4294967295
   b8970:	fa03 f202 	lslle.w	r2, r3, r2
   b8974:	f04f 0a00 	mov.w	sl, #0
   b8978:	bfcc      	ite	gt
   b897a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b897e:	ea02 0b01 	andle.w	fp, r2, r1
   b8982:	2200      	movs	r2, #0
   b8984:	2300      	movs	r3, #0
   b8986:	4650      	mov	r0, sl
   b8988:	4659      	mov	r1, fp
   b898a:	f7ff fb91 	bl	b80b0 <__aeabi_dcmpeq>
   b898e:	2800      	cmp	r0, #0
   b8990:	d1a2      	bne.n	b88d8 <_strtod_l+0x578>
   b8992:	9b07      	ldr	r3, [sp, #28]
   b8994:	9300      	str	r3, [sp, #0]
   b8996:	9908      	ldr	r1, [sp, #32]
   b8998:	462b      	mov	r3, r5
   b899a:	463a      	mov	r2, r7
   b899c:	4620      	mov	r0, r4
   b899e:	f000 ff81 	bl	b98a4 <__s2b>
   b89a2:	9007      	str	r0, [sp, #28]
   b89a4:	2800      	cmp	r0, #0
   b89a6:	f43f af1f 	beq.w	b87e8 <_strtod_l+0x488>
   b89aa:	9b05      	ldr	r3, [sp, #20]
   b89ac:	1b9e      	subs	r6, r3, r6
   b89ae:	9b06      	ldr	r3, [sp, #24]
   b89b0:	2b00      	cmp	r3, #0
   b89b2:	bfb4      	ite	lt
   b89b4:	4633      	movlt	r3, r6
   b89b6:	2300      	movge	r3, #0
   b89b8:	930c      	str	r3, [sp, #48]	; 0x30
   b89ba:	9b06      	ldr	r3, [sp, #24]
   b89bc:	2500      	movs	r5, #0
   b89be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b89c2:	9312      	str	r3, [sp, #72]	; 0x48
   b89c4:	462e      	mov	r6, r5
   b89c6:	9b07      	ldr	r3, [sp, #28]
   b89c8:	4620      	mov	r0, r4
   b89ca:	6859      	ldr	r1, [r3, #4]
   b89cc:	f000 fec2 	bl	b9754 <_Balloc>
   b89d0:	9005      	str	r0, [sp, #20]
   b89d2:	2800      	cmp	r0, #0
   b89d4:	f43f af0c 	beq.w	b87f0 <_strtod_l+0x490>
   b89d8:	9b07      	ldr	r3, [sp, #28]
   b89da:	691a      	ldr	r2, [r3, #16]
   b89dc:	3202      	adds	r2, #2
   b89de:	f103 010c 	add.w	r1, r3, #12
   b89e2:	0092      	lsls	r2, r2, #2
   b89e4:	300c      	adds	r0, #12
   b89e6:	f7ff fbdc 	bl	b81a2 <memcpy>
   b89ea:	ec4b ab10 	vmov	d0, sl, fp
   b89ee:	aa1a      	add	r2, sp, #104	; 0x68
   b89f0:	a919      	add	r1, sp, #100	; 0x64
   b89f2:	4620      	mov	r0, r4
   b89f4:	f001 fa9c 	bl	b9f30 <__d2b>
   b89f8:	ec4b ab18 	vmov	d8, sl, fp
   b89fc:	9018      	str	r0, [sp, #96]	; 0x60
   b89fe:	2800      	cmp	r0, #0
   b8a00:	f43f aef6 	beq.w	b87f0 <_strtod_l+0x490>
   b8a04:	2101      	movs	r1, #1
   b8a06:	4620      	mov	r0, r4
   b8a08:	f000 ffe6 	bl	b99d8 <__i2b>
   b8a0c:	4606      	mov	r6, r0
   b8a0e:	2800      	cmp	r0, #0
   b8a10:	f43f aeee 	beq.w	b87f0 <_strtod_l+0x490>
   b8a14:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8a16:	9904      	ldr	r1, [sp, #16]
   b8a18:	2b00      	cmp	r3, #0
   b8a1a:	bfab      	itete	ge
   b8a1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8a1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8a20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8a22:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8a26:	bfac      	ite	ge
   b8a28:	eb03 0902 	addge.w	r9, r3, r2
   b8a2c:	1ad7      	sublt	r7, r2, r3
   b8a2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8a30:	eba3 0801 	sub.w	r8, r3, r1
   b8a34:	4490      	add	r8, r2
   b8a36:	4ba1      	ldr	r3, [pc, #644]	; (b8cbc <_strtod_l+0x95c>)
   b8a38:	f108 38ff 	add.w	r8, r8, #4294967295
   b8a3c:	4598      	cmp	r8, r3
   b8a3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8a42:	f280 80c7 	bge.w	b8bd4 <_strtod_l+0x874>
   b8a46:	eba3 0308 	sub.w	r3, r3, r8
   b8a4a:	2b1f      	cmp	r3, #31
   b8a4c:	eba2 0203 	sub.w	r2, r2, r3
   b8a50:	f04f 0101 	mov.w	r1, #1
   b8a54:	f300 80b1 	bgt.w	b8bba <_strtod_l+0x85a>
   b8a58:	fa01 f303 	lsl.w	r3, r1, r3
   b8a5c:	930d      	str	r3, [sp, #52]	; 0x34
   b8a5e:	2300      	movs	r3, #0
   b8a60:	9308      	str	r3, [sp, #32]
   b8a62:	eb09 0802 	add.w	r8, r9, r2
   b8a66:	9b04      	ldr	r3, [sp, #16]
   b8a68:	45c1      	cmp	r9, r8
   b8a6a:	4417      	add	r7, r2
   b8a6c:	441f      	add	r7, r3
   b8a6e:	464b      	mov	r3, r9
   b8a70:	bfa8      	it	ge
   b8a72:	4643      	movge	r3, r8
   b8a74:	42bb      	cmp	r3, r7
   b8a76:	bfa8      	it	ge
   b8a78:	463b      	movge	r3, r7
   b8a7a:	2b00      	cmp	r3, #0
   b8a7c:	bfc2      	ittt	gt
   b8a7e:	eba8 0803 	subgt.w	r8, r8, r3
   b8a82:	1aff      	subgt	r7, r7, r3
   b8a84:	eba9 0903 	subgt.w	r9, r9, r3
   b8a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8a8a:	2b00      	cmp	r3, #0
   b8a8c:	dd17      	ble.n	b8abe <_strtod_l+0x75e>
   b8a8e:	4631      	mov	r1, r6
   b8a90:	461a      	mov	r2, r3
   b8a92:	4620      	mov	r0, r4
   b8a94:	f001 f860 	bl	b9b58 <__pow5mult>
   b8a98:	4606      	mov	r6, r0
   b8a9a:	2800      	cmp	r0, #0
   b8a9c:	f43f aea8 	beq.w	b87f0 <_strtod_l+0x490>
   b8aa0:	4601      	mov	r1, r0
   b8aa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8aa4:	4620      	mov	r0, r4
   b8aa6:	f000 ffad 	bl	b9a04 <__multiply>
   b8aaa:	900b      	str	r0, [sp, #44]	; 0x2c
   b8aac:	2800      	cmp	r0, #0
   b8aae:	f43f ae9f 	beq.w	b87f0 <_strtod_l+0x490>
   b8ab2:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8ab4:	4620      	mov	r0, r4
   b8ab6:	f000 fe8d 	bl	b97d4 <_Bfree>
   b8aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8abc:	9318      	str	r3, [sp, #96]	; 0x60
   b8abe:	f1b8 0f00 	cmp.w	r8, #0
   b8ac2:	f300 808c 	bgt.w	b8bde <_strtod_l+0x87e>
   b8ac6:	9b06      	ldr	r3, [sp, #24]
   b8ac8:	2b00      	cmp	r3, #0
   b8aca:	dd08      	ble.n	b8ade <_strtod_l+0x77e>
   b8acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8ace:	9905      	ldr	r1, [sp, #20]
   b8ad0:	4620      	mov	r0, r4
   b8ad2:	f001 f841 	bl	b9b58 <__pow5mult>
   b8ad6:	9005      	str	r0, [sp, #20]
   b8ad8:	2800      	cmp	r0, #0
   b8ada:	f43f ae89 	beq.w	b87f0 <_strtod_l+0x490>
   b8ade:	2f00      	cmp	r7, #0
   b8ae0:	dd08      	ble.n	b8af4 <_strtod_l+0x794>
   b8ae2:	9905      	ldr	r1, [sp, #20]
   b8ae4:	463a      	mov	r2, r7
   b8ae6:	4620      	mov	r0, r4
   b8ae8:	f001 f890 	bl	b9c0c <__lshift>
   b8aec:	9005      	str	r0, [sp, #20]
   b8aee:	2800      	cmp	r0, #0
   b8af0:	f43f ae7e 	beq.w	b87f0 <_strtod_l+0x490>
   b8af4:	f1b9 0f00 	cmp.w	r9, #0
   b8af8:	dd08      	ble.n	b8b0c <_strtod_l+0x7ac>
   b8afa:	4631      	mov	r1, r6
   b8afc:	464a      	mov	r2, r9
   b8afe:	4620      	mov	r0, r4
   b8b00:	f001 f884 	bl	b9c0c <__lshift>
   b8b04:	4606      	mov	r6, r0
   b8b06:	2800      	cmp	r0, #0
   b8b08:	f43f ae72 	beq.w	b87f0 <_strtod_l+0x490>
   b8b0c:	9a05      	ldr	r2, [sp, #20]
   b8b0e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8b10:	4620      	mov	r0, r4
   b8b12:	f001 f907 	bl	b9d24 <__mdiff>
   b8b16:	4605      	mov	r5, r0
   b8b18:	2800      	cmp	r0, #0
   b8b1a:	f43f ae69 	beq.w	b87f0 <_strtod_l+0x490>
   b8b1e:	68c3      	ldr	r3, [r0, #12]
   b8b20:	930b      	str	r3, [sp, #44]	; 0x2c
   b8b22:	2300      	movs	r3, #0
   b8b24:	60c3      	str	r3, [r0, #12]
   b8b26:	4631      	mov	r1, r6
   b8b28:	f001 f8e0 	bl	b9cec <__mcmp>
   b8b2c:	2800      	cmp	r0, #0
   b8b2e:	da60      	bge.n	b8bf2 <_strtod_l+0x892>
   b8b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8b32:	ea53 030a 	orrs.w	r3, r3, sl
   b8b36:	f040 8082 	bne.w	b8c3e <_strtod_l+0x8de>
   b8b3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8b3e:	2b00      	cmp	r3, #0
   b8b40:	d17d      	bne.n	b8c3e <_strtod_l+0x8de>
   b8b42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8b46:	0d1b      	lsrs	r3, r3, #20
   b8b48:	051b      	lsls	r3, r3, #20
   b8b4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8b4e:	d976      	bls.n	b8c3e <_strtod_l+0x8de>
   b8b50:	696b      	ldr	r3, [r5, #20]
   b8b52:	b913      	cbnz	r3, b8b5a <_strtod_l+0x7fa>
   b8b54:	692b      	ldr	r3, [r5, #16]
   b8b56:	2b01      	cmp	r3, #1
   b8b58:	dd71      	ble.n	b8c3e <_strtod_l+0x8de>
   b8b5a:	4629      	mov	r1, r5
   b8b5c:	2201      	movs	r2, #1
   b8b5e:	4620      	mov	r0, r4
   b8b60:	f001 f854 	bl	b9c0c <__lshift>
   b8b64:	4631      	mov	r1, r6
   b8b66:	4605      	mov	r5, r0
   b8b68:	f001 f8c0 	bl	b9cec <__mcmp>
   b8b6c:	2800      	cmp	r0, #0
   b8b6e:	dd66      	ble.n	b8c3e <_strtod_l+0x8de>
   b8b70:	9904      	ldr	r1, [sp, #16]
   b8b72:	4a53      	ldr	r2, [pc, #332]	; (b8cc0 <_strtod_l+0x960>)
   b8b74:	465b      	mov	r3, fp
   b8b76:	2900      	cmp	r1, #0
   b8b78:	f000 8081 	beq.w	b8c7e <_strtod_l+0x91e>
   b8b7c:	ea02 010b 	and.w	r1, r2, fp
   b8b80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b8b84:	dc7b      	bgt.n	b8c7e <_strtod_l+0x91e>
   b8b86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8b8a:	f77f aea9 	ble.w	b88e0 <_strtod_l+0x580>
   b8b8e:	4b4d      	ldr	r3, [pc, #308]	; (b8cc4 <_strtod_l+0x964>)
   b8b90:	4650      	mov	r0, sl
   b8b92:	4659      	mov	r1, fp
   b8b94:	2200      	movs	r2, #0
   b8b96:	f7ff f823 	bl	b7be0 <__aeabi_dmul>
   b8b9a:	460b      	mov	r3, r1
   b8b9c:	4303      	orrs	r3, r0
   b8b9e:	bf08      	it	eq
   b8ba0:	2322      	moveq	r3, #34	; 0x22
   b8ba2:	4682      	mov	sl, r0
   b8ba4:	468b      	mov	fp, r1
   b8ba6:	bf08      	it	eq
   b8ba8:	6023      	streq	r3, [r4, #0]
   b8baa:	e62b      	b.n	b8804 <_strtod_l+0x4a4>
   b8bac:	f04f 32ff 	mov.w	r2, #4294967295
   b8bb0:	fa02 f303 	lsl.w	r3, r2, r3
   b8bb4:	ea03 0a0a 	and.w	sl, r3, sl
   b8bb8:	e6e3      	b.n	b8982 <_strtod_l+0x622>
   b8bba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8bbe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b8bc2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b8bc6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8bca:	fa01 f308 	lsl.w	r3, r1, r8
   b8bce:	9308      	str	r3, [sp, #32]
   b8bd0:	910d      	str	r1, [sp, #52]	; 0x34
   b8bd2:	e746      	b.n	b8a62 <_strtod_l+0x702>
   b8bd4:	2300      	movs	r3, #0
   b8bd6:	9308      	str	r3, [sp, #32]
   b8bd8:	2301      	movs	r3, #1
   b8bda:	930d      	str	r3, [sp, #52]	; 0x34
   b8bdc:	e741      	b.n	b8a62 <_strtod_l+0x702>
   b8bde:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8be0:	4642      	mov	r2, r8
   b8be2:	4620      	mov	r0, r4
   b8be4:	f001 f812 	bl	b9c0c <__lshift>
   b8be8:	9018      	str	r0, [sp, #96]	; 0x60
   b8bea:	2800      	cmp	r0, #0
   b8bec:	f47f af6b 	bne.w	b8ac6 <_strtod_l+0x766>
   b8bf0:	e5fe      	b.n	b87f0 <_strtod_l+0x490>
   b8bf2:	465f      	mov	r7, fp
   b8bf4:	d16e      	bne.n	b8cd4 <_strtod_l+0x974>
   b8bf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8bf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8bfc:	b342      	cbz	r2, b8c50 <_strtod_l+0x8f0>
   b8bfe:	4a32      	ldr	r2, [pc, #200]	; (b8cc8 <_strtod_l+0x968>)
   b8c00:	4293      	cmp	r3, r2
   b8c02:	d128      	bne.n	b8c56 <_strtod_l+0x8f6>
   b8c04:	9b04      	ldr	r3, [sp, #16]
   b8c06:	4651      	mov	r1, sl
   b8c08:	b1eb      	cbz	r3, b8c46 <_strtod_l+0x8e6>
   b8c0a:	4b2d      	ldr	r3, [pc, #180]	; (b8cc0 <_strtod_l+0x960>)
   b8c0c:	403b      	ands	r3, r7
   b8c0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8c12:	f04f 32ff 	mov.w	r2, #4294967295
   b8c16:	d819      	bhi.n	b8c4c <_strtod_l+0x8ec>
   b8c18:	0d1b      	lsrs	r3, r3, #20
   b8c1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8c1e:	fa02 f303 	lsl.w	r3, r2, r3
   b8c22:	4299      	cmp	r1, r3
   b8c24:	d117      	bne.n	b8c56 <_strtod_l+0x8f6>
   b8c26:	4b29      	ldr	r3, [pc, #164]	; (b8ccc <_strtod_l+0x96c>)
   b8c28:	429f      	cmp	r7, r3
   b8c2a:	d102      	bne.n	b8c32 <_strtod_l+0x8d2>
   b8c2c:	3101      	adds	r1, #1
   b8c2e:	f43f addf 	beq.w	b87f0 <_strtod_l+0x490>
   b8c32:	4b23      	ldr	r3, [pc, #140]	; (b8cc0 <_strtod_l+0x960>)
   b8c34:	403b      	ands	r3, r7
   b8c36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8c3a:	f04f 0a00 	mov.w	sl, #0
   b8c3e:	9b04      	ldr	r3, [sp, #16]
   b8c40:	2b00      	cmp	r3, #0
   b8c42:	d1a4      	bne.n	b8b8e <_strtod_l+0x82e>
   b8c44:	e5de      	b.n	b8804 <_strtod_l+0x4a4>
   b8c46:	f04f 33ff 	mov.w	r3, #4294967295
   b8c4a:	e7ea      	b.n	b8c22 <_strtod_l+0x8c2>
   b8c4c:	4613      	mov	r3, r2
   b8c4e:	e7e8      	b.n	b8c22 <_strtod_l+0x8c2>
   b8c50:	ea53 030a 	orrs.w	r3, r3, sl
   b8c54:	d08c      	beq.n	b8b70 <_strtod_l+0x810>
   b8c56:	9b08      	ldr	r3, [sp, #32]
   b8c58:	b1db      	cbz	r3, b8c92 <_strtod_l+0x932>
   b8c5a:	423b      	tst	r3, r7
   b8c5c:	d0ef      	beq.n	b8c3e <_strtod_l+0x8de>
   b8c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8c60:	9a04      	ldr	r2, [sp, #16]
   b8c62:	4650      	mov	r0, sl
   b8c64:	4659      	mov	r1, fp
   b8c66:	b1c3      	cbz	r3, b8c9a <_strtod_l+0x93a>
   b8c68:	f7ff fb5d 	bl	b8326 <sulp>
   b8c6c:	4602      	mov	r2, r0
   b8c6e:	460b      	mov	r3, r1
   b8c70:	ec51 0b18 	vmov	r0, r1, d8
   b8c74:	f7fe fdfe 	bl	b7874 <__adddf3>
   b8c78:	4682      	mov	sl, r0
   b8c7a:	468b      	mov	fp, r1
   b8c7c:	e7df      	b.n	b8c3e <_strtod_l+0x8de>
   b8c7e:	4013      	ands	r3, r2
   b8c80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b8c84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8c88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8c8c:	f04f 3aff 	mov.w	sl, #4294967295
   b8c90:	e7d5      	b.n	b8c3e <_strtod_l+0x8de>
   b8c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8c94:	ea13 0f0a 	tst.w	r3, sl
   b8c98:	e7e0      	b.n	b8c5c <_strtod_l+0x8fc>
   b8c9a:	f7ff fb44 	bl	b8326 <sulp>
   b8c9e:	4602      	mov	r2, r0
   b8ca0:	460b      	mov	r3, r1
   b8ca2:	ec51 0b18 	vmov	r0, r1, d8
   b8ca6:	f7fe fde3 	bl	b7870 <__aeabi_dsub>
   b8caa:	2200      	movs	r2, #0
   b8cac:	2300      	movs	r3, #0
   b8cae:	4682      	mov	sl, r0
   b8cb0:	468b      	mov	fp, r1
   b8cb2:	f7ff f9fd 	bl	b80b0 <__aeabi_dcmpeq>
   b8cb6:	2800      	cmp	r0, #0
   b8cb8:	d0c1      	beq.n	b8c3e <_strtod_l+0x8de>
   b8cba:	e611      	b.n	b88e0 <_strtod_l+0x580>
   b8cbc:	fffffc02 	.word	0xfffffc02
   b8cc0:	7ff00000 	.word	0x7ff00000
   b8cc4:	39500000 	.word	0x39500000
   b8cc8:	000fffff 	.word	0x000fffff
   b8ccc:	7fefffff 	.word	0x7fefffff
   b8cd0:	000bac48 	.word	0x000bac48
   b8cd4:	4631      	mov	r1, r6
   b8cd6:	4628      	mov	r0, r5
   b8cd8:	f001 f986 	bl	b9fe8 <__ratio>
   b8cdc:	ec59 8b10 	vmov	r8, r9, d0
   b8ce0:	ee10 0a10 	vmov	r0, s0
   b8ce4:	2200      	movs	r2, #0
   b8ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8cea:	4649      	mov	r1, r9
   b8cec:	f7ff f9f4 	bl	b80d8 <__aeabi_dcmple>
   b8cf0:	2800      	cmp	r0, #0
   b8cf2:	d07a      	beq.n	b8dea <_strtod_l+0xa8a>
   b8cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8cf6:	2b00      	cmp	r3, #0
   b8cf8:	d04a      	beq.n	b8d90 <_strtod_l+0xa30>
   b8cfa:	4b95      	ldr	r3, [pc, #596]	; (b8f50 <_strtod_l+0xbf0>)
   b8cfc:	2200      	movs	r2, #0
   b8cfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8d02:	f8df 924c 	ldr.w	r9, [pc, #588]	; b8f50 <_strtod_l+0xbf0>
   b8d06:	f04f 0800 	mov.w	r8, #0
   b8d0a:	4b92      	ldr	r3, [pc, #584]	; (b8f54 <_strtod_l+0xbf4>)
   b8d0c:	403b      	ands	r3, r7
   b8d0e:	930d      	str	r3, [sp, #52]	; 0x34
   b8d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8d12:	4b91      	ldr	r3, [pc, #580]	; (b8f58 <_strtod_l+0xbf8>)
   b8d14:	429a      	cmp	r2, r3
   b8d16:	f040 80b0 	bne.w	b8e7a <_strtod_l+0xb1a>
   b8d1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8d1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b8d22:	ec4b ab10 	vmov	d0, sl, fp
   b8d26:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8d2a:	f001 f885 	bl	b9e38 <__ulp>
   b8d2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8d32:	ec53 2b10 	vmov	r2, r3, d0
   b8d36:	f7fe ff53 	bl	b7be0 <__aeabi_dmul>
   b8d3a:	4652      	mov	r2, sl
   b8d3c:	465b      	mov	r3, fp
   b8d3e:	f7fe fd99 	bl	b7874 <__adddf3>
   b8d42:	460b      	mov	r3, r1
   b8d44:	4983      	ldr	r1, [pc, #524]	; (b8f54 <_strtod_l+0xbf4>)
   b8d46:	4a85      	ldr	r2, [pc, #532]	; (b8f5c <_strtod_l+0xbfc>)
   b8d48:	4019      	ands	r1, r3
   b8d4a:	4291      	cmp	r1, r2
   b8d4c:	4682      	mov	sl, r0
   b8d4e:	d960      	bls.n	b8e12 <_strtod_l+0xab2>
   b8d50:	ee18 3a90 	vmov	r3, s17
   b8d54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8d58:	4293      	cmp	r3, r2
   b8d5a:	d104      	bne.n	b8d66 <_strtod_l+0xa06>
   b8d5c:	ee18 3a10 	vmov	r3, s16
   b8d60:	3301      	adds	r3, #1
   b8d62:	f43f ad45 	beq.w	b87f0 <_strtod_l+0x490>
   b8d66:	f8df b200 	ldr.w	fp, [pc, #512]	; b8f68 <_strtod_l+0xc08>
   b8d6a:	f04f 3aff 	mov.w	sl, #4294967295
   b8d6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8d70:	4620      	mov	r0, r4
   b8d72:	f000 fd2f 	bl	b97d4 <_Bfree>
   b8d76:	9905      	ldr	r1, [sp, #20]
   b8d78:	4620      	mov	r0, r4
   b8d7a:	f000 fd2b 	bl	b97d4 <_Bfree>
   b8d7e:	4631      	mov	r1, r6
   b8d80:	4620      	mov	r0, r4
   b8d82:	f000 fd27 	bl	b97d4 <_Bfree>
   b8d86:	4629      	mov	r1, r5
   b8d88:	4620      	mov	r0, r4
   b8d8a:	f000 fd23 	bl	b97d4 <_Bfree>
   b8d8e:	e61a      	b.n	b89c6 <_strtod_l+0x666>
   b8d90:	f1ba 0f00 	cmp.w	sl, #0
   b8d94:	d11b      	bne.n	b8dce <_strtod_l+0xa6e>
   b8d96:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8d9a:	b9f3      	cbnz	r3, b8dda <_strtod_l+0xa7a>
   b8d9c:	4b6c      	ldr	r3, [pc, #432]	; (b8f50 <_strtod_l+0xbf0>)
   b8d9e:	2200      	movs	r2, #0
   b8da0:	4640      	mov	r0, r8
   b8da2:	4649      	mov	r1, r9
   b8da4:	f7ff f98e 	bl	b80c4 <__aeabi_dcmplt>
   b8da8:	b9d0      	cbnz	r0, b8de0 <_strtod_l+0xa80>
   b8daa:	4640      	mov	r0, r8
   b8dac:	4649      	mov	r1, r9
   b8dae:	4b6c      	ldr	r3, [pc, #432]	; (b8f60 <_strtod_l+0xc00>)
   b8db0:	2200      	movs	r2, #0
   b8db2:	f7fe ff15 	bl	b7be0 <__aeabi_dmul>
   b8db6:	4680      	mov	r8, r0
   b8db8:	4689      	mov	r9, r1
   b8dba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b8dbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b8dc2:	9315      	str	r3, [sp, #84]	; 0x54
   b8dc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b8dc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8dcc:	e79d      	b.n	b8d0a <_strtod_l+0x9aa>
   b8dce:	f1ba 0f01 	cmp.w	sl, #1
   b8dd2:	d102      	bne.n	b8dda <_strtod_l+0xa7a>
   b8dd4:	2f00      	cmp	r7, #0
   b8dd6:	f43f ad83 	beq.w	b88e0 <_strtod_l+0x580>
   b8dda:	4b62      	ldr	r3, [pc, #392]	; (b8f64 <_strtod_l+0xc04>)
   b8ddc:	2200      	movs	r2, #0
   b8dde:	e78e      	b.n	b8cfe <_strtod_l+0x99e>
   b8de0:	f8df 917c 	ldr.w	r9, [pc, #380]	; b8f60 <_strtod_l+0xc00>
   b8de4:	f04f 0800 	mov.w	r8, #0
   b8de8:	e7e7      	b.n	b8dba <_strtod_l+0xa5a>
   b8dea:	4b5d      	ldr	r3, [pc, #372]	; (b8f60 <_strtod_l+0xc00>)
   b8dec:	4640      	mov	r0, r8
   b8dee:	4649      	mov	r1, r9
   b8df0:	2200      	movs	r2, #0
   b8df2:	f7fe fef5 	bl	b7be0 <__aeabi_dmul>
   b8df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8df8:	4680      	mov	r8, r0
   b8dfa:	4689      	mov	r9, r1
   b8dfc:	b933      	cbnz	r3, b8e0c <_strtod_l+0xaac>
   b8dfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8e02:	900e      	str	r0, [sp, #56]	; 0x38
   b8e04:	930f      	str	r3, [sp, #60]	; 0x3c
   b8e06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b8e0a:	e7dd      	b.n	b8dc8 <_strtod_l+0xa68>
   b8e0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b8e10:	e7f9      	b.n	b8e06 <_strtod_l+0xaa6>
   b8e12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b8e16:	9b04      	ldr	r3, [sp, #16]
   b8e18:	2b00      	cmp	r3, #0
   b8e1a:	d1a8      	bne.n	b8d6e <_strtod_l+0xa0e>
   b8e1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8e20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8e22:	0d1b      	lsrs	r3, r3, #20
   b8e24:	051b      	lsls	r3, r3, #20
   b8e26:	429a      	cmp	r2, r3
   b8e28:	d1a1      	bne.n	b8d6e <_strtod_l+0xa0e>
   b8e2a:	4640      	mov	r0, r8
   b8e2c:	4649      	mov	r1, r9
   b8e2e:	f001 f96f 	bl	ba110 <__aeabi_d2lz>
   b8e32:	f7fe fea7 	bl	b7b84 <__aeabi_l2d>
   b8e36:	4602      	mov	r2, r0
   b8e38:	460b      	mov	r3, r1
   b8e3a:	4640      	mov	r0, r8
   b8e3c:	4649      	mov	r1, r9
   b8e3e:	f7fe fd17 	bl	b7870 <__aeabi_dsub>
   b8e42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8e48:	ea43 030a 	orr.w	r3, r3, sl
   b8e4c:	4313      	orrs	r3, r2
   b8e4e:	4680      	mov	r8, r0
   b8e50:	4689      	mov	r9, r1
   b8e52:	d055      	beq.n	b8f00 <_strtod_l+0xba0>
   b8e54:	a336      	add	r3, pc, #216	; (adr r3, b8f30 <_strtod_l+0xbd0>)
   b8e56:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8e5a:	f7ff f933 	bl	b80c4 <__aeabi_dcmplt>
   b8e5e:	2800      	cmp	r0, #0
   b8e60:	f47f acd0 	bne.w	b8804 <_strtod_l+0x4a4>
   b8e64:	a334      	add	r3, pc, #208	; (adr r3, b8f38 <_strtod_l+0xbd8>)
   b8e66:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8e6a:	4640      	mov	r0, r8
   b8e6c:	4649      	mov	r1, r9
   b8e6e:	f7ff f947 	bl	b8100 <__aeabi_dcmpgt>
   b8e72:	2800      	cmp	r0, #0
   b8e74:	f43f af7b 	beq.w	b8d6e <_strtod_l+0xa0e>
   b8e78:	e4c4      	b.n	b8804 <_strtod_l+0x4a4>
   b8e7a:	9b04      	ldr	r3, [sp, #16]
   b8e7c:	b333      	cbz	r3, b8ecc <_strtod_l+0xb6c>
   b8e7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8e80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8e84:	d822      	bhi.n	b8ecc <_strtod_l+0xb6c>
   b8e86:	a32e      	add	r3, pc, #184	; (adr r3, b8f40 <_strtod_l+0xbe0>)
   b8e88:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8e8c:	4640      	mov	r0, r8
   b8e8e:	4649      	mov	r1, r9
   b8e90:	f7ff f922 	bl	b80d8 <__aeabi_dcmple>
   b8e94:	b1a0      	cbz	r0, b8ec0 <_strtod_l+0xb60>
   b8e96:	4649      	mov	r1, r9
   b8e98:	4640      	mov	r0, r8
   b8e9a:	f7ff f93b 	bl	b8114 <__aeabi_d2uiz>
   b8e9e:	2801      	cmp	r0, #1
   b8ea0:	bf38      	it	cc
   b8ea2:	2001      	movcc	r0, #1
   b8ea4:	f7fe fe22 	bl	b7aec <__aeabi_ui2d>
   b8ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8eaa:	4680      	mov	r8, r0
   b8eac:	4689      	mov	r9, r1
   b8eae:	bb23      	cbnz	r3, b8efa <_strtod_l+0xb9a>
   b8eb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8eb4:	9010      	str	r0, [sp, #64]	; 0x40
   b8eb6:	9311      	str	r3, [sp, #68]	; 0x44
   b8eb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b8ebc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8ec2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8ec4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b8ec8:	1a9b      	subs	r3, r3, r2
   b8eca:	9309      	str	r3, [sp, #36]	; 0x24
   b8ecc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8ed0:	eeb0 0a48 	vmov.f32	s0, s16
   b8ed4:	eef0 0a68 	vmov.f32	s1, s17
   b8ed8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8edc:	f000 ffac 	bl	b9e38 <__ulp>
   b8ee0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8ee4:	ec53 2b10 	vmov	r2, r3, d0
   b8ee8:	f7fe fe7a 	bl	b7be0 <__aeabi_dmul>
   b8eec:	ec53 2b18 	vmov	r2, r3, d8
   b8ef0:	f7fe fcc0 	bl	b7874 <__adddf3>
   b8ef4:	4682      	mov	sl, r0
   b8ef6:	468b      	mov	fp, r1
   b8ef8:	e78d      	b.n	b8e16 <_strtod_l+0xab6>
   b8efa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b8efe:	e7db      	b.n	b8eb8 <_strtod_l+0xb58>
   b8f00:	a311      	add	r3, pc, #68	; (adr r3, b8f48 <_strtod_l+0xbe8>)
   b8f02:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f06:	f7ff f8dd 	bl	b80c4 <__aeabi_dcmplt>
   b8f0a:	e7b2      	b.n	b8e72 <_strtod_l+0xb12>
   b8f0c:	2300      	movs	r3, #0
   b8f0e:	930a      	str	r3, [sp, #40]	; 0x28
   b8f10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b8f12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8f14:	6013      	str	r3, [r2, #0]
   b8f16:	f7ff ba6b 	b.w	b83f0 <_strtod_l+0x90>
   b8f1a:	2a65      	cmp	r2, #101	; 0x65
   b8f1c:	f43f ab5f 	beq.w	b85de <_strtod_l+0x27e>
   b8f20:	2a45      	cmp	r2, #69	; 0x45
   b8f22:	f43f ab5c 	beq.w	b85de <_strtod_l+0x27e>
   b8f26:	2301      	movs	r3, #1
   b8f28:	f7ff bb94 	b.w	b8654 <_strtod_l+0x2f4>
   b8f2c:	f3af 8000 	nop.w
   b8f30:	94a03595 	.word	0x94a03595
   b8f34:	3fdfffff 	.word	0x3fdfffff
   b8f38:	35afe535 	.word	0x35afe535
   b8f3c:	3fe00000 	.word	0x3fe00000
   b8f40:	ffc00000 	.word	0xffc00000
   b8f44:	41dfffff 	.word	0x41dfffff
   b8f48:	94a03595 	.word	0x94a03595
   b8f4c:	3fcfffff 	.word	0x3fcfffff
   b8f50:	3ff00000 	.word	0x3ff00000
   b8f54:	7ff00000 	.word	0x7ff00000
   b8f58:	7fe00000 	.word	0x7fe00000
   b8f5c:	7c9fffff 	.word	0x7c9fffff
   b8f60:	3fe00000 	.word	0x3fe00000
   b8f64:	bff00000 	.word	0xbff00000
   b8f68:	7fefffff 	.word	0x7fefffff

000b8f6c <strtod>:
   b8f6c:	460a      	mov	r2, r1
   b8f6e:	4601      	mov	r1, r0
   b8f70:	4802      	ldr	r0, [pc, #8]	; (b8f7c <strtod+0x10>)
   b8f72:	4b03      	ldr	r3, [pc, #12]	; (b8f80 <strtod+0x14>)
   b8f74:	6800      	ldr	r0, [r0, #0]
   b8f76:	f7ff b9f3 	b.w	b8360 <_strtod_l>
   b8f7a:	bf00      	nop
   b8f7c:	2003e310 	.word	0x2003e310
   b8f80:	2003e37c 	.word	0x2003e37c

000b8f84 <__register_exitproc>:
   b8f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9044 <__register_exitproc+0xc0>
   b8f8c:	4606      	mov	r6, r0
   b8f8e:	f8d8 0000 	ldr.w	r0, [r8]
   b8f92:	461f      	mov	r7, r3
   b8f94:	460d      	mov	r5, r1
   b8f96:	4691      	mov	r9, r2
   b8f98:	f000 fbc6 	bl	b9728 <__retarget_lock_acquire_recursive>
   b8f9c:	4b25      	ldr	r3, [pc, #148]	; (b9034 <__register_exitproc+0xb0>)
   b8f9e:	681c      	ldr	r4, [r3, #0]
   b8fa0:	b934      	cbnz	r4, b8fb0 <__register_exitproc+0x2c>
   b8fa2:	4c25      	ldr	r4, [pc, #148]	; (b9038 <__register_exitproc+0xb4>)
   b8fa4:	601c      	str	r4, [r3, #0]
   b8fa6:	4b25      	ldr	r3, [pc, #148]	; (b903c <__register_exitproc+0xb8>)
   b8fa8:	b113      	cbz	r3, b8fb0 <__register_exitproc+0x2c>
   b8faa:	681b      	ldr	r3, [r3, #0]
   b8fac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8fb0:	6863      	ldr	r3, [r4, #4]
   b8fb2:	2b1f      	cmp	r3, #31
   b8fb4:	dd07      	ble.n	b8fc6 <__register_exitproc+0x42>
   b8fb6:	f8d8 0000 	ldr.w	r0, [r8]
   b8fba:	f000 fbb7 	bl	b972c <__retarget_lock_release_recursive>
   b8fbe:	f04f 30ff 	mov.w	r0, #4294967295
   b8fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8fc6:	b34e      	cbz	r6, b901c <__register_exitproc+0x98>
   b8fc8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8fcc:	b988      	cbnz	r0, b8ff2 <__register_exitproc+0x6e>
   b8fce:	4b1c      	ldr	r3, [pc, #112]	; (b9040 <__register_exitproc+0xbc>)
   b8fd0:	b923      	cbnz	r3, b8fdc <__register_exitproc+0x58>
   b8fd2:	f8d8 0000 	ldr.w	r0, [r8]
   b8fd6:	f000 fba8 	bl	b972a <__retarget_lock_release>
   b8fda:	e7f0      	b.n	b8fbe <__register_exitproc+0x3a>
   b8fdc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8fe0:	f7fd f924 	bl	b622c <malloc>
   b8fe4:	2800      	cmp	r0, #0
   b8fe6:	d0f4      	beq.n	b8fd2 <__register_exitproc+0x4e>
   b8fe8:	2300      	movs	r3, #0
   b8fea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8fee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8ff2:	6863      	ldr	r3, [r4, #4]
   b8ff4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8ff8:	2201      	movs	r2, #1
   b8ffa:	409a      	lsls	r2, r3
   b8ffc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9000:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9004:	4313      	orrs	r3, r2
   b9006:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b900a:	2e02      	cmp	r6, #2
   b900c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9010:	bf02      	ittt	eq
   b9012:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9016:	4313      	orreq	r3, r2
   b9018:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b901c:	6863      	ldr	r3, [r4, #4]
   b901e:	f8d8 0000 	ldr.w	r0, [r8]
   b9022:	1c5a      	adds	r2, r3, #1
   b9024:	3302      	adds	r3, #2
   b9026:	6062      	str	r2, [r4, #4]
   b9028:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b902c:	f000 fb7e 	bl	b972c <__retarget_lock_release_recursive>
   b9030:	2000      	movs	r0, #0
   b9032:	e7c6      	b.n	b8fc2 <__register_exitproc+0x3e>
   b9034:	2003e7e8 	.word	0x2003e7e8
   b9038:	2003e75c 	.word	0x2003e75c
   b903c:	00000000 	.word	0x00000000
   b9040:	000b622d 	.word	0x000b622d
   b9044:	2003e374 	.word	0x2003e374

000b9048 <rshift>:
   b9048:	6903      	ldr	r3, [r0, #16]
   b904a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b904e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9052:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9056:	f100 0414 	add.w	r4, r0, #20
   b905a:	dd45      	ble.n	b90e8 <rshift+0xa0>
   b905c:	f011 011f 	ands.w	r1, r1, #31
   b9060:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9064:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9068:	d10c      	bne.n	b9084 <rshift+0x3c>
   b906a:	f100 0710 	add.w	r7, r0, #16
   b906e:	4629      	mov	r1, r5
   b9070:	42b1      	cmp	r1, r6
   b9072:	d334      	bcc.n	b90de <rshift+0x96>
   b9074:	1a9b      	subs	r3, r3, r2
   b9076:	009b      	lsls	r3, r3, #2
   b9078:	1eea      	subs	r2, r5, #3
   b907a:	4296      	cmp	r6, r2
   b907c:	bf38      	it	cc
   b907e:	2300      	movcc	r3, #0
   b9080:	4423      	add	r3, r4
   b9082:	e015      	b.n	b90b0 <rshift+0x68>
   b9084:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9088:	f1c1 0820 	rsb	r8, r1, #32
   b908c:	40cf      	lsrs	r7, r1
   b908e:	f105 0e04 	add.w	lr, r5, #4
   b9092:	46a1      	mov	r9, r4
   b9094:	4576      	cmp	r6, lr
   b9096:	46f4      	mov	ip, lr
   b9098:	d815      	bhi.n	b90c6 <rshift+0x7e>
   b909a:	1a9a      	subs	r2, r3, r2
   b909c:	0092      	lsls	r2, r2, #2
   b909e:	3a04      	subs	r2, #4
   b90a0:	3501      	adds	r5, #1
   b90a2:	42ae      	cmp	r6, r5
   b90a4:	bf38      	it	cc
   b90a6:	2200      	movcc	r2, #0
   b90a8:	18a3      	adds	r3, r4, r2
   b90aa:	50a7      	str	r7, [r4, r2]
   b90ac:	b107      	cbz	r7, b90b0 <rshift+0x68>
   b90ae:	3304      	adds	r3, #4
   b90b0:	1b1a      	subs	r2, r3, r4
   b90b2:	42a3      	cmp	r3, r4
   b90b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b90b8:	bf08      	it	eq
   b90ba:	2300      	moveq	r3, #0
   b90bc:	6102      	str	r2, [r0, #16]
   b90be:	bf08      	it	eq
   b90c0:	6143      	streq	r3, [r0, #20]
   b90c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b90c6:	f8dc c000 	ldr.w	ip, [ip]
   b90ca:	fa0c fc08 	lsl.w	ip, ip, r8
   b90ce:	ea4c 0707 	orr.w	r7, ip, r7
   b90d2:	f849 7b04 	str.w	r7, [r9], #4
   b90d6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b90da:	40cf      	lsrs	r7, r1
   b90dc:	e7da      	b.n	b9094 <rshift+0x4c>
   b90de:	f851 cb04 	ldr.w	ip, [r1], #4
   b90e2:	f847 cf04 	str.w	ip, [r7, #4]!
   b90e6:	e7c3      	b.n	b9070 <rshift+0x28>
   b90e8:	4623      	mov	r3, r4
   b90ea:	e7e1      	b.n	b90b0 <rshift+0x68>

000b90ec <__hexdig_fun>:
   b90ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b90f0:	2b09      	cmp	r3, #9
   b90f2:	d802      	bhi.n	b90fa <__hexdig_fun+0xe>
   b90f4:	3820      	subs	r0, #32
   b90f6:	b2c0      	uxtb	r0, r0
   b90f8:	4770      	bx	lr
   b90fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b90fe:	2b05      	cmp	r3, #5
   b9100:	d801      	bhi.n	b9106 <__hexdig_fun+0x1a>
   b9102:	3847      	subs	r0, #71	; 0x47
   b9104:	e7f7      	b.n	b90f6 <__hexdig_fun+0xa>
   b9106:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b910a:	2b05      	cmp	r3, #5
   b910c:	d801      	bhi.n	b9112 <__hexdig_fun+0x26>
   b910e:	3827      	subs	r0, #39	; 0x27
   b9110:	e7f1      	b.n	b90f6 <__hexdig_fun+0xa>
   b9112:	2000      	movs	r0, #0
   b9114:	4770      	bx	lr
	...

000b9118 <__gethex>:
   b9118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b911c:	ed2d 8b02 	vpush	{d8}
   b9120:	b089      	sub	sp, #36	; 0x24
   b9122:	ee08 0a10 	vmov	s16, r0
   b9126:	9304      	str	r3, [sp, #16]
   b9128:	4bb4      	ldr	r3, [pc, #720]	; (b93fc <__gethex+0x2e4>)
   b912a:	681b      	ldr	r3, [r3, #0]
   b912c:	9301      	str	r3, [sp, #4]
   b912e:	4618      	mov	r0, r3
   b9130:	468b      	mov	fp, r1
   b9132:	4690      	mov	r8, r2
   b9134:	f7ff f8a6 	bl	b8284 <strlen>
   b9138:	9b01      	ldr	r3, [sp, #4]
   b913a:	f8db 2000 	ldr.w	r2, [fp]
   b913e:	4403      	add	r3, r0
   b9140:	4682      	mov	sl, r0
   b9142:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9146:	9305      	str	r3, [sp, #20]
   b9148:	1c93      	adds	r3, r2, #2
   b914a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b914e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9152:	32fe      	adds	r2, #254	; 0xfe
   b9154:	18d1      	adds	r1, r2, r3
   b9156:	461f      	mov	r7, r3
   b9158:	f813 0b01 	ldrb.w	r0, [r3], #1
   b915c:	9100      	str	r1, [sp, #0]
   b915e:	2830      	cmp	r0, #48	; 0x30
   b9160:	d0f8      	beq.n	b9154 <__gethex+0x3c>
   b9162:	f7ff ffc3 	bl	b90ec <__hexdig_fun>
   b9166:	4604      	mov	r4, r0
   b9168:	2800      	cmp	r0, #0
   b916a:	d13a      	bne.n	b91e2 <__gethex+0xca>
   b916c:	9901      	ldr	r1, [sp, #4]
   b916e:	4652      	mov	r2, sl
   b9170:	4638      	mov	r0, r7
   b9172:	f7ff f8b1 	bl	b82d8 <strncmp>
   b9176:	4605      	mov	r5, r0
   b9178:	2800      	cmp	r0, #0
   b917a:	d168      	bne.n	b924e <__gethex+0x136>
   b917c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9180:	eb07 060a 	add.w	r6, r7, sl
   b9184:	f7ff ffb2 	bl	b90ec <__hexdig_fun>
   b9188:	2800      	cmp	r0, #0
   b918a:	d062      	beq.n	b9252 <__gethex+0x13a>
   b918c:	4633      	mov	r3, r6
   b918e:	7818      	ldrb	r0, [r3, #0]
   b9190:	2830      	cmp	r0, #48	; 0x30
   b9192:	461f      	mov	r7, r3
   b9194:	f103 0301 	add.w	r3, r3, #1
   b9198:	d0f9      	beq.n	b918e <__gethex+0x76>
   b919a:	f7ff ffa7 	bl	b90ec <__hexdig_fun>
   b919e:	2301      	movs	r3, #1
   b91a0:	fab0 f480 	clz	r4, r0
   b91a4:	0964      	lsrs	r4, r4, #5
   b91a6:	4635      	mov	r5, r6
   b91a8:	9300      	str	r3, [sp, #0]
   b91aa:	463a      	mov	r2, r7
   b91ac:	4616      	mov	r6, r2
   b91ae:	3201      	adds	r2, #1
   b91b0:	7830      	ldrb	r0, [r6, #0]
   b91b2:	f7ff ff9b 	bl	b90ec <__hexdig_fun>
   b91b6:	2800      	cmp	r0, #0
   b91b8:	d1f8      	bne.n	b91ac <__gethex+0x94>
   b91ba:	9901      	ldr	r1, [sp, #4]
   b91bc:	4652      	mov	r2, sl
   b91be:	4630      	mov	r0, r6
   b91c0:	f7ff f88a 	bl	b82d8 <strncmp>
   b91c4:	b980      	cbnz	r0, b91e8 <__gethex+0xd0>
   b91c6:	b94d      	cbnz	r5, b91dc <__gethex+0xc4>
   b91c8:	eb06 050a 	add.w	r5, r6, sl
   b91cc:	462a      	mov	r2, r5
   b91ce:	4616      	mov	r6, r2
   b91d0:	3201      	adds	r2, #1
   b91d2:	7830      	ldrb	r0, [r6, #0]
   b91d4:	f7ff ff8a 	bl	b90ec <__hexdig_fun>
   b91d8:	2800      	cmp	r0, #0
   b91da:	d1f8      	bne.n	b91ce <__gethex+0xb6>
   b91dc:	1bad      	subs	r5, r5, r6
   b91de:	00ad      	lsls	r5, r5, #2
   b91e0:	e004      	b.n	b91ec <__gethex+0xd4>
   b91e2:	2400      	movs	r4, #0
   b91e4:	4625      	mov	r5, r4
   b91e6:	e7e0      	b.n	b91aa <__gethex+0x92>
   b91e8:	2d00      	cmp	r5, #0
   b91ea:	d1f7      	bne.n	b91dc <__gethex+0xc4>
   b91ec:	7833      	ldrb	r3, [r6, #0]
   b91ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b91f2:	2b50      	cmp	r3, #80	; 0x50
   b91f4:	d13b      	bne.n	b926e <__gethex+0x156>
   b91f6:	7873      	ldrb	r3, [r6, #1]
   b91f8:	2b2b      	cmp	r3, #43	; 0x2b
   b91fa:	d02c      	beq.n	b9256 <__gethex+0x13e>
   b91fc:	2b2d      	cmp	r3, #45	; 0x2d
   b91fe:	d02e      	beq.n	b925e <__gethex+0x146>
   b9200:	1c71      	adds	r1, r6, #1
   b9202:	f04f 0900 	mov.w	r9, #0
   b9206:	7808      	ldrb	r0, [r1, #0]
   b9208:	f7ff ff70 	bl	b90ec <__hexdig_fun>
   b920c:	1e43      	subs	r3, r0, #1
   b920e:	b2db      	uxtb	r3, r3
   b9210:	2b18      	cmp	r3, #24
   b9212:	d82c      	bhi.n	b926e <__gethex+0x156>
   b9214:	f1a0 0210 	sub.w	r2, r0, #16
   b9218:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b921c:	f7ff ff66 	bl	b90ec <__hexdig_fun>
   b9220:	1e43      	subs	r3, r0, #1
   b9222:	b2db      	uxtb	r3, r3
   b9224:	2b18      	cmp	r3, #24
   b9226:	d91d      	bls.n	b9264 <__gethex+0x14c>
   b9228:	f1b9 0f00 	cmp.w	r9, #0
   b922c:	d000      	beq.n	b9230 <__gethex+0x118>
   b922e:	4252      	negs	r2, r2
   b9230:	4415      	add	r5, r2
   b9232:	f8cb 1000 	str.w	r1, [fp]
   b9236:	b1e4      	cbz	r4, b9272 <__gethex+0x15a>
   b9238:	9b00      	ldr	r3, [sp, #0]
   b923a:	2b00      	cmp	r3, #0
   b923c:	bf14      	ite	ne
   b923e:	2700      	movne	r7, #0
   b9240:	2706      	moveq	r7, #6
   b9242:	4638      	mov	r0, r7
   b9244:	b009      	add	sp, #36	; 0x24
   b9246:	ecbd 8b02 	vpop	{d8}
   b924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b924e:	463e      	mov	r6, r7
   b9250:	4625      	mov	r5, r4
   b9252:	2401      	movs	r4, #1
   b9254:	e7ca      	b.n	b91ec <__gethex+0xd4>
   b9256:	f04f 0900 	mov.w	r9, #0
   b925a:	1cb1      	adds	r1, r6, #2
   b925c:	e7d3      	b.n	b9206 <__gethex+0xee>
   b925e:	f04f 0901 	mov.w	r9, #1
   b9262:	e7fa      	b.n	b925a <__gethex+0x142>
   b9264:	230a      	movs	r3, #10
   b9266:	fb03 0202 	mla	r2, r3, r2, r0
   b926a:	3a10      	subs	r2, #16
   b926c:	e7d4      	b.n	b9218 <__gethex+0x100>
   b926e:	4631      	mov	r1, r6
   b9270:	e7df      	b.n	b9232 <__gethex+0x11a>
   b9272:	1bf3      	subs	r3, r6, r7
   b9274:	3b01      	subs	r3, #1
   b9276:	4621      	mov	r1, r4
   b9278:	2b07      	cmp	r3, #7
   b927a:	dc0b      	bgt.n	b9294 <__gethex+0x17c>
   b927c:	ee18 0a10 	vmov	r0, s16
   b9280:	f000 fa68 	bl	b9754 <_Balloc>
   b9284:	4604      	mov	r4, r0
   b9286:	b940      	cbnz	r0, b929a <__gethex+0x182>
   b9288:	4b5d      	ldr	r3, [pc, #372]	; (b9400 <__gethex+0x2e8>)
   b928a:	4602      	mov	r2, r0
   b928c:	21de      	movs	r1, #222	; 0xde
   b928e:	485d      	ldr	r0, [pc, #372]	; (b9404 <__gethex+0x2ec>)
   b9290:	f7fc fff4 	bl	b627c <__assert_func>
   b9294:	3101      	adds	r1, #1
   b9296:	105b      	asrs	r3, r3, #1
   b9298:	e7ee      	b.n	b9278 <__gethex+0x160>
   b929a:	f100 0914 	add.w	r9, r0, #20
   b929e:	f04f 0b00 	mov.w	fp, #0
   b92a2:	f1ca 0301 	rsb	r3, sl, #1
   b92a6:	f8cd 9008 	str.w	r9, [sp, #8]
   b92aa:	f8cd b000 	str.w	fp, [sp]
   b92ae:	9306      	str	r3, [sp, #24]
   b92b0:	42b7      	cmp	r7, r6
   b92b2:	d340      	bcc.n	b9336 <__gethex+0x21e>
   b92b4:	9802      	ldr	r0, [sp, #8]
   b92b6:	9b00      	ldr	r3, [sp, #0]
   b92b8:	f840 3b04 	str.w	r3, [r0], #4
   b92bc:	eba0 0009 	sub.w	r0, r0, r9
   b92c0:	1080      	asrs	r0, r0, #2
   b92c2:	0146      	lsls	r6, r0, #5
   b92c4:	6120      	str	r0, [r4, #16]
   b92c6:	4618      	mov	r0, r3
   b92c8:	f000 fb36 	bl	b9938 <__hi0bits>
   b92cc:	1a30      	subs	r0, r6, r0
   b92ce:	f8d8 6000 	ldr.w	r6, [r8]
   b92d2:	42b0      	cmp	r0, r6
   b92d4:	dd63      	ble.n	b939e <__gethex+0x286>
   b92d6:	1b87      	subs	r7, r0, r6
   b92d8:	4639      	mov	r1, r7
   b92da:	4620      	mov	r0, r4
   b92dc:	f000 feda 	bl	ba094 <__any_on>
   b92e0:	4682      	mov	sl, r0
   b92e2:	b1a8      	cbz	r0, b9310 <__gethex+0x1f8>
   b92e4:	1e7b      	subs	r3, r7, #1
   b92e6:	1159      	asrs	r1, r3, #5
   b92e8:	f003 021f 	and.w	r2, r3, #31
   b92ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b92f0:	f04f 0a01 	mov.w	sl, #1
   b92f4:	fa0a f202 	lsl.w	r2, sl, r2
   b92f8:	420a      	tst	r2, r1
   b92fa:	d009      	beq.n	b9310 <__gethex+0x1f8>
   b92fc:	4553      	cmp	r3, sl
   b92fe:	dd05      	ble.n	b930c <__gethex+0x1f4>
   b9300:	1eb9      	subs	r1, r7, #2
   b9302:	4620      	mov	r0, r4
   b9304:	f000 fec6 	bl	ba094 <__any_on>
   b9308:	2800      	cmp	r0, #0
   b930a:	d145      	bne.n	b9398 <__gethex+0x280>
   b930c:	f04f 0a02 	mov.w	sl, #2
   b9310:	4639      	mov	r1, r7
   b9312:	4620      	mov	r0, r4
   b9314:	f7ff fe98 	bl	b9048 <rshift>
   b9318:	443d      	add	r5, r7
   b931a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b931e:	42ab      	cmp	r3, r5
   b9320:	da4c      	bge.n	b93bc <__gethex+0x2a4>
   b9322:	ee18 0a10 	vmov	r0, s16
   b9326:	4621      	mov	r1, r4
   b9328:	f000 fa54 	bl	b97d4 <_Bfree>
   b932c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b932e:	2300      	movs	r3, #0
   b9330:	6013      	str	r3, [r2, #0]
   b9332:	27a3      	movs	r7, #163	; 0xa3
   b9334:	e785      	b.n	b9242 <__gethex+0x12a>
   b9336:	1e73      	subs	r3, r6, #1
   b9338:	9a05      	ldr	r2, [sp, #20]
   b933a:	9303      	str	r3, [sp, #12]
   b933c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9340:	4293      	cmp	r3, r2
   b9342:	d019      	beq.n	b9378 <__gethex+0x260>
   b9344:	f1bb 0f20 	cmp.w	fp, #32
   b9348:	d107      	bne.n	b935a <__gethex+0x242>
   b934a:	9b02      	ldr	r3, [sp, #8]
   b934c:	9a00      	ldr	r2, [sp, #0]
   b934e:	f843 2b04 	str.w	r2, [r3], #4
   b9352:	9302      	str	r3, [sp, #8]
   b9354:	2300      	movs	r3, #0
   b9356:	9300      	str	r3, [sp, #0]
   b9358:	469b      	mov	fp, r3
   b935a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b935e:	f7ff fec5 	bl	b90ec <__hexdig_fun>
   b9362:	9b00      	ldr	r3, [sp, #0]
   b9364:	f000 000f 	and.w	r0, r0, #15
   b9368:	fa00 f00b 	lsl.w	r0, r0, fp
   b936c:	4303      	orrs	r3, r0
   b936e:	9300      	str	r3, [sp, #0]
   b9370:	f10b 0b04 	add.w	fp, fp, #4
   b9374:	9b03      	ldr	r3, [sp, #12]
   b9376:	e00d      	b.n	b9394 <__gethex+0x27c>
   b9378:	9b03      	ldr	r3, [sp, #12]
   b937a:	9a06      	ldr	r2, [sp, #24]
   b937c:	4413      	add	r3, r2
   b937e:	42bb      	cmp	r3, r7
   b9380:	d3e0      	bcc.n	b9344 <__gethex+0x22c>
   b9382:	4618      	mov	r0, r3
   b9384:	9901      	ldr	r1, [sp, #4]
   b9386:	9307      	str	r3, [sp, #28]
   b9388:	4652      	mov	r2, sl
   b938a:	f7fe ffa5 	bl	b82d8 <strncmp>
   b938e:	9b07      	ldr	r3, [sp, #28]
   b9390:	2800      	cmp	r0, #0
   b9392:	d1d7      	bne.n	b9344 <__gethex+0x22c>
   b9394:	461e      	mov	r6, r3
   b9396:	e78b      	b.n	b92b0 <__gethex+0x198>
   b9398:	f04f 0a03 	mov.w	sl, #3
   b939c:	e7b8      	b.n	b9310 <__gethex+0x1f8>
   b939e:	da0a      	bge.n	b93b6 <__gethex+0x29e>
   b93a0:	1a37      	subs	r7, r6, r0
   b93a2:	4621      	mov	r1, r4
   b93a4:	ee18 0a10 	vmov	r0, s16
   b93a8:	463a      	mov	r2, r7
   b93aa:	f000 fc2f 	bl	b9c0c <__lshift>
   b93ae:	1bed      	subs	r5, r5, r7
   b93b0:	4604      	mov	r4, r0
   b93b2:	f100 0914 	add.w	r9, r0, #20
   b93b6:	f04f 0a00 	mov.w	sl, #0
   b93ba:	e7ae      	b.n	b931a <__gethex+0x202>
   b93bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b93c0:	42a8      	cmp	r0, r5
   b93c2:	dd72      	ble.n	b94aa <__gethex+0x392>
   b93c4:	1b45      	subs	r5, r0, r5
   b93c6:	42ae      	cmp	r6, r5
   b93c8:	dc36      	bgt.n	b9438 <__gethex+0x320>
   b93ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b93ce:	2b02      	cmp	r3, #2
   b93d0:	d02a      	beq.n	b9428 <__gethex+0x310>
   b93d2:	2b03      	cmp	r3, #3
   b93d4:	d02c      	beq.n	b9430 <__gethex+0x318>
   b93d6:	2b01      	cmp	r3, #1
   b93d8:	d11c      	bne.n	b9414 <__gethex+0x2fc>
   b93da:	42ae      	cmp	r6, r5
   b93dc:	d11a      	bne.n	b9414 <__gethex+0x2fc>
   b93de:	2e01      	cmp	r6, #1
   b93e0:	d112      	bne.n	b9408 <__gethex+0x2f0>
   b93e2:	9a04      	ldr	r2, [sp, #16]
   b93e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b93e8:	6013      	str	r3, [r2, #0]
   b93ea:	2301      	movs	r3, #1
   b93ec:	6123      	str	r3, [r4, #16]
   b93ee:	f8c9 3000 	str.w	r3, [r9]
   b93f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b93f4:	2762      	movs	r7, #98	; 0x62
   b93f6:	601c      	str	r4, [r3, #0]
   b93f8:	e723      	b.n	b9242 <__gethex+0x12a>
   b93fa:	bf00      	nop
   b93fc:	000bae08 	.word	0x000bae08
   b9400:	000bad71 	.word	0x000bad71
   b9404:	000bad82 	.word	0x000bad82
   b9408:	1e71      	subs	r1, r6, #1
   b940a:	4620      	mov	r0, r4
   b940c:	f000 fe42 	bl	ba094 <__any_on>
   b9410:	2800      	cmp	r0, #0
   b9412:	d1e6      	bne.n	b93e2 <__gethex+0x2ca>
   b9414:	ee18 0a10 	vmov	r0, s16
   b9418:	4621      	mov	r1, r4
   b941a:	f000 f9db 	bl	b97d4 <_Bfree>
   b941e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9420:	2300      	movs	r3, #0
   b9422:	6013      	str	r3, [r2, #0]
   b9424:	2750      	movs	r7, #80	; 0x50
   b9426:	e70c      	b.n	b9242 <__gethex+0x12a>
   b9428:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b942a:	2b00      	cmp	r3, #0
   b942c:	d1f2      	bne.n	b9414 <__gethex+0x2fc>
   b942e:	e7d8      	b.n	b93e2 <__gethex+0x2ca>
   b9430:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9432:	2b00      	cmp	r3, #0
   b9434:	d1d5      	bne.n	b93e2 <__gethex+0x2ca>
   b9436:	e7ed      	b.n	b9414 <__gethex+0x2fc>
   b9438:	1e6f      	subs	r7, r5, #1
   b943a:	f1ba 0f00 	cmp.w	sl, #0
   b943e:	d131      	bne.n	b94a4 <__gethex+0x38c>
   b9440:	b127      	cbz	r7, b944c <__gethex+0x334>
   b9442:	4639      	mov	r1, r7
   b9444:	4620      	mov	r0, r4
   b9446:	f000 fe25 	bl	ba094 <__any_on>
   b944a:	4682      	mov	sl, r0
   b944c:	117b      	asrs	r3, r7, #5
   b944e:	2101      	movs	r1, #1
   b9450:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b9454:	f007 071f 	and.w	r7, r7, #31
   b9458:	fa01 f707 	lsl.w	r7, r1, r7
   b945c:	421f      	tst	r7, r3
   b945e:	4629      	mov	r1, r5
   b9460:	4620      	mov	r0, r4
   b9462:	bf18      	it	ne
   b9464:	f04a 0a02 	orrne.w	sl, sl, #2
   b9468:	1b76      	subs	r6, r6, r5
   b946a:	f7ff fded 	bl	b9048 <rshift>
   b946e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b9472:	2702      	movs	r7, #2
   b9474:	f1ba 0f00 	cmp.w	sl, #0
   b9478:	d048      	beq.n	b950c <__gethex+0x3f4>
   b947a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b947e:	2b02      	cmp	r3, #2
   b9480:	d015      	beq.n	b94ae <__gethex+0x396>
   b9482:	2b03      	cmp	r3, #3
   b9484:	d017      	beq.n	b94b6 <__gethex+0x39e>
   b9486:	2b01      	cmp	r3, #1
   b9488:	d109      	bne.n	b949e <__gethex+0x386>
   b948a:	f01a 0f02 	tst.w	sl, #2
   b948e:	d006      	beq.n	b949e <__gethex+0x386>
   b9490:	f8d9 0000 	ldr.w	r0, [r9]
   b9494:	ea4a 0a00 	orr.w	sl, sl, r0
   b9498:	f01a 0f01 	tst.w	sl, #1
   b949c:	d10e      	bne.n	b94bc <__gethex+0x3a4>
   b949e:	f047 0710 	orr.w	r7, r7, #16
   b94a2:	e033      	b.n	b950c <__gethex+0x3f4>
   b94a4:	f04f 0a01 	mov.w	sl, #1
   b94a8:	e7d0      	b.n	b944c <__gethex+0x334>
   b94aa:	2701      	movs	r7, #1
   b94ac:	e7e2      	b.n	b9474 <__gethex+0x35c>
   b94ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b94b0:	f1c3 0301 	rsb	r3, r3, #1
   b94b4:	9315      	str	r3, [sp, #84]	; 0x54
   b94b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b94b8:	2b00      	cmp	r3, #0
   b94ba:	d0f0      	beq.n	b949e <__gethex+0x386>
   b94bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b94c0:	f104 0314 	add.w	r3, r4, #20
   b94c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b94c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b94cc:	f04f 0c00 	mov.w	ip, #0
   b94d0:	4618      	mov	r0, r3
   b94d2:	f853 2b04 	ldr.w	r2, [r3], #4
   b94d6:	f1b2 3fff 	cmp.w	r2, #4294967295
   b94da:	d01c      	beq.n	b9516 <__gethex+0x3fe>
   b94dc:	3201      	adds	r2, #1
   b94de:	6002      	str	r2, [r0, #0]
   b94e0:	2f02      	cmp	r7, #2
   b94e2:	f104 0314 	add.w	r3, r4, #20
   b94e6:	d13f      	bne.n	b9568 <__gethex+0x450>
   b94e8:	f8d8 2000 	ldr.w	r2, [r8]
   b94ec:	3a01      	subs	r2, #1
   b94ee:	42b2      	cmp	r2, r6
   b94f0:	d10a      	bne.n	b9508 <__gethex+0x3f0>
   b94f2:	1171      	asrs	r1, r6, #5
   b94f4:	2201      	movs	r2, #1
   b94f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b94fa:	f006 061f 	and.w	r6, r6, #31
   b94fe:	fa02 f606 	lsl.w	r6, r2, r6
   b9502:	421e      	tst	r6, r3
   b9504:	bf18      	it	ne
   b9506:	4617      	movne	r7, r2
   b9508:	f047 0720 	orr.w	r7, r7, #32
   b950c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b950e:	601c      	str	r4, [r3, #0]
   b9510:	9b04      	ldr	r3, [sp, #16]
   b9512:	601d      	str	r5, [r3, #0]
   b9514:	e695      	b.n	b9242 <__gethex+0x12a>
   b9516:	4299      	cmp	r1, r3
   b9518:	f843 cc04 	str.w	ip, [r3, #-4]
   b951c:	d8d8      	bhi.n	b94d0 <__gethex+0x3b8>
   b951e:	68a3      	ldr	r3, [r4, #8]
   b9520:	459b      	cmp	fp, r3
   b9522:	db19      	blt.n	b9558 <__gethex+0x440>
   b9524:	6861      	ldr	r1, [r4, #4]
   b9526:	ee18 0a10 	vmov	r0, s16
   b952a:	3101      	adds	r1, #1
   b952c:	f000 f912 	bl	b9754 <_Balloc>
   b9530:	4681      	mov	r9, r0
   b9532:	b918      	cbnz	r0, b953c <__gethex+0x424>
   b9534:	4b1a      	ldr	r3, [pc, #104]	; (b95a0 <__gethex+0x488>)
   b9536:	4602      	mov	r2, r0
   b9538:	2184      	movs	r1, #132	; 0x84
   b953a:	e6a8      	b.n	b928e <__gethex+0x176>
   b953c:	6922      	ldr	r2, [r4, #16]
   b953e:	3202      	adds	r2, #2
   b9540:	f104 010c 	add.w	r1, r4, #12
   b9544:	0092      	lsls	r2, r2, #2
   b9546:	300c      	adds	r0, #12
   b9548:	f7fe fe2b 	bl	b81a2 <memcpy>
   b954c:	4621      	mov	r1, r4
   b954e:	ee18 0a10 	vmov	r0, s16
   b9552:	f000 f93f 	bl	b97d4 <_Bfree>
   b9556:	464c      	mov	r4, r9
   b9558:	6923      	ldr	r3, [r4, #16]
   b955a:	1c5a      	adds	r2, r3, #1
   b955c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9560:	6122      	str	r2, [r4, #16]
   b9562:	2201      	movs	r2, #1
   b9564:	615a      	str	r2, [r3, #20]
   b9566:	e7bb      	b.n	b94e0 <__gethex+0x3c8>
   b9568:	6922      	ldr	r2, [r4, #16]
   b956a:	455a      	cmp	r2, fp
   b956c:	dd0b      	ble.n	b9586 <__gethex+0x46e>
   b956e:	2101      	movs	r1, #1
   b9570:	4620      	mov	r0, r4
   b9572:	f7ff fd69 	bl	b9048 <rshift>
   b9576:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b957a:	3501      	adds	r5, #1
   b957c:	42ab      	cmp	r3, r5
   b957e:	f6ff aed0 	blt.w	b9322 <__gethex+0x20a>
   b9582:	2701      	movs	r7, #1
   b9584:	e7c0      	b.n	b9508 <__gethex+0x3f0>
   b9586:	f016 061f 	ands.w	r6, r6, #31
   b958a:	d0fa      	beq.n	b9582 <__gethex+0x46a>
   b958c:	4453      	add	r3, sl
   b958e:	f1c6 0620 	rsb	r6, r6, #32
   b9592:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b9596:	f000 f9cf 	bl	b9938 <__hi0bits>
   b959a:	42b0      	cmp	r0, r6
   b959c:	dbe7      	blt.n	b956e <__gethex+0x456>
   b959e:	e7f0      	b.n	b9582 <__gethex+0x46a>
   b95a0:	000bad71 	.word	0x000bad71

000b95a4 <L_shift>:
   b95a4:	f1c2 0208 	rsb	r2, r2, #8
   b95a8:	0092      	lsls	r2, r2, #2
   b95aa:	b570      	push	{r4, r5, r6, lr}
   b95ac:	f1c2 0620 	rsb	r6, r2, #32
   b95b0:	6843      	ldr	r3, [r0, #4]
   b95b2:	6804      	ldr	r4, [r0, #0]
   b95b4:	fa03 f506 	lsl.w	r5, r3, r6
   b95b8:	432c      	orrs	r4, r5
   b95ba:	40d3      	lsrs	r3, r2
   b95bc:	6004      	str	r4, [r0, #0]
   b95be:	f840 3f04 	str.w	r3, [r0, #4]!
   b95c2:	4288      	cmp	r0, r1
   b95c4:	d3f4      	bcc.n	b95b0 <L_shift+0xc>
   b95c6:	bd70      	pop	{r4, r5, r6, pc}

000b95c8 <__match>:
   b95c8:	b530      	push	{r4, r5, lr}
   b95ca:	6803      	ldr	r3, [r0, #0]
   b95cc:	3301      	adds	r3, #1
   b95ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   b95d2:	b914      	cbnz	r4, b95da <__match+0x12>
   b95d4:	6003      	str	r3, [r0, #0]
   b95d6:	2001      	movs	r0, #1
   b95d8:	bd30      	pop	{r4, r5, pc}
   b95da:	f813 2b01 	ldrb.w	r2, [r3], #1
   b95de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b95e2:	2d19      	cmp	r5, #25
   b95e4:	bf98      	it	ls
   b95e6:	3220      	addls	r2, #32
   b95e8:	42a2      	cmp	r2, r4
   b95ea:	d0f0      	beq.n	b95ce <__match+0x6>
   b95ec:	2000      	movs	r0, #0
   b95ee:	e7f3      	b.n	b95d8 <__match+0x10>

000b95f0 <__hexnan>:
   b95f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95f4:	680b      	ldr	r3, [r1, #0]
   b95f6:	115e      	asrs	r6, r3, #5
   b95f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b95fc:	f013 031f 	ands.w	r3, r3, #31
   b9600:	b087      	sub	sp, #28
   b9602:	bf18      	it	ne
   b9604:	3604      	addne	r6, #4
   b9606:	2500      	movs	r5, #0
   b9608:	1f37      	subs	r7, r6, #4
   b960a:	4690      	mov	r8, r2
   b960c:	6802      	ldr	r2, [r0, #0]
   b960e:	9301      	str	r3, [sp, #4]
   b9610:	4682      	mov	sl, r0
   b9612:	f846 5c04 	str.w	r5, [r6, #-4]
   b9616:	46b9      	mov	r9, r7
   b9618:	463c      	mov	r4, r7
   b961a:	9502      	str	r5, [sp, #8]
   b961c:	46ab      	mov	fp, r5
   b961e:	7851      	ldrb	r1, [r2, #1]
   b9620:	1c53      	adds	r3, r2, #1
   b9622:	9303      	str	r3, [sp, #12]
   b9624:	b341      	cbz	r1, b9678 <__hexnan+0x88>
   b9626:	4608      	mov	r0, r1
   b9628:	9205      	str	r2, [sp, #20]
   b962a:	9104      	str	r1, [sp, #16]
   b962c:	f7ff fd5e 	bl	b90ec <__hexdig_fun>
   b9630:	2800      	cmp	r0, #0
   b9632:	d14f      	bne.n	b96d4 <__hexnan+0xe4>
   b9634:	9904      	ldr	r1, [sp, #16]
   b9636:	9a05      	ldr	r2, [sp, #20]
   b9638:	2920      	cmp	r1, #32
   b963a:	d818      	bhi.n	b966e <__hexnan+0x7e>
   b963c:	9b02      	ldr	r3, [sp, #8]
   b963e:	459b      	cmp	fp, r3
   b9640:	dd13      	ble.n	b966a <__hexnan+0x7a>
   b9642:	454c      	cmp	r4, r9
   b9644:	d206      	bcs.n	b9654 <__hexnan+0x64>
   b9646:	2d07      	cmp	r5, #7
   b9648:	dc04      	bgt.n	b9654 <__hexnan+0x64>
   b964a:	462a      	mov	r2, r5
   b964c:	4649      	mov	r1, r9
   b964e:	4620      	mov	r0, r4
   b9650:	f7ff ffa8 	bl	b95a4 <L_shift>
   b9654:	4544      	cmp	r4, r8
   b9656:	d950      	bls.n	b96fa <__hexnan+0x10a>
   b9658:	2300      	movs	r3, #0
   b965a:	f1a4 0904 	sub.w	r9, r4, #4
   b965e:	f844 3c04 	str.w	r3, [r4, #-4]
   b9662:	f8cd b008 	str.w	fp, [sp, #8]
   b9666:	464c      	mov	r4, r9
   b9668:	461d      	mov	r5, r3
   b966a:	9a03      	ldr	r2, [sp, #12]
   b966c:	e7d7      	b.n	b961e <__hexnan+0x2e>
   b966e:	2929      	cmp	r1, #41	; 0x29
   b9670:	d156      	bne.n	b9720 <__hexnan+0x130>
   b9672:	3202      	adds	r2, #2
   b9674:	f8ca 2000 	str.w	r2, [sl]
   b9678:	f1bb 0f00 	cmp.w	fp, #0
   b967c:	d050      	beq.n	b9720 <__hexnan+0x130>
   b967e:	454c      	cmp	r4, r9
   b9680:	d206      	bcs.n	b9690 <__hexnan+0xa0>
   b9682:	2d07      	cmp	r5, #7
   b9684:	dc04      	bgt.n	b9690 <__hexnan+0xa0>
   b9686:	462a      	mov	r2, r5
   b9688:	4649      	mov	r1, r9
   b968a:	4620      	mov	r0, r4
   b968c:	f7ff ff8a 	bl	b95a4 <L_shift>
   b9690:	4544      	cmp	r4, r8
   b9692:	d934      	bls.n	b96fe <__hexnan+0x10e>
   b9694:	f1a8 0204 	sub.w	r2, r8, #4
   b9698:	4623      	mov	r3, r4
   b969a:	f853 1b04 	ldr.w	r1, [r3], #4
   b969e:	f842 1f04 	str.w	r1, [r2, #4]!
   b96a2:	429f      	cmp	r7, r3
   b96a4:	d2f9      	bcs.n	b969a <__hexnan+0xaa>
   b96a6:	1b3b      	subs	r3, r7, r4
   b96a8:	f023 0303 	bic.w	r3, r3, #3
   b96ac:	3304      	adds	r3, #4
   b96ae:	3401      	adds	r4, #1
   b96b0:	3e03      	subs	r6, #3
   b96b2:	42b4      	cmp	r4, r6
   b96b4:	bf88      	it	hi
   b96b6:	2304      	movhi	r3, #4
   b96b8:	4443      	add	r3, r8
   b96ba:	2200      	movs	r2, #0
   b96bc:	f843 2b04 	str.w	r2, [r3], #4
   b96c0:	429f      	cmp	r7, r3
   b96c2:	d2fb      	bcs.n	b96bc <__hexnan+0xcc>
   b96c4:	683b      	ldr	r3, [r7, #0]
   b96c6:	b91b      	cbnz	r3, b96d0 <__hexnan+0xe0>
   b96c8:	4547      	cmp	r7, r8
   b96ca:	d127      	bne.n	b971c <__hexnan+0x12c>
   b96cc:	2301      	movs	r3, #1
   b96ce:	603b      	str	r3, [r7, #0]
   b96d0:	2005      	movs	r0, #5
   b96d2:	e026      	b.n	b9722 <__hexnan+0x132>
   b96d4:	3501      	adds	r5, #1
   b96d6:	2d08      	cmp	r5, #8
   b96d8:	f10b 0b01 	add.w	fp, fp, #1
   b96dc:	dd06      	ble.n	b96ec <__hexnan+0xfc>
   b96de:	4544      	cmp	r4, r8
   b96e0:	d9c3      	bls.n	b966a <__hexnan+0x7a>
   b96e2:	2300      	movs	r3, #0
   b96e4:	f844 3c04 	str.w	r3, [r4, #-4]
   b96e8:	2501      	movs	r5, #1
   b96ea:	3c04      	subs	r4, #4
   b96ec:	6822      	ldr	r2, [r4, #0]
   b96ee:	f000 000f 	and.w	r0, r0, #15
   b96f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b96f6:	6022      	str	r2, [r4, #0]
   b96f8:	e7b7      	b.n	b966a <__hexnan+0x7a>
   b96fa:	2508      	movs	r5, #8
   b96fc:	e7b5      	b.n	b966a <__hexnan+0x7a>
   b96fe:	9b01      	ldr	r3, [sp, #4]
   b9700:	2b00      	cmp	r3, #0
   b9702:	d0df      	beq.n	b96c4 <__hexnan+0xd4>
   b9704:	f04f 32ff 	mov.w	r2, #4294967295
   b9708:	f1c3 0320 	rsb	r3, r3, #32
   b970c:	fa22 f303 	lsr.w	r3, r2, r3
   b9710:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b9714:	401a      	ands	r2, r3
   b9716:	f846 2c04 	str.w	r2, [r6, #-4]
   b971a:	e7d3      	b.n	b96c4 <__hexnan+0xd4>
   b971c:	3f04      	subs	r7, #4
   b971e:	e7d1      	b.n	b96c4 <__hexnan+0xd4>
   b9720:	2004      	movs	r0, #4
   b9722:	b007      	add	sp, #28
   b9724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9728 <__retarget_lock_acquire_recursive>:
   b9728:	4770      	bx	lr

000b972a <__retarget_lock_release>:
   b972a:	4770      	bx	lr

000b972c <__retarget_lock_release_recursive>:
   b972c:	4770      	bx	lr

000b972e <__ascii_mbtowc>:
   b972e:	b082      	sub	sp, #8
   b9730:	b901      	cbnz	r1, b9734 <__ascii_mbtowc+0x6>
   b9732:	a901      	add	r1, sp, #4
   b9734:	b142      	cbz	r2, b9748 <__ascii_mbtowc+0x1a>
   b9736:	b14b      	cbz	r3, b974c <__ascii_mbtowc+0x1e>
   b9738:	7813      	ldrb	r3, [r2, #0]
   b973a:	600b      	str	r3, [r1, #0]
   b973c:	7812      	ldrb	r2, [r2, #0]
   b973e:	1e10      	subs	r0, r2, #0
   b9740:	bf18      	it	ne
   b9742:	2001      	movne	r0, #1
   b9744:	b002      	add	sp, #8
   b9746:	4770      	bx	lr
   b9748:	4610      	mov	r0, r2
   b974a:	e7fb      	b.n	b9744 <__ascii_mbtowc+0x16>
   b974c:	f06f 0001 	mvn.w	r0, #1
   b9750:	e7f8      	b.n	b9744 <__ascii_mbtowc+0x16>
	...

000b9754 <_Balloc>:
   b9754:	b570      	push	{r4, r5, r6, lr}
   b9756:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9758:	4604      	mov	r4, r0
   b975a:	460d      	mov	r5, r1
   b975c:	b976      	cbnz	r6, b977c <_Balloc+0x28>
   b975e:	2010      	movs	r0, #16
   b9760:	f7fc fd64 	bl	b622c <malloc>
   b9764:	4602      	mov	r2, r0
   b9766:	6260      	str	r0, [r4, #36]	; 0x24
   b9768:	b920      	cbnz	r0, b9774 <_Balloc+0x20>
   b976a:	4b18      	ldr	r3, [pc, #96]	; (b97cc <_Balloc+0x78>)
   b976c:	4818      	ldr	r0, [pc, #96]	; (b97d0 <_Balloc+0x7c>)
   b976e:	2166      	movs	r1, #102	; 0x66
   b9770:	f7fc fd84 	bl	b627c <__assert_func>
   b9774:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9778:	6006      	str	r6, [r0, #0]
   b977a:	60c6      	str	r6, [r0, #12]
   b977c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b977e:	68f3      	ldr	r3, [r6, #12]
   b9780:	b183      	cbz	r3, b97a4 <_Balloc+0x50>
   b9782:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9784:	68db      	ldr	r3, [r3, #12]
   b9786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b978a:	b9b8      	cbnz	r0, b97bc <_Balloc+0x68>
   b978c:	2101      	movs	r1, #1
   b978e:	fa01 f605 	lsl.w	r6, r1, r5
   b9792:	1d72      	adds	r2, r6, #5
   b9794:	0092      	lsls	r2, r2, #2
   b9796:	4620      	mov	r0, r4
   b9798:	f000 fc9d 	bl	ba0d6 <_calloc_r>
   b979c:	b160      	cbz	r0, b97b8 <_Balloc+0x64>
   b979e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b97a2:	e00e      	b.n	b97c2 <_Balloc+0x6e>
   b97a4:	2221      	movs	r2, #33	; 0x21
   b97a6:	2104      	movs	r1, #4
   b97a8:	4620      	mov	r0, r4
   b97aa:	f000 fc94 	bl	ba0d6 <_calloc_r>
   b97ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b97b0:	60f0      	str	r0, [r6, #12]
   b97b2:	68db      	ldr	r3, [r3, #12]
   b97b4:	2b00      	cmp	r3, #0
   b97b6:	d1e4      	bne.n	b9782 <_Balloc+0x2e>
   b97b8:	2000      	movs	r0, #0
   b97ba:	bd70      	pop	{r4, r5, r6, pc}
   b97bc:	6802      	ldr	r2, [r0, #0]
   b97be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b97c2:	2300      	movs	r3, #0
   b97c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b97c8:	e7f7      	b.n	b97ba <_Balloc+0x66>
   b97ca:	bf00      	nop
   b97cc:	000bab79 	.word	0x000bab79
   b97d0:	000bae1c 	.word	0x000bae1c

000b97d4 <_Bfree>:
   b97d4:	b570      	push	{r4, r5, r6, lr}
   b97d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b97d8:	4605      	mov	r5, r0
   b97da:	460c      	mov	r4, r1
   b97dc:	b976      	cbnz	r6, b97fc <_Bfree+0x28>
   b97de:	2010      	movs	r0, #16
   b97e0:	f7fc fd24 	bl	b622c <malloc>
   b97e4:	4602      	mov	r2, r0
   b97e6:	6268      	str	r0, [r5, #36]	; 0x24
   b97e8:	b920      	cbnz	r0, b97f4 <_Bfree+0x20>
   b97ea:	4b09      	ldr	r3, [pc, #36]	; (b9810 <_Bfree+0x3c>)
   b97ec:	4809      	ldr	r0, [pc, #36]	; (b9814 <_Bfree+0x40>)
   b97ee:	218a      	movs	r1, #138	; 0x8a
   b97f0:	f7fc fd44 	bl	b627c <__assert_func>
   b97f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b97f8:	6006      	str	r6, [r0, #0]
   b97fa:	60c6      	str	r6, [r0, #12]
   b97fc:	b13c      	cbz	r4, b980e <_Bfree+0x3a>
   b97fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9800:	6862      	ldr	r2, [r4, #4]
   b9802:	68db      	ldr	r3, [r3, #12]
   b9804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9808:	6021      	str	r1, [r4, #0]
   b980a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b980e:	bd70      	pop	{r4, r5, r6, pc}
   b9810:	000bab79 	.word	0x000bab79
   b9814:	000bae1c 	.word	0x000bae1c

000b9818 <__multadd>:
   b9818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b981c:	690d      	ldr	r5, [r1, #16]
   b981e:	4607      	mov	r7, r0
   b9820:	460c      	mov	r4, r1
   b9822:	461e      	mov	r6, r3
   b9824:	f101 0c14 	add.w	ip, r1, #20
   b9828:	2000      	movs	r0, #0
   b982a:	f8dc 3000 	ldr.w	r3, [ip]
   b982e:	b299      	uxth	r1, r3
   b9830:	fb02 6101 	mla	r1, r2, r1, r6
   b9834:	0c1e      	lsrs	r6, r3, #16
   b9836:	0c0b      	lsrs	r3, r1, #16
   b9838:	fb02 3306 	mla	r3, r2, r6, r3
   b983c:	b289      	uxth	r1, r1
   b983e:	3001      	adds	r0, #1
   b9840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9844:	4285      	cmp	r5, r0
   b9846:	f84c 1b04 	str.w	r1, [ip], #4
   b984a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b984e:	dcec      	bgt.n	b982a <__multadd+0x12>
   b9850:	b30e      	cbz	r6, b9896 <__multadd+0x7e>
   b9852:	68a3      	ldr	r3, [r4, #8]
   b9854:	42ab      	cmp	r3, r5
   b9856:	dc19      	bgt.n	b988c <__multadd+0x74>
   b9858:	6861      	ldr	r1, [r4, #4]
   b985a:	4638      	mov	r0, r7
   b985c:	3101      	adds	r1, #1
   b985e:	f7ff ff79 	bl	b9754 <_Balloc>
   b9862:	4680      	mov	r8, r0
   b9864:	b928      	cbnz	r0, b9872 <__multadd+0x5a>
   b9866:	4602      	mov	r2, r0
   b9868:	4b0c      	ldr	r3, [pc, #48]	; (b989c <__multadd+0x84>)
   b986a:	480d      	ldr	r0, [pc, #52]	; (b98a0 <__multadd+0x88>)
   b986c:	21b5      	movs	r1, #181	; 0xb5
   b986e:	f7fc fd05 	bl	b627c <__assert_func>
   b9872:	6922      	ldr	r2, [r4, #16]
   b9874:	3202      	adds	r2, #2
   b9876:	f104 010c 	add.w	r1, r4, #12
   b987a:	0092      	lsls	r2, r2, #2
   b987c:	300c      	adds	r0, #12
   b987e:	f7fe fc90 	bl	b81a2 <memcpy>
   b9882:	4621      	mov	r1, r4
   b9884:	4638      	mov	r0, r7
   b9886:	f7ff ffa5 	bl	b97d4 <_Bfree>
   b988a:	4644      	mov	r4, r8
   b988c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9890:	3501      	adds	r5, #1
   b9892:	615e      	str	r6, [r3, #20]
   b9894:	6125      	str	r5, [r4, #16]
   b9896:	4620      	mov	r0, r4
   b9898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b989c:	000bad71 	.word	0x000bad71
   b98a0:	000bae1c 	.word	0x000bae1c

000b98a4 <__s2b>:
   b98a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b98a8:	460c      	mov	r4, r1
   b98aa:	4615      	mov	r5, r2
   b98ac:	461f      	mov	r7, r3
   b98ae:	2209      	movs	r2, #9
   b98b0:	3308      	adds	r3, #8
   b98b2:	4606      	mov	r6, r0
   b98b4:	fb93 f3f2 	sdiv	r3, r3, r2
   b98b8:	2100      	movs	r1, #0
   b98ba:	2201      	movs	r2, #1
   b98bc:	429a      	cmp	r2, r3
   b98be:	db09      	blt.n	b98d4 <__s2b+0x30>
   b98c0:	4630      	mov	r0, r6
   b98c2:	f7ff ff47 	bl	b9754 <_Balloc>
   b98c6:	b940      	cbnz	r0, b98da <__s2b+0x36>
   b98c8:	4602      	mov	r2, r0
   b98ca:	4b19      	ldr	r3, [pc, #100]	; (b9930 <__s2b+0x8c>)
   b98cc:	4819      	ldr	r0, [pc, #100]	; (b9934 <__s2b+0x90>)
   b98ce:	21ce      	movs	r1, #206	; 0xce
   b98d0:	f7fc fcd4 	bl	b627c <__assert_func>
   b98d4:	0052      	lsls	r2, r2, #1
   b98d6:	3101      	adds	r1, #1
   b98d8:	e7f0      	b.n	b98bc <__s2b+0x18>
   b98da:	9b08      	ldr	r3, [sp, #32]
   b98dc:	6143      	str	r3, [r0, #20]
   b98de:	2d09      	cmp	r5, #9
   b98e0:	f04f 0301 	mov.w	r3, #1
   b98e4:	6103      	str	r3, [r0, #16]
   b98e6:	dd16      	ble.n	b9916 <__s2b+0x72>
   b98e8:	f104 0909 	add.w	r9, r4, #9
   b98ec:	46c8      	mov	r8, r9
   b98ee:	442c      	add	r4, r5
   b98f0:	f818 3b01 	ldrb.w	r3, [r8], #1
   b98f4:	4601      	mov	r1, r0
   b98f6:	3b30      	subs	r3, #48	; 0x30
   b98f8:	220a      	movs	r2, #10
   b98fa:	4630      	mov	r0, r6
   b98fc:	f7ff ff8c 	bl	b9818 <__multadd>
   b9900:	45a0      	cmp	r8, r4
   b9902:	d1f5      	bne.n	b98f0 <__s2b+0x4c>
   b9904:	f1a5 0408 	sub.w	r4, r5, #8
   b9908:	444c      	add	r4, r9
   b990a:	1b2d      	subs	r5, r5, r4
   b990c:	1963      	adds	r3, r4, r5
   b990e:	42bb      	cmp	r3, r7
   b9910:	db04      	blt.n	b991c <__s2b+0x78>
   b9912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9916:	340a      	adds	r4, #10
   b9918:	2509      	movs	r5, #9
   b991a:	e7f6      	b.n	b990a <__s2b+0x66>
   b991c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9920:	4601      	mov	r1, r0
   b9922:	3b30      	subs	r3, #48	; 0x30
   b9924:	220a      	movs	r2, #10
   b9926:	4630      	mov	r0, r6
   b9928:	f7ff ff76 	bl	b9818 <__multadd>
   b992c:	e7ee      	b.n	b990c <__s2b+0x68>
   b992e:	bf00      	nop
   b9930:	000bad71 	.word	0x000bad71
   b9934:	000bae1c 	.word	0x000bae1c

000b9938 <__hi0bits>:
   b9938:	0c03      	lsrs	r3, r0, #16
   b993a:	041b      	lsls	r3, r3, #16
   b993c:	b9d3      	cbnz	r3, b9974 <__hi0bits+0x3c>
   b993e:	0400      	lsls	r0, r0, #16
   b9940:	2310      	movs	r3, #16
   b9942:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9946:	bf04      	itt	eq
   b9948:	0200      	lsleq	r0, r0, #8
   b994a:	3308      	addeq	r3, #8
   b994c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9950:	bf04      	itt	eq
   b9952:	0100      	lsleq	r0, r0, #4
   b9954:	3304      	addeq	r3, #4
   b9956:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b995a:	bf04      	itt	eq
   b995c:	0080      	lsleq	r0, r0, #2
   b995e:	3302      	addeq	r3, #2
   b9960:	2800      	cmp	r0, #0
   b9962:	db05      	blt.n	b9970 <__hi0bits+0x38>
   b9964:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9968:	f103 0301 	add.w	r3, r3, #1
   b996c:	bf08      	it	eq
   b996e:	2320      	moveq	r3, #32
   b9970:	4618      	mov	r0, r3
   b9972:	4770      	bx	lr
   b9974:	2300      	movs	r3, #0
   b9976:	e7e4      	b.n	b9942 <__hi0bits+0xa>

000b9978 <__lo0bits>:
   b9978:	6803      	ldr	r3, [r0, #0]
   b997a:	f013 0207 	ands.w	r2, r3, #7
   b997e:	4601      	mov	r1, r0
   b9980:	d00b      	beq.n	b999a <__lo0bits+0x22>
   b9982:	07da      	lsls	r2, r3, #31
   b9984:	d423      	bmi.n	b99ce <__lo0bits+0x56>
   b9986:	0798      	lsls	r0, r3, #30
   b9988:	bf49      	itett	mi
   b998a:	085b      	lsrmi	r3, r3, #1
   b998c:	089b      	lsrpl	r3, r3, #2
   b998e:	2001      	movmi	r0, #1
   b9990:	600b      	strmi	r3, [r1, #0]
   b9992:	bf5c      	itt	pl
   b9994:	600b      	strpl	r3, [r1, #0]
   b9996:	2002      	movpl	r0, #2
   b9998:	4770      	bx	lr
   b999a:	b298      	uxth	r0, r3
   b999c:	b9a8      	cbnz	r0, b99ca <__lo0bits+0x52>
   b999e:	0c1b      	lsrs	r3, r3, #16
   b99a0:	2010      	movs	r0, #16
   b99a2:	b2da      	uxtb	r2, r3
   b99a4:	b90a      	cbnz	r2, b99aa <__lo0bits+0x32>
   b99a6:	3008      	adds	r0, #8
   b99a8:	0a1b      	lsrs	r3, r3, #8
   b99aa:	071a      	lsls	r2, r3, #28
   b99ac:	bf04      	itt	eq
   b99ae:	091b      	lsreq	r3, r3, #4
   b99b0:	3004      	addeq	r0, #4
   b99b2:	079a      	lsls	r2, r3, #30
   b99b4:	bf04      	itt	eq
   b99b6:	089b      	lsreq	r3, r3, #2
   b99b8:	3002      	addeq	r0, #2
   b99ba:	07da      	lsls	r2, r3, #31
   b99bc:	d403      	bmi.n	b99c6 <__lo0bits+0x4e>
   b99be:	085b      	lsrs	r3, r3, #1
   b99c0:	f100 0001 	add.w	r0, r0, #1
   b99c4:	d005      	beq.n	b99d2 <__lo0bits+0x5a>
   b99c6:	600b      	str	r3, [r1, #0]
   b99c8:	4770      	bx	lr
   b99ca:	4610      	mov	r0, r2
   b99cc:	e7e9      	b.n	b99a2 <__lo0bits+0x2a>
   b99ce:	2000      	movs	r0, #0
   b99d0:	4770      	bx	lr
   b99d2:	2020      	movs	r0, #32
   b99d4:	4770      	bx	lr
	...

000b99d8 <__i2b>:
   b99d8:	b510      	push	{r4, lr}
   b99da:	460c      	mov	r4, r1
   b99dc:	2101      	movs	r1, #1
   b99de:	f7ff feb9 	bl	b9754 <_Balloc>
   b99e2:	4602      	mov	r2, r0
   b99e4:	b928      	cbnz	r0, b99f2 <__i2b+0x1a>
   b99e6:	4b05      	ldr	r3, [pc, #20]	; (b99fc <__i2b+0x24>)
   b99e8:	4805      	ldr	r0, [pc, #20]	; (b9a00 <__i2b+0x28>)
   b99ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b99ee:	f7fc fc45 	bl	b627c <__assert_func>
   b99f2:	2301      	movs	r3, #1
   b99f4:	6144      	str	r4, [r0, #20]
   b99f6:	6103      	str	r3, [r0, #16]
   b99f8:	bd10      	pop	{r4, pc}
   b99fa:	bf00      	nop
   b99fc:	000bad71 	.word	0x000bad71
   b9a00:	000bae1c 	.word	0x000bae1c

000b9a04 <__multiply>:
   b9a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a08:	4691      	mov	r9, r2
   b9a0a:	690a      	ldr	r2, [r1, #16]
   b9a0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9a10:	429a      	cmp	r2, r3
   b9a12:	bfb8      	it	lt
   b9a14:	460b      	movlt	r3, r1
   b9a16:	460c      	mov	r4, r1
   b9a18:	bfbc      	itt	lt
   b9a1a:	464c      	movlt	r4, r9
   b9a1c:	4699      	movlt	r9, r3
   b9a1e:	6927      	ldr	r7, [r4, #16]
   b9a20:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9a24:	68a3      	ldr	r3, [r4, #8]
   b9a26:	6861      	ldr	r1, [r4, #4]
   b9a28:	eb07 060a 	add.w	r6, r7, sl
   b9a2c:	42b3      	cmp	r3, r6
   b9a2e:	b085      	sub	sp, #20
   b9a30:	bfb8      	it	lt
   b9a32:	3101      	addlt	r1, #1
   b9a34:	f7ff fe8e 	bl	b9754 <_Balloc>
   b9a38:	b930      	cbnz	r0, b9a48 <__multiply+0x44>
   b9a3a:	4602      	mov	r2, r0
   b9a3c:	4b44      	ldr	r3, [pc, #272]	; (b9b50 <__multiply+0x14c>)
   b9a3e:	4845      	ldr	r0, [pc, #276]	; (b9b54 <__multiply+0x150>)
   b9a40:	f240 115d 	movw	r1, #349	; 0x15d
   b9a44:	f7fc fc1a 	bl	b627c <__assert_func>
   b9a48:	f100 0514 	add.w	r5, r0, #20
   b9a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9a50:	462b      	mov	r3, r5
   b9a52:	2200      	movs	r2, #0
   b9a54:	4543      	cmp	r3, r8
   b9a56:	d321      	bcc.n	b9a9c <__multiply+0x98>
   b9a58:	f104 0314 	add.w	r3, r4, #20
   b9a5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9a60:	f109 0314 	add.w	r3, r9, #20
   b9a64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9a68:	9202      	str	r2, [sp, #8]
   b9a6a:	1b3a      	subs	r2, r7, r4
   b9a6c:	3a15      	subs	r2, #21
   b9a6e:	f022 0203 	bic.w	r2, r2, #3
   b9a72:	3204      	adds	r2, #4
   b9a74:	f104 0115 	add.w	r1, r4, #21
   b9a78:	428f      	cmp	r7, r1
   b9a7a:	bf38      	it	cc
   b9a7c:	2204      	movcc	r2, #4
   b9a7e:	9201      	str	r2, [sp, #4]
   b9a80:	9a02      	ldr	r2, [sp, #8]
   b9a82:	9303      	str	r3, [sp, #12]
   b9a84:	429a      	cmp	r2, r3
   b9a86:	d80c      	bhi.n	b9aa2 <__multiply+0x9e>
   b9a88:	2e00      	cmp	r6, #0
   b9a8a:	dd03      	ble.n	b9a94 <__multiply+0x90>
   b9a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9a90:	2b00      	cmp	r3, #0
   b9a92:	d05a      	beq.n	b9b4a <__multiply+0x146>
   b9a94:	6106      	str	r6, [r0, #16]
   b9a96:	b005      	add	sp, #20
   b9a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9a9c:	f843 2b04 	str.w	r2, [r3], #4
   b9aa0:	e7d8      	b.n	b9a54 <__multiply+0x50>
   b9aa2:	f8b3 a000 	ldrh.w	sl, [r3]
   b9aa6:	f1ba 0f00 	cmp.w	sl, #0
   b9aaa:	d024      	beq.n	b9af6 <__multiply+0xf2>
   b9aac:	f104 0e14 	add.w	lr, r4, #20
   b9ab0:	46a9      	mov	r9, r5
   b9ab2:	f04f 0c00 	mov.w	ip, #0
   b9ab6:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9aba:	f8d9 1000 	ldr.w	r1, [r9]
   b9abe:	fa1f fb82 	uxth.w	fp, r2
   b9ac2:	b289      	uxth	r1, r1
   b9ac4:	fb0a 110b 	mla	r1, sl, fp, r1
   b9ac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9acc:	f8d9 2000 	ldr.w	r2, [r9]
   b9ad0:	4461      	add	r1, ip
   b9ad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9ad6:	fb0a c20b 	mla	r2, sl, fp, ip
   b9ada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9ade:	b289      	uxth	r1, r1
   b9ae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b9ae4:	4577      	cmp	r7, lr
   b9ae6:	f849 1b04 	str.w	r1, [r9], #4
   b9aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9aee:	d8e2      	bhi.n	b9ab6 <__multiply+0xb2>
   b9af0:	9a01      	ldr	r2, [sp, #4]
   b9af2:	f845 c002 	str.w	ip, [r5, r2]
   b9af6:	9a03      	ldr	r2, [sp, #12]
   b9af8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9afc:	3304      	adds	r3, #4
   b9afe:	f1b9 0f00 	cmp.w	r9, #0
   b9b02:	d020      	beq.n	b9b46 <__multiply+0x142>
   b9b04:	6829      	ldr	r1, [r5, #0]
   b9b06:	f104 0c14 	add.w	ip, r4, #20
   b9b0a:	46ae      	mov	lr, r5
   b9b0c:	f04f 0a00 	mov.w	sl, #0
   b9b10:	f8bc b000 	ldrh.w	fp, [ip]
   b9b14:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9b18:	fb09 220b 	mla	r2, r9, fp, r2
   b9b1c:	4492      	add	sl, r2
   b9b1e:	b289      	uxth	r1, r1
   b9b20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9b24:	f84e 1b04 	str.w	r1, [lr], #4
   b9b28:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9b2c:	f8be 1000 	ldrh.w	r1, [lr]
   b9b30:	0c12      	lsrs	r2, r2, #16
   b9b32:	fb09 1102 	mla	r1, r9, r2, r1
   b9b36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9b3a:	4567      	cmp	r7, ip
   b9b3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9b40:	d8e6      	bhi.n	b9b10 <__multiply+0x10c>
   b9b42:	9a01      	ldr	r2, [sp, #4]
   b9b44:	50a9      	str	r1, [r5, r2]
   b9b46:	3504      	adds	r5, #4
   b9b48:	e79a      	b.n	b9a80 <__multiply+0x7c>
   b9b4a:	3e01      	subs	r6, #1
   b9b4c:	e79c      	b.n	b9a88 <__multiply+0x84>
   b9b4e:	bf00      	nop
   b9b50:	000bad71 	.word	0x000bad71
   b9b54:	000bae1c 	.word	0x000bae1c

000b9b58 <__pow5mult>:
   b9b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9b5c:	4615      	mov	r5, r2
   b9b5e:	f012 0203 	ands.w	r2, r2, #3
   b9b62:	4606      	mov	r6, r0
   b9b64:	460f      	mov	r7, r1
   b9b66:	d007      	beq.n	b9b78 <__pow5mult+0x20>
   b9b68:	4c25      	ldr	r4, [pc, #148]	; (b9c00 <__pow5mult+0xa8>)
   b9b6a:	3a01      	subs	r2, #1
   b9b6c:	2300      	movs	r3, #0
   b9b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9b72:	f7ff fe51 	bl	b9818 <__multadd>
   b9b76:	4607      	mov	r7, r0
   b9b78:	10ad      	asrs	r5, r5, #2
   b9b7a:	d03d      	beq.n	b9bf8 <__pow5mult+0xa0>
   b9b7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9b7e:	b97c      	cbnz	r4, b9ba0 <__pow5mult+0x48>
   b9b80:	2010      	movs	r0, #16
   b9b82:	f7fc fb53 	bl	b622c <malloc>
   b9b86:	4602      	mov	r2, r0
   b9b88:	6270      	str	r0, [r6, #36]	; 0x24
   b9b8a:	b928      	cbnz	r0, b9b98 <__pow5mult+0x40>
   b9b8c:	4b1d      	ldr	r3, [pc, #116]	; (b9c04 <__pow5mult+0xac>)
   b9b8e:	481e      	ldr	r0, [pc, #120]	; (b9c08 <__pow5mult+0xb0>)
   b9b90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b9b94:	f7fc fb72 	bl	b627c <__assert_func>
   b9b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9b9c:	6004      	str	r4, [r0, #0]
   b9b9e:	60c4      	str	r4, [r0, #12]
   b9ba0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b9ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9ba8:	b94c      	cbnz	r4, b9bbe <__pow5mult+0x66>
   b9baa:	f240 2171 	movw	r1, #625	; 0x271
   b9bae:	4630      	mov	r0, r6
   b9bb0:	f7ff ff12 	bl	b99d8 <__i2b>
   b9bb4:	2300      	movs	r3, #0
   b9bb6:	f8c8 0008 	str.w	r0, [r8, #8]
   b9bba:	4604      	mov	r4, r0
   b9bbc:	6003      	str	r3, [r0, #0]
   b9bbe:	f04f 0900 	mov.w	r9, #0
   b9bc2:	07eb      	lsls	r3, r5, #31
   b9bc4:	d50a      	bpl.n	b9bdc <__pow5mult+0x84>
   b9bc6:	4639      	mov	r1, r7
   b9bc8:	4622      	mov	r2, r4
   b9bca:	4630      	mov	r0, r6
   b9bcc:	f7ff ff1a 	bl	b9a04 <__multiply>
   b9bd0:	4639      	mov	r1, r7
   b9bd2:	4680      	mov	r8, r0
   b9bd4:	4630      	mov	r0, r6
   b9bd6:	f7ff fdfd 	bl	b97d4 <_Bfree>
   b9bda:	4647      	mov	r7, r8
   b9bdc:	106d      	asrs	r5, r5, #1
   b9bde:	d00b      	beq.n	b9bf8 <__pow5mult+0xa0>
   b9be0:	6820      	ldr	r0, [r4, #0]
   b9be2:	b938      	cbnz	r0, b9bf4 <__pow5mult+0x9c>
   b9be4:	4622      	mov	r2, r4
   b9be6:	4621      	mov	r1, r4
   b9be8:	4630      	mov	r0, r6
   b9bea:	f7ff ff0b 	bl	b9a04 <__multiply>
   b9bee:	6020      	str	r0, [r4, #0]
   b9bf0:	f8c0 9000 	str.w	r9, [r0]
   b9bf4:	4604      	mov	r4, r0
   b9bf6:	e7e4      	b.n	b9bc2 <__pow5mult+0x6a>
   b9bf8:	4638      	mov	r0, r7
   b9bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9bfe:	bf00      	nop
   b9c00:	000baf90 	.word	0x000baf90
   b9c04:	000bab79 	.word	0x000bab79
   b9c08:	000bae1c 	.word	0x000bae1c

000b9c0c <__lshift>:
   b9c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9c10:	460c      	mov	r4, r1
   b9c12:	6849      	ldr	r1, [r1, #4]
   b9c14:	6923      	ldr	r3, [r4, #16]
   b9c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9c1a:	68a3      	ldr	r3, [r4, #8]
   b9c1c:	4607      	mov	r7, r0
   b9c1e:	4691      	mov	r9, r2
   b9c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9c24:	f108 0601 	add.w	r6, r8, #1
   b9c28:	42b3      	cmp	r3, r6
   b9c2a:	db0b      	blt.n	b9c44 <__lshift+0x38>
   b9c2c:	4638      	mov	r0, r7
   b9c2e:	f7ff fd91 	bl	b9754 <_Balloc>
   b9c32:	4605      	mov	r5, r0
   b9c34:	b948      	cbnz	r0, b9c4a <__lshift+0x3e>
   b9c36:	4602      	mov	r2, r0
   b9c38:	4b2a      	ldr	r3, [pc, #168]	; (b9ce4 <__lshift+0xd8>)
   b9c3a:	482b      	ldr	r0, [pc, #172]	; (b9ce8 <__lshift+0xdc>)
   b9c3c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9c40:	f7fc fb1c 	bl	b627c <__assert_func>
   b9c44:	3101      	adds	r1, #1
   b9c46:	005b      	lsls	r3, r3, #1
   b9c48:	e7ee      	b.n	b9c28 <__lshift+0x1c>
   b9c4a:	2300      	movs	r3, #0
   b9c4c:	f100 0114 	add.w	r1, r0, #20
   b9c50:	f100 0210 	add.w	r2, r0, #16
   b9c54:	4618      	mov	r0, r3
   b9c56:	4553      	cmp	r3, sl
   b9c58:	db37      	blt.n	b9cca <__lshift+0xbe>
   b9c5a:	6920      	ldr	r0, [r4, #16]
   b9c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9c60:	f104 0314 	add.w	r3, r4, #20
   b9c64:	f019 091f 	ands.w	r9, r9, #31
   b9c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9c6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9c70:	d02f      	beq.n	b9cd2 <__lshift+0xc6>
   b9c72:	f1c9 0e20 	rsb	lr, r9, #32
   b9c76:	468a      	mov	sl, r1
   b9c78:	f04f 0c00 	mov.w	ip, #0
   b9c7c:	681a      	ldr	r2, [r3, #0]
   b9c7e:	fa02 f209 	lsl.w	r2, r2, r9
   b9c82:	ea42 020c 	orr.w	r2, r2, ip
   b9c86:	f84a 2b04 	str.w	r2, [sl], #4
   b9c8a:	f853 2b04 	ldr.w	r2, [r3], #4
   b9c8e:	4298      	cmp	r0, r3
   b9c90:	fa22 fc0e 	lsr.w	ip, r2, lr
   b9c94:	d8f2      	bhi.n	b9c7c <__lshift+0x70>
   b9c96:	1b03      	subs	r3, r0, r4
   b9c98:	3b15      	subs	r3, #21
   b9c9a:	f023 0303 	bic.w	r3, r3, #3
   b9c9e:	3304      	adds	r3, #4
   b9ca0:	f104 0215 	add.w	r2, r4, #21
   b9ca4:	4290      	cmp	r0, r2
   b9ca6:	bf38      	it	cc
   b9ca8:	2304      	movcc	r3, #4
   b9caa:	f841 c003 	str.w	ip, [r1, r3]
   b9cae:	f1bc 0f00 	cmp.w	ip, #0
   b9cb2:	d001      	beq.n	b9cb8 <__lshift+0xac>
   b9cb4:	f108 0602 	add.w	r6, r8, #2
   b9cb8:	3e01      	subs	r6, #1
   b9cba:	4638      	mov	r0, r7
   b9cbc:	612e      	str	r6, [r5, #16]
   b9cbe:	4621      	mov	r1, r4
   b9cc0:	f7ff fd88 	bl	b97d4 <_Bfree>
   b9cc4:	4628      	mov	r0, r5
   b9cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9cca:	f842 0f04 	str.w	r0, [r2, #4]!
   b9cce:	3301      	adds	r3, #1
   b9cd0:	e7c1      	b.n	b9c56 <__lshift+0x4a>
   b9cd2:	3904      	subs	r1, #4
   b9cd4:	f853 2b04 	ldr.w	r2, [r3], #4
   b9cd8:	f841 2f04 	str.w	r2, [r1, #4]!
   b9cdc:	4298      	cmp	r0, r3
   b9cde:	d8f9      	bhi.n	b9cd4 <__lshift+0xc8>
   b9ce0:	e7ea      	b.n	b9cb8 <__lshift+0xac>
   b9ce2:	bf00      	nop
   b9ce4:	000bad71 	.word	0x000bad71
   b9ce8:	000bae1c 	.word	0x000bae1c

000b9cec <__mcmp>:
   b9cec:	b530      	push	{r4, r5, lr}
   b9cee:	6902      	ldr	r2, [r0, #16]
   b9cf0:	690c      	ldr	r4, [r1, #16]
   b9cf2:	1b12      	subs	r2, r2, r4
   b9cf4:	d10e      	bne.n	b9d14 <__mcmp+0x28>
   b9cf6:	f100 0314 	add.w	r3, r0, #20
   b9cfa:	3114      	adds	r1, #20
   b9cfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9d00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b9d04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9d08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9d0c:	42a5      	cmp	r5, r4
   b9d0e:	d003      	beq.n	b9d18 <__mcmp+0x2c>
   b9d10:	d305      	bcc.n	b9d1e <__mcmp+0x32>
   b9d12:	2201      	movs	r2, #1
   b9d14:	4610      	mov	r0, r2
   b9d16:	bd30      	pop	{r4, r5, pc}
   b9d18:	4283      	cmp	r3, r0
   b9d1a:	d3f3      	bcc.n	b9d04 <__mcmp+0x18>
   b9d1c:	e7fa      	b.n	b9d14 <__mcmp+0x28>
   b9d1e:	f04f 32ff 	mov.w	r2, #4294967295
   b9d22:	e7f7      	b.n	b9d14 <__mcmp+0x28>

000b9d24 <__mdiff>:
   b9d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d28:	460c      	mov	r4, r1
   b9d2a:	4606      	mov	r6, r0
   b9d2c:	4611      	mov	r1, r2
   b9d2e:	4620      	mov	r0, r4
   b9d30:	4690      	mov	r8, r2
   b9d32:	f7ff ffdb 	bl	b9cec <__mcmp>
   b9d36:	1e05      	subs	r5, r0, #0
   b9d38:	d110      	bne.n	b9d5c <__mdiff+0x38>
   b9d3a:	4629      	mov	r1, r5
   b9d3c:	4630      	mov	r0, r6
   b9d3e:	f7ff fd09 	bl	b9754 <_Balloc>
   b9d42:	b930      	cbnz	r0, b9d52 <__mdiff+0x2e>
   b9d44:	4b3a      	ldr	r3, [pc, #232]	; (b9e30 <__mdiff+0x10c>)
   b9d46:	4602      	mov	r2, r0
   b9d48:	f240 2132 	movw	r1, #562	; 0x232
   b9d4c:	4839      	ldr	r0, [pc, #228]	; (b9e34 <__mdiff+0x110>)
   b9d4e:	f7fc fa95 	bl	b627c <__assert_func>
   b9d52:	2301      	movs	r3, #1
   b9d54:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9d5c:	bfa4      	itt	ge
   b9d5e:	4643      	movge	r3, r8
   b9d60:	46a0      	movge	r8, r4
   b9d62:	4630      	mov	r0, r6
   b9d64:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9d68:	bfa6      	itte	ge
   b9d6a:	461c      	movge	r4, r3
   b9d6c:	2500      	movge	r5, #0
   b9d6e:	2501      	movlt	r5, #1
   b9d70:	f7ff fcf0 	bl	b9754 <_Balloc>
   b9d74:	b920      	cbnz	r0, b9d80 <__mdiff+0x5c>
   b9d76:	4b2e      	ldr	r3, [pc, #184]	; (b9e30 <__mdiff+0x10c>)
   b9d78:	4602      	mov	r2, r0
   b9d7a:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9d7e:	e7e5      	b.n	b9d4c <__mdiff+0x28>
   b9d80:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b9d84:	6926      	ldr	r6, [r4, #16]
   b9d86:	60c5      	str	r5, [r0, #12]
   b9d88:	f104 0914 	add.w	r9, r4, #20
   b9d8c:	f108 0514 	add.w	r5, r8, #20
   b9d90:	f100 0e14 	add.w	lr, r0, #20
   b9d94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9d98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b9d9c:	f108 0210 	add.w	r2, r8, #16
   b9da0:	46f2      	mov	sl, lr
   b9da2:	2100      	movs	r1, #0
   b9da4:	f859 3b04 	ldr.w	r3, [r9], #4
   b9da8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b9dac:	fa1f f883 	uxth.w	r8, r3
   b9db0:	fa11 f18b 	uxtah	r1, r1, fp
   b9db4:	0c1b      	lsrs	r3, r3, #16
   b9db6:	eba1 0808 	sub.w	r8, r1, r8
   b9dba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b9dbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b9dc2:	fa1f f888 	uxth.w	r8, r8
   b9dc6:	1419      	asrs	r1, r3, #16
   b9dc8:	454e      	cmp	r6, r9
   b9dca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b9dce:	f84a 3b04 	str.w	r3, [sl], #4
   b9dd2:	d8e7      	bhi.n	b9da4 <__mdiff+0x80>
   b9dd4:	1b33      	subs	r3, r6, r4
   b9dd6:	3b15      	subs	r3, #21
   b9dd8:	f023 0303 	bic.w	r3, r3, #3
   b9ddc:	3304      	adds	r3, #4
   b9dde:	3415      	adds	r4, #21
   b9de0:	42a6      	cmp	r6, r4
   b9de2:	bf38      	it	cc
   b9de4:	2304      	movcc	r3, #4
   b9de6:	441d      	add	r5, r3
   b9de8:	4473      	add	r3, lr
   b9dea:	469e      	mov	lr, r3
   b9dec:	462e      	mov	r6, r5
   b9dee:	4566      	cmp	r6, ip
   b9df0:	d30e      	bcc.n	b9e10 <__mdiff+0xec>
   b9df2:	f10c 0203 	add.w	r2, ip, #3
   b9df6:	1b52      	subs	r2, r2, r5
   b9df8:	f022 0203 	bic.w	r2, r2, #3
   b9dfc:	3d03      	subs	r5, #3
   b9dfe:	45ac      	cmp	ip, r5
   b9e00:	bf38      	it	cc
   b9e02:	2200      	movcc	r2, #0
   b9e04:	441a      	add	r2, r3
   b9e06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b9e0a:	b17b      	cbz	r3, b9e2c <__mdiff+0x108>
   b9e0c:	6107      	str	r7, [r0, #16]
   b9e0e:	e7a3      	b.n	b9d58 <__mdiff+0x34>
   b9e10:	f856 8b04 	ldr.w	r8, [r6], #4
   b9e14:	fa11 f288 	uxtah	r2, r1, r8
   b9e18:	1414      	asrs	r4, r2, #16
   b9e1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b9e1e:	b292      	uxth	r2, r2
   b9e20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b9e24:	f84e 2b04 	str.w	r2, [lr], #4
   b9e28:	1421      	asrs	r1, r4, #16
   b9e2a:	e7e0      	b.n	b9dee <__mdiff+0xca>
   b9e2c:	3f01      	subs	r7, #1
   b9e2e:	e7ea      	b.n	b9e06 <__mdiff+0xe2>
   b9e30:	000bad71 	.word	0x000bad71
   b9e34:	000bae1c 	.word	0x000bae1c

000b9e38 <__ulp>:
   b9e38:	b082      	sub	sp, #8
   b9e3a:	ed8d 0b00 	vstr	d0, [sp]
   b9e3e:	9b01      	ldr	r3, [sp, #4]
   b9e40:	4912      	ldr	r1, [pc, #72]	; (b9e8c <__ulp+0x54>)
   b9e42:	4019      	ands	r1, r3
   b9e44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b9e48:	2900      	cmp	r1, #0
   b9e4a:	dd05      	ble.n	b9e58 <__ulp+0x20>
   b9e4c:	2200      	movs	r2, #0
   b9e4e:	460b      	mov	r3, r1
   b9e50:	ec43 2b10 	vmov	d0, r2, r3
   b9e54:	b002      	add	sp, #8
   b9e56:	4770      	bx	lr
   b9e58:	4249      	negs	r1, r1
   b9e5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b9e5e:	ea4f 5021 	mov.w	r0, r1, asr #20
   b9e62:	f04f 0200 	mov.w	r2, #0
   b9e66:	f04f 0300 	mov.w	r3, #0
   b9e6a:	da04      	bge.n	b9e76 <__ulp+0x3e>
   b9e6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b9e70:	fa41 f300 	asr.w	r3, r1, r0
   b9e74:	e7ec      	b.n	b9e50 <__ulp+0x18>
   b9e76:	f1a0 0114 	sub.w	r1, r0, #20
   b9e7a:	291e      	cmp	r1, #30
   b9e7c:	bfda      	itte	le
   b9e7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b9e82:	fa20 f101 	lsrle.w	r1, r0, r1
   b9e86:	2101      	movgt	r1, #1
   b9e88:	460a      	mov	r2, r1
   b9e8a:	e7e1      	b.n	b9e50 <__ulp+0x18>
   b9e8c:	7ff00000 	.word	0x7ff00000

000b9e90 <__b2d>:
   b9e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9e92:	6905      	ldr	r5, [r0, #16]
   b9e94:	f100 0714 	add.w	r7, r0, #20
   b9e98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b9e9c:	1f2e      	subs	r6, r5, #4
   b9e9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b9ea2:	4620      	mov	r0, r4
   b9ea4:	f7ff fd48 	bl	b9938 <__hi0bits>
   b9ea8:	f1c0 0320 	rsb	r3, r0, #32
   b9eac:	280a      	cmp	r0, #10
   b9eae:	f8df c07c 	ldr.w	ip, [pc, #124]	; b9f2c <__b2d+0x9c>
   b9eb2:	600b      	str	r3, [r1, #0]
   b9eb4:	dc14      	bgt.n	b9ee0 <__b2d+0x50>
   b9eb6:	f1c0 0e0b 	rsb	lr, r0, #11
   b9eba:	fa24 f10e 	lsr.w	r1, r4, lr
   b9ebe:	42b7      	cmp	r7, r6
   b9ec0:	ea41 030c 	orr.w	r3, r1, ip
   b9ec4:	bf34      	ite	cc
   b9ec6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9eca:	2100      	movcs	r1, #0
   b9ecc:	3015      	adds	r0, #21
   b9ece:	fa04 f000 	lsl.w	r0, r4, r0
   b9ed2:	fa21 f10e 	lsr.w	r1, r1, lr
   b9ed6:	ea40 0201 	orr.w	r2, r0, r1
   b9eda:	ec43 2b10 	vmov	d0, r2, r3
   b9ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9ee0:	42b7      	cmp	r7, r6
   b9ee2:	bf3a      	itte	cc
   b9ee4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9ee8:	f1a5 0608 	subcc.w	r6, r5, #8
   b9eec:	2100      	movcs	r1, #0
   b9eee:	380b      	subs	r0, #11
   b9ef0:	d017      	beq.n	b9f22 <__b2d+0x92>
   b9ef2:	f1c0 0c20 	rsb	ip, r0, #32
   b9ef6:	fa04 f500 	lsl.w	r5, r4, r0
   b9efa:	42be      	cmp	r6, r7
   b9efc:	fa21 f40c 	lsr.w	r4, r1, ip
   b9f00:	ea45 0504 	orr.w	r5, r5, r4
   b9f04:	bf8c      	ite	hi
   b9f06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b9f0a:	2400      	movls	r4, #0
   b9f0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b9f10:	fa01 f000 	lsl.w	r0, r1, r0
   b9f14:	fa24 f40c 	lsr.w	r4, r4, ip
   b9f18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b9f1c:	ea40 0204 	orr.w	r2, r0, r4
   b9f20:	e7db      	b.n	b9eda <__b2d+0x4a>
   b9f22:	ea44 030c 	orr.w	r3, r4, ip
   b9f26:	460a      	mov	r2, r1
   b9f28:	e7d7      	b.n	b9eda <__b2d+0x4a>
   b9f2a:	bf00      	nop
   b9f2c:	3ff00000 	.word	0x3ff00000

000b9f30 <__d2b>:
   b9f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9f34:	4689      	mov	r9, r1
   b9f36:	2101      	movs	r1, #1
   b9f38:	ec57 6b10 	vmov	r6, r7, d0
   b9f3c:	4690      	mov	r8, r2
   b9f3e:	f7ff fc09 	bl	b9754 <_Balloc>
   b9f42:	4604      	mov	r4, r0
   b9f44:	b930      	cbnz	r0, b9f54 <__d2b+0x24>
   b9f46:	4602      	mov	r2, r0
   b9f48:	4b25      	ldr	r3, [pc, #148]	; (b9fe0 <__d2b+0xb0>)
   b9f4a:	4826      	ldr	r0, [pc, #152]	; (b9fe4 <__d2b+0xb4>)
   b9f4c:	f240 310a 	movw	r1, #778	; 0x30a
   b9f50:	f7fc f994 	bl	b627c <__assert_func>
   b9f54:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b9f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b9f5c:	bb35      	cbnz	r5, b9fac <__d2b+0x7c>
   b9f5e:	2e00      	cmp	r6, #0
   b9f60:	9301      	str	r3, [sp, #4]
   b9f62:	d028      	beq.n	b9fb6 <__d2b+0x86>
   b9f64:	4668      	mov	r0, sp
   b9f66:	9600      	str	r6, [sp, #0]
   b9f68:	f7ff fd06 	bl	b9978 <__lo0bits>
   b9f6c:	9900      	ldr	r1, [sp, #0]
   b9f6e:	b300      	cbz	r0, b9fb2 <__d2b+0x82>
   b9f70:	9a01      	ldr	r2, [sp, #4]
   b9f72:	f1c0 0320 	rsb	r3, r0, #32
   b9f76:	fa02 f303 	lsl.w	r3, r2, r3
   b9f7a:	430b      	orrs	r3, r1
   b9f7c:	40c2      	lsrs	r2, r0
   b9f7e:	6163      	str	r3, [r4, #20]
   b9f80:	9201      	str	r2, [sp, #4]
   b9f82:	9b01      	ldr	r3, [sp, #4]
   b9f84:	61a3      	str	r3, [r4, #24]
   b9f86:	2b00      	cmp	r3, #0
   b9f88:	bf14      	ite	ne
   b9f8a:	2202      	movne	r2, #2
   b9f8c:	2201      	moveq	r2, #1
   b9f8e:	6122      	str	r2, [r4, #16]
   b9f90:	b1d5      	cbz	r5, b9fc8 <__d2b+0x98>
   b9f92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b9f96:	4405      	add	r5, r0
   b9f98:	f8c9 5000 	str.w	r5, [r9]
   b9f9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b9fa0:	f8c8 0000 	str.w	r0, [r8]
   b9fa4:	4620      	mov	r0, r4
   b9fa6:	b003      	add	sp, #12
   b9fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9fb0:	e7d5      	b.n	b9f5e <__d2b+0x2e>
   b9fb2:	6161      	str	r1, [r4, #20]
   b9fb4:	e7e5      	b.n	b9f82 <__d2b+0x52>
   b9fb6:	a801      	add	r0, sp, #4
   b9fb8:	f7ff fcde 	bl	b9978 <__lo0bits>
   b9fbc:	9b01      	ldr	r3, [sp, #4]
   b9fbe:	6163      	str	r3, [r4, #20]
   b9fc0:	2201      	movs	r2, #1
   b9fc2:	6122      	str	r2, [r4, #16]
   b9fc4:	3020      	adds	r0, #32
   b9fc6:	e7e3      	b.n	b9f90 <__d2b+0x60>
   b9fc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b9fcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b9fd0:	f8c9 0000 	str.w	r0, [r9]
   b9fd4:	6918      	ldr	r0, [r3, #16]
   b9fd6:	f7ff fcaf 	bl	b9938 <__hi0bits>
   b9fda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b9fde:	e7df      	b.n	b9fa0 <__d2b+0x70>
   b9fe0:	000bad71 	.word	0x000bad71
   b9fe4:	000bae1c 	.word	0x000bae1c

000b9fe8 <__ratio>:
   b9fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9fec:	4688      	mov	r8, r1
   b9fee:	4669      	mov	r1, sp
   b9ff0:	4681      	mov	r9, r0
   b9ff2:	f7ff ff4d 	bl	b9e90 <__b2d>
   b9ff6:	a901      	add	r1, sp, #4
   b9ff8:	4640      	mov	r0, r8
   b9ffa:	ec55 4b10 	vmov	r4, r5, d0
   b9ffe:	f7ff ff47 	bl	b9e90 <__b2d>
   ba002:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba006:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ba00a:	eba3 0c02 	sub.w	ip, r3, r2
   ba00e:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba012:	1a9b      	subs	r3, r3, r2
   ba014:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ba018:	ec51 0b10 	vmov	r0, r1, d0
   ba01c:	2b00      	cmp	r3, #0
   ba01e:	bfd6      	itet	le
   ba020:	460a      	movle	r2, r1
   ba022:	462a      	movgt	r2, r5
   ba024:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ba028:	468b      	mov	fp, r1
   ba02a:	462f      	mov	r7, r5
   ba02c:	bfd4      	ite	le
   ba02e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ba032:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ba036:	4620      	mov	r0, r4
   ba038:	ee10 2a10 	vmov	r2, s0
   ba03c:	465b      	mov	r3, fp
   ba03e:	4639      	mov	r1, r7
   ba040:	f7fd fef8 	bl	b7e34 <__aeabi_ddiv>
   ba044:	ec41 0b10 	vmov	d0, r0, r1
   ba048:	b003      	add	sp, #12
   ba04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba04e <__copybits>:
   ba04e:	3901      	subs	r1, #1
   ba050:	b570      	push	{r4, r5, r6, lr}
   ba052:	1149      	asrs	r1, r1, #5
   ba054:	6914      	ldr	r4, [r2, #16]
   ba056:	3101      	adds	r1, #1
   ba058:	f102 0314 	add.w	r3, r2, #20
   ba05c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ba060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ba064:	1f05      	subs	r5, r0, #4
   ba066:	42a3      	cmp	r3, r4
   ba068:	d30c      	bcc.n	ba084 <__copybits+0x36>
   ba06a:	1aa3      	subs	r3, r4, r2
   ba06c:	3b11      	subs	r3, #17
   ba06e:	f023 0303 	bic.w	r3, r3, #3
   ba072:	3211      	adds	r2, #17
   ba074:	42a2      	cmp	r2, r4
   ba076:	bf88      	it	hi
   ba078:	2300      	movhi	r3, #0
   ba07a:	4418      	add	r0, r3
   ba07c:	2300      	movs	r3, #0
   ba07e:	4288      	cmp	r0, r1
   ba080:	d305      	bcc.n	ba08e <__copybits+0x40>
   ba082:	bd70      	pop	{r4, r5, r6, pc}
   ba084:	f853 6b04 	ldr.w	r6, [r3], #4
   ba088:	f845 6f04 	str.w	r6, [r5, #4]!
   ba08c:	e7eb      	b.n	ba066 <__copybits+0x18>
   ba08e:	f840 3b04 	str.w	r3, [r0], #4
   ba092:	e7f4      	b.n	ba07e <__copybits+0x30>

000ba094 <__any_on>:
   ba094:	f100 0214 	add.w	r2, r0, #20
   ba098:	6900      	ldr	r0, [r0, #16]
   ba09a:	114b      	asrs	r3, r1, #5
   ba09c:	4298      	cmp	r0, r3
   ba09e:	b510      	push	{r4, lr}
   ba0a0:	db11      	blt.n	ba0c6 <__any_on+0x32>
   ba0a2:	dd0a      	ble.n	ba0ba <__any_on+0x26>
   ba0a4:	f011 011f 	ands.w	r1, r1, #31
   ba0a8:	d007      	beq.n	ba0ba <__any_on+0x26>
   ba0aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ba0ae:	fa24 f001 	lsr.w	r0, r4, r1
   ba0b2:	fa00 f101 	lsl.w	r1, r0, r1
   ba0b6:	428c      	cmp	r4, r1
   ba0b8:	d10b      	bne.n	ba0d2 <__any_on+0x3e>
   ba0ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ba0be:	4293      	cmp	r3, r2
   ba0c0:	d803      	bhi.n	ba0ca <__any_on+0x36>
   ba0c2:	2000      	movs	r0, #0
   ba0c4:	bd10      	pop	{r4, pc}
   ba0c6:	4603      	mov	r3, r0
   ba0c8:	e7f7      	b.n	ba0ba <__any_on+0x26>
   ba0ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ba0ce:	2900      	cmp	r1, #0
   ba0d0:	d0f5      	beq.n	ba0be <__any_on+0x2a>
   ba0d2:	2001      	movs	r0, #1
   ba0d4:	e7f6      	b.n	ba0c4 <__any_on+0x30>

000ba0d6 <_calloc_r>:
   ba0d6:	b513      	push	{r0, r1, r4, lr}
   ba0d8:	434a      	muls	r2, r1
   ba0da:	4611      	mov	r1, r2
   ba0dc:	9201      	str	r2, [sp, #4]
   ba0de:	f7fc f8bd 	bl	b625c <_malloc_r>
   ba0e2:	4604      	mov	r4, r0
   ba0e4:	b118      	cbz	r0, ba0ee <_calloc_r+0x18>
   ba0e6:	9a01      	ldr	r2, [sp, #4]
   ba0e8:	2100      	movs	r1, #0
   ba0ea:	f7fe f882 	bl	b81f2 <memset>
   ba0ee:	4620      	mov	r0, r4
   ba0f0:	b002      	add	sp, #8
   ba0f2:	bd10      	pop	{r4, pc}

000ba0f4 <__ascii_wctomb>:
   ba0f4:	b149      	cbz	r1, ba10a <__ascii_wctomb+0x16>
   ba0f6:	2aff      	cmp	r2, #255	; 0xff
   ba0f8:	bf85      	ittet	hi
   ba0fa:	238a      	movhi	r3, #138	; 0x8a
   ba0fc:	6003      	strhi	r3, [r0, #0]
   ba0fe:	700a      	strbls	r2, [r1, #0]
   ba100:	f04f 30ff 	movhi.w	r0, #4294967295
   ba104:	bf98      	it	ls
   ba106:	2001      	movls	r0, #1
   ba108:	4770      	bx	lr
   ba10a:	4608      	mov	r0, r1
   ba10c:	4770      	bx	lr
	...

000ba110 <__aeabi_d2lz>:
   ba110:	b538      	push	{r3, r4, r5, lr}
   ba112:	2200      	movs	r2, #0
   ba114:	2300      	movs	r3, #0
   ba116:	4604      	mov	r4, r0
   ba118:	460d      	mov	r5, r1
   ba11a:	f7fd ffd3 	bl	b80c4 <__aeabi_dcmplt>
   ba11e:	b928      	cbnz	r0, ba12c <__aeabi_d2lz+0x1c>
   ba120:	4620      	mov	r0, r4
   ba122:	4629      	mov	r1, r5
   ba124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba128:	f7fe b814 	b.w	b8154 <__aeabi_d2ulz>
   ba12c:	4620      	mov	r0, r4
   ba12e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ba132:	f7fe f80f 	bl	b8154 <__aeabi_d2ulz>
   ba136:	4240      	negs	r0, r0
   ba138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba13c:	bd38      	pop	{r3, r4, r5, pc}
   ba13e:	bf00      	nop

000ba140 <dynalib_user>:
   ba140:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   ba150:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   ba160:	7620 7269 7574 6c61 2e00 0a00 000a 6142      virtual......Ba
   ba170:	6973 2063 6574 7473 003a 7548 696d 6964     sic test:.Humidi
   ba180:	7974 7420 6f6f 6c20 776f 4320 6f6c 6973     ty too low Closi
   ba190:	676e 4420 6f6f 2072 6e61 2064 7453 7261     ng Door and Star
   ba1a0:	6974 676e 5220 6c65 7961 502f 6d75 0a70     ting Relay/Pump.
   ba1b0:	4800 6d75 6469 7469 2079 7369 6120 6f62     .Humidity is abo
   ba1c0:	6576 3220 2538 202e 7453 706f 6970 676e     ve 28%. Stopping
   ba1d0:	5220 6c65 7961 502f 6d75 2070 6e61 2064      Relay/Pump and 
   ba1e0:	704f 6e65 6e69 2067 6f44 726f 000a 7244     Opening Door..Dr
   ba1f0:	6863 7661 7a65 6900 2e6f 6461 6661 7572     chavez.io.adafru
   ba200:	7469 632e 6d6f 6100 6f69 475f 5a43 394e     it.com.aio_GCZN9
   ba210:	5535 6b50 726d 3161 334e 6875 6148 3031     5UPkmra1N3uhHa10
   ba220:	4f70 5948 7432 0058 7244 6863 7661 7a65     pOHY2tX.Drchavez
   ba230:	662f 6565 7364 722f 6c65 7961 7453 7461     /feeds/relayStat
   ba240:	0065 7244 6863 7661 7a65 662f 6565 7364     e.Drchavez/feeds
   ba250:	622f 7475 6f74 4f6e 4f6e 6666 6400 6665     /buttonOnOff.def
   ba260:	7561 746c 0020 534d 0042 534c 0042 533c     ault .MSB.LSB.<S
   ba270:	4950 6553 7474 6e69 7367 6420 6665 7561     PISettings defau
   ba280:	746c 003e 533c 4950 6553 7474 6e69 7367     lt>.<SPISettings
   ba290:	2520 2573 2075 7325 4d20 444f 2545 3e75      %s%u %s MODE%u>
   ba2a0:	0000 0000                                   ....

000ba2a4 <_ZTVN8particle11SPISettingsE>:
	...
   ba2ac:	4621 000b 460f 000b 4611 000b               !F...F...F..

000ba2b8 <_ZTV16Adafruit_SSD1306>:
	...
   ba2c0:	505d 000b 50ed 000b 5759 000b 65d9 000b     ]P...P..YW...e..
   ba2d0:	5061 000b 5471 000b 4ee9 000b 4d79 000b     aP..qT...N..yM..
   ba2e0:	552f 000b 55cd 000b 5603 000b 561f 000b     /U...U...V...V..

000ba2f0 <_ZL4font>:
   ba2f0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ba300:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ba310:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ba320:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ba330:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ba340:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ba350:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ba360:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ba370:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ba380:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ba390:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ba3a0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ba3b0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   ba3c0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   ba3d0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   ba3e0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   ba3f0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   ba400:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   ba410:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ba420:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ba430:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ba440:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ba450:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ba460:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ba470:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ba480:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ba490:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ba4a0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ba4b0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ba4c0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba4d0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba4e0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba4f0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba500:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba510:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba520:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba530:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba540:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba550:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba560:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba570:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba580:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   ba590:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba5a0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba5b0:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   ba5c0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba5d0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   ba5e0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   ba5f0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   ba600:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba610:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba620:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba630:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba640:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba650:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba660:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   ba670:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   ba680:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   ba690:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   ba6a0:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   ba6b0:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   ba6c0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   ba6d0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   ba6e0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   ba6f0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   ba700:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   ba710:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   ba720:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   ba730:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   ba740:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   ba750:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   ba760:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   ba770:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   ba780:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   ba790:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   ba7a0:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   ba7b0:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   ba7c0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   ba7d0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   ba7e0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000ba7ec <_ZTV12Adafruit_GFX>:
	...
   ba7fc:	5759 000b 65d9 000b 40a5 000b 5471 000b     YW...e...@..qT..
   ba80c:	5597 000b 55b3 000b 552f 000b 55cd 000b     .U...U../U...U..
   ba81c:	5603 000b 561f 000b                         .V...V..

000ba824 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   ba82c:	584d 000b 58d9 000b 57f9 000b 58a7 000b     MX...X...W...X..
   ba83c:	58e7 000b 580d 000b 584f 000b 7244 706f     .X...X..OX..Drop
   ba84c:	6570 2064 2061 6170 6b63 7465 4d00 5451     ped a packet.MQT
   ba85c:	0054 0000                                   T...

000ba860 <_ZTV13Adafruit_MQTT>:
	...
   ba870:	40a5 000b 40a5 000b 40a5 000b 40a5 000b     .@...@...@...@..
   ba880:	40a5 000b                                   .@..

000ba884 <_ZTVN5spark13EthernetClassE>:
	...
   ba88c:	62fb 000b 62f1 000b 62e7 000b 62dd 000b     .b...b...b...b..
   ba89c:	62d1 000b 62c5 000b 72d5 000b 72dd 000b     .b...b...r...r..
   ba8ac:	62b9 000b 62b1 000b 62a7 000b 629d 000b     .b...b...b...b..
   ba8bc:	730d 000b                                   .s..

000ba8c0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba8c0:	0800 1810 2820 3830                         .... (08

000ba8c8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba8d0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   ba8e0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000ba8f0 <_ZTV9IPAddress>:
	...
   ba8f8:	68ad 000b 689d 000b 689f 000b               .h...h...h..

000ba904 <_ZTV9USBSerial>:
	...
   ba90c:	69bf 000b 6a27 000b 69fd 000b 65d9 000b     .i..'j...i...e..
   ba91c:	69ef 000b 69c1 000b 69d1 000b 6a21 000b     .i...i...i..!j..
   ba92c:	69e1 000b 69b9 000b                         .i...i..

000ba934 <_ZTV11USARTSerial>:
	...
   ba93c:	6ac9 000b 6b35 000b 6b0d 000b 65d9 000b     .j..5k...k...e..
   ba94c:	6add 000b 6af9 000b 6aeb 000b 6b07 000b     .j...j...j...k..
   ba95c:	6acb 000b 6acf 000b                         .j...j..

000ba964 <_ZTV7TwoWire>:
	...
   ba96c:	6b6d 000b 6bb7 000b 6b8f 000b 6b6f 000b     mk...k...k..ok..
   ba97c:	6b97 000b 6b9f 000b 6ba7 000b 6baf 000b     .k...k...k...k..
   ba98c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   ba99c:	2072 203d 6425 0000                         r = %d..

000ba9a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba9ac:	6d05 000b 6d29 000b 7213 000b 6d37 000b     .m..)m...r..7m..
   ba9bc:	6d09 000b                                   .m..

000ba9c0 <_ZTV9TCPClient>:
	...
   ba9c8:	672d 000b 6745 000b 6c81 000b 6c9b 000b     -g..Eg...l...l..
   ba9d8:	70a9 000b 6cc5 000b 6f1f 000b 6cf9 000b     .p...l...o...l..
   ba9e8:	6fb1 000b 6df1 000b 6f4d 000b 715d 000b     .o...m..Mo..]q..
   ba9f8:	6eed 000b 6cfb 000b 6cad 000b 6d3d 000b     .n...l...l..=m..
   baa08:	6dd1 000b                                   .m..

000baa0c <_ZTVN5spark9WiFiClassE>:
	...
   baa14:	7277 000b 726d 000b 7263 000b 7219 000b     wr..mr..cr...r..
   baa24:	7257 000b 724b 000b 72d5 000b 72dd 000b     Wr..Kr...r...r..
   baa34:	723f 000b 7237 000b 722d 000b 7223 000b     ?r..7r..-r..#r..
   baa44:	730d 000b                                   .s..

000baa48 <_ZTVN5spark12NetworkClassE>:
	...
   baa50:	7295 000b 729f 000b 72a9 000b 72b3 000b     .r...r...r...r..
   baa60:	72bd 000b 72c9 000b 72d5 000b 72dd 000b     .r...r...r...r..
   baa70:	72e5 000b 72f1 000b 72f9 000b 7303 000b     .r...r...r...s..
   baa80:	730d 000b                                   .s..

000baa84 <_ZSt7nothrow>:
	...

000baa85 <_ZTSSt19_Sp_make_shared_tag>:
   baa85:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   baa95:	6572 5f64 6174 0067 0000                     red_tag....

000baaa0 <_ZTISt19_Sp_make_shared_tag>:
   baaa0:	aae0 000b aa85 000b                         ........

000baaa8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   baaa8:	ab40 000b aab4 000b ab64 000b               @.......d...

000baab4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   baab4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   baac4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   baad4:	0045 0000                                   E...

000baad8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   baad8:	0000 0000 aaa8 000b 7681 000b 7695 000b     .........v...v..
   baae8:	7829 000b 7829 000b 76ff 000b 7641 000b     )x..)x...v..Av..
   baaf8:	76e7 000b 76a9 000b 7673 000b               .v...v..sv..

000bab04 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bab04:	ab40 000b ab10 000b aaa8 000b               @...........

000bab10 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bab10:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bab20:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bab30:	666e 456f 0000 0000                         nfoE....

000bab38 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bab38:	0000 0000 ab04 000b 7729 000b 773d 000b     ........)w..=w..
   bab48:	7829 000b 7829 000b 76ff 000b 7641 000b     )x..)x...v..Av..
   bab58:	77fd 000b 7789 000b 7751 000b               .w...w..Qw..

000bab64 <_ZTISt9type_info>:
   bab64:	aae0 000b ab6c 000b                         ....l...

000bab6c <_ZTSSt9type_info>:
   bab6c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bab7c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bab8c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bab9c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   babac:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   babbc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   babcc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   babdc:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   babec:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   babfc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bac0c:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bac1c <fpi.1>:
   bac1c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bac2c:	0000 0000                                   ....

000bac30 <fpinan.0>:
   bac30:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bac48 <tinytens>:
   bac48:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bac58:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bac68:	6f43 64ac 0628 1168                         Co.d(.h.

000bac70 <_ctype_>:
   bac70:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bac80:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bac90:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   baca0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bacb0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bacc0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bacd0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bace0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bacf0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bad70:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bad80:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bad90:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bada0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   badb0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   badc0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   badd0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bade0:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   badf0:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bae00:	6874 7865 632e 0000                         thex.c..

000bae08 <_C_numeric_locale>:
   bae08:	a169 000b a16d 000b e378 2003 0043 4f50     i...m...x.. C.PO
   bae18:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bae28:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bae38:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bae48:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bae58:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bae68:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bae78:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bae88:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bae98:	0063 0000 0000 0000                         c.......

000baea0 <__mprec_bigtens>:
   baea0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   baeb0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   baec0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000baec8 <__mprec_tens>:
   baec8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   baed8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   baee8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   baef8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   baf08:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   baf18:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   baf28:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   baf38:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   baf48:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   baf58:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   baf68:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   baf78:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   baf88:	9db4 79d9 7843 44ea                         ...yCx.D

000baf90 <p05.0>:
   baf90:	0005 0000 0019 0000 007d 0000               ........}...

000baf9c <link_const_variable_data_end>:
   baf9c:	000b430d 	.word	0x000b430d
   bafa0:	000b6305 	.word	0x000b6305
   bafa4:	000b657d 	.word	0x000b657d
   bafa8:	000b65c9 	.word	0x000b65c9
   bafac:	000b6701 	.word	0x000b6701
   bafb0:	000b6711 	.word	0x000b6711
   bafb4:	000b6759 	.word	0x000b6759
   bafb8:	000b7281 	.word	0x000b7281
   bafbc:	000b73e5 	.word	0x000b73e5
