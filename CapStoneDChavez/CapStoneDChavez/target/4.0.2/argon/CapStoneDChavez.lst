
c:/Users/daniu/Documents/iot/CapStoneDChavez/CapStoneDChavez/CapStoneDChavez/target/4.0.2/argon/CapStoneDChavez.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000014b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b54d0  000b54d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b54f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e620  000b54f8  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  2003e68c  2003e68c  0002e68c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5564  000b5564  00025564  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b558c  000b558c  0002558c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000eef5e  00000000  00000000  00025590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000fe8f  00000000  00000000  001144ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003092e  00000000  00000000  0012437d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000025f0  00000000  00000000  00154cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00008f00  00000000  00000000  0015729b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b3a  00000000  00000000  0016019b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00036a6f  00000000  00000000  00197cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013064c  00000000  00000000  001ce744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000067e4  00000000  00000000  002fed90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 f877 	bl	b5120 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 f87f 	bl	b513c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e620 	.word	0x2003e620
   b4048:	000b54f8 	.word	0x000b54f8
   b404c:	2003e68c 	.word	0x2003e68c
   b4050:	2003e68c 	.word	0x2003e68c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fca7 	bl	b49b0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b54a0 	.word	0x000b54a0
   b407c:	000b54c4 	.word	0x000b54c4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b814 	b.w	b40ac <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f835 	bl	b40f4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bc47 	b.w	b4920 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 bb3b 	b.w	b470c <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bb41 	b.w	b471c <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr
	...

000b40ac <setup>:

// setup() runs once, when the device is first turned on.
#include "math.h"
#include "Stepper.h"
Stepper myStepper(2048, D8, D7, D6, D5);
void setup() {
   b40ac:	b508      	push	{r3, lr}
myStepper.setSpeed(15);
   b40ae:	210f      	movs	r1, #15
   b40b0:	480f      	ldr	r0, [pc, #60]	; (b40f0 <setup+0x44>)
   b40b2:	f000 f86d 	bl	b4190 <_ZN7Stepper8setSpeedEl>
Wire.begin();
   b40b6:	f001 f807 	bl	b50c8 <_Z19__fetch_global_Wirev>
   b40ba:	f000 fe3f 	bl	b4d3c <_ZN7TwoWire5beginEv>
Wire.beginTransmission(0x68);
   b40be:	f001 f803 	bl	b50c8 <_Z19__fetch_global_Wirev>
   b40c2:	2168      	movs	r1, #104	; 0x68
   b40c4:	f000 fe44 	bl	b4d50 <_ZN7TwoWire17beginTransmissionEi>
Wire.write(0x6B);
   b40c8:	f000 fffe 	bl	b50c8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	216b      	movs	r1, #107	; 0x6b
   b40d0:	689b      	ldr	r3, [r3, #8]
   b40d2:	4798      	blx	r3
Wire.write(0x00);
   b40d4:	f000 fff8 	bl	b50c8 <_Z19__fetch_global_Wirev>
   b40d8:	6803      	ldr	r3, [r0, #0]
   b40da:	2100      	movs	r1, #0
   b40dc:	689b      	ldr	r3, [r3, #8]
   b40de:	4798      	blx	r3
Wire.endTransmission(true);
   b40e0:	f000 fff2 	bl	b50c8 <_Z19__fetch_global_Wirev>
// Put initialization like pinMode and begin functions here.
}
   b40e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Wire.endTransmission(true);
   b40e8:	2101      	movs	r1, #1
   b40ea:	f000 be34 	b.w	b4d56 <_ZN7TwoWire15endTransmissionEh>
   b40ee:	bf00      	nop
   b40f0:	2003e68c 	.word	0x2003e68c

000b40f4 <loop>:
// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b40f4:	b510      	push	{r4, lr}
myStepper.step(4096);
   b40f6:	4c0a      	ldr	r4, [pc, #40]	; (b4120 <loop+0x2c>)
   b40f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   b40fc:	4620      	mov	r0, r4
   b40fe:	f000 f919 	bl	b4334 <_ZN7Stepper4stepEi>
delay(500);
   b4102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4106:	f000 fbdf 	bl	b48c8 <delay>
myStepper.step(-2048);
   b410a:	4620      	mov	r0, r4
   b410c:	4905      	ldr	r1, [pc, #20]	; (b4124 <loop+0x30>)
   b410e:	f000 f911 	bl	b4334 <_ZN7Stepper4stepEi>
delay(500);
}
   b4112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
delay(500);
   b4116:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b411a:	f000 bbd5 	b.w	b48c8 <delay>
   b411e:	bf00      	nop
   b4120:	2003e68c 	.word	0x2003e68c
   b4124:	fffff800 	.word	0xfffff800

000b4128 <_GLOBAL__sub_I_myStepper>:
}
   b4128:	b507      	push	{r0, r1, r2, lr}
Stepper myStepper(2048, D8, D7, D6, D5);
   b412a:	2306      	movs	r3, #6
   b412c:	2205      	movs	r2, #5
   b412e:	e9cd 3200 	strd	r3, r2, [sp]
   b4132:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b4136:	2307      	movs	r3, #7
   b4138:	2208      	movs	r2, #8
   b413a:	4803      	ldr	r0, [pc, #12]	; (b4148 <_GLOBAL__sub_I_myStepper+0x20>)
   b413c:	f000 f806 	bl	b414c <_ZN7StepperC1Eiiiii>
}
   b4140:	b003      	add	sp, #12
   b4142:	f85d fb04 	ldr.w	pc, [sp], #4
   b4146:	bf00      	nop
   b4148:	2003e68c 	.word	0x2003e68c

000b414c <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b414c:	b538      	push	{r3, r4, r5, lr}
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
   b414e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  this->motor_pin_3 = motor_pin_3;
   b4152:	9b04      	ldr	r3, [sp, #16]
   b4154:	61c3      	str	r3, [r0, #28]
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b4156:	4604      	mov	r4, r0
  this->motor_pin_4 = motor_pin_4;
   b4158:	9b05      	ldr	r3, [sp, #20]
   b415a:	6203      	str	r3, [r0, #32]
  this->step_number = 0;    // which step the motor is on
   b415c:	2500      	movs	r5, #0
   b415e:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
   b4160:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
   b4162:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
   b4164:	6081      	str	r1, [r0, #8]

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
   b4166:	b290      	uxth	r0, r2
   b4168:	2101      	movs	r1, #1
   b416a:	f000 ff27 	bl	b4fbc <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
   b416e:	8b20      	ldrh	r0, [r4, #24]
   b4170:	2101      	movs	r1, #1
   b4172:	f000 ff23 	bl	b4fbc <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
   b4176:	8ba0      	ldrh	r0, [r4, #28]
   b4178:	2101      	movs	r1, #1
   b417a:	f000 ff1f 	bl	b4fbc <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
   b417e:	8c20      	ldrh	r0, [r4, #32]
   b4180:	2101      	movs	r1, #1
   b4182:	f000 ff1b 	bl	b4fbc <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
   b4186:	2304      	movs	r3, #4
  this->motor_pin_5 = 0;
   b4188:	6265      	str	r5, [r4, #36]	; 0x24
  this->pin_count = 4;
   b418a:	60e3      	str	r3, [r4, #12]
}
   b418c:	4620      	mov	r0, r4
   b418e:	bd38      	pop	{r3, r4, r5, pc}

000b4190 <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
   b4190:	6882      	ldr	r2, [r0, #8]
   b4192:	4b03      	ldr	r3, [pc, #12]	; (b41a0 <_ZN7Stepper8setSpeedEl+0x10>)
   b4194:	fb93 f3f2 	sdiv	r3, r3, r2
   b4198:	fb93 f1f1 	sdiv	r1, r3, r1
   b419c:	6041      	str	r1, [r0, #4]
}
   b419e:	4770      	bx	lr
   b41a0:	03938700 	.word	0x03938700

000b41a4 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
   b41a4:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
   b41a6:	68c3      	ldr	r3, [r0, #12]
   b41a8:	2b02      	cmp	r3, #2
{
   b41aa:	4604      	mov	r4, r0
   b41ac:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
   b41ae:	d10d      	bne.n	b41cc <_ZN7Stepper9stepMotorEi+0x28>
    switch (thisStep) {
   b41b0:	2903      	cmp	r1, #3
   b41b2:	d80b      	bhi.n	b41cc <_ZN7Stepper9stepMotorEi+0x28>
   b41b4:	e8df f001 	tbb	[pc, r1]
   b41b8:	1b151302 	.word	0x1b151302
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
   b41bc:	2100      	movs	r1, #0
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
   b41be:	8aa0      	ldrh	r0, [r4, #20]
   b41c0:	f000 ff0d 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b41c4:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b41c6:	8b20      	ldrh	r0, [r4, #24]
   b41c8:	f000 ff09 	bl	b4fde <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
   b41cc:	68e3      	ldr	r3, [r4, #12]
   b41ce:	2b04      	cmp	r3, #4
   b41d0:	d11f      	bne.n	b4212 <_ZN7Stepper9stepMotorEi+0x6e>
    switch (thisStep) {
   b41d2:	2d03      	cmp	r5, #3
   b41d4:	d81d      	bhi.n	b4212 <_ZN7Stepper9stepMotorEi+0x6e>
   b41d6:	e8df f005 	tbb	[pc, r5]
   b41da:	2a0c      	.short	0x2a0c
   b41dc:	3e30      	.short	0x3e30
        digitalWrite(motor_pin_1, HIGH);
   b41de:	2101      	movs	r1, #1
   b41e0:	e7ed      	b.n	b41be <_ZN7Stepper9stepMotorEi+0x1a>
        digitalWrite(motor_pin_1, HIGH);
   b41e2:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b41e4:	8aa0      	ldrh	r0, [r4, #20]
   b41e6:	f000 fefa 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b41ea:	2100      	movs	r1, #0
   b41ec:	e7eb      	b.n	b41c6 <_ZN7Stepper9stepMotorEi+0x22>
        digitalWrite(motor_pin_1, LOW);
   b41ee:	2100      	movs	r1, #0
   b41f0:	e7f8      	b.n	b41e4 <_ZN7Stepper9stepMotorEi+0x40>
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
   b41f2:	2101      	movs	r1, #1
   b41f4:	8aa0      	ldrh	r0, [r4, #20]
   b41f6:	f000 fef2 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b41fa:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, HIGH);
   b41fc:	8b20      	ldrh	r0, [r4, #24]
   b41fe:	f000 feee 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4202:	2101      	movs	r1, #1
   b4204:	8ba0      	ldrh	r0, [r4, #28]
   b4206:	f000 feea 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b420a:	2100      	movs	r1, #0
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
   b420c:	8c20      	ldrh	r0, [r4, #32]
   b420e:	f000 fee6 	bl	b4fde <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
   b4212:	68e3      	ldr	r3, [r4, #12]
   b4214:	2b05      	cmp	r3, #5
   b4216:	f040 808c 	bne.w	b4332 <_ZN7Stepper9stepMotorEi+0x18e>
    switch (thisStep) {
   b421a:	2d09      	cmp	r5, #9
   b421c:	f200 8089 	bhi.w	b4332 <_ZN7Stepper9stepMotorEi+0x18e>
   b4220:	e8df f005 	tbb	[pc, r5]
   b4224:	4937291f 	.word	0x4937291f
   b4228:	7167615f 	.word	0x7167615f
   b422c:	857f      	.short	0x857f
        digitalWrite(motor_pin_1, LOW);
   b422e:	2100      	movs	r1, #0
   b4230:	8aa0      	ldrh	r0, [r4, #20]
   b4232:	f000 fed4 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4236:	2101      	movs	r1, #1
   b4238:	e7e0      	b.n	b41fc <_ZN7Stepper9stepMotorEi+0x58>
        digitalWrite(motor_pin_1, LOW);
   b423a:	2100      	movs	r1, #0
   b423c:	8aa0      	ldrh	r0, [r4, #20]
   b423e:	f000 fece 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4242:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b4244:	8b20      	ldrh	r0, [r4, #24]
   b4246:	f000 feca 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b424a:	2100      	movs	r1, #0
   b424c:	8ba0      	ldrh	r0, [r4, #28]
   b424e:	f000 fec6 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4252:	2101      	movs	r1, #1
   b4254:	e7da      	b.n	b420c <_ZN7Stepper9stepMotorEi+0x68>
        digitalWrite(motor_pin_1, HIGH);
   b4256:	2101      	movs	r1, #1
   b4258:	8aa0      	ldrh	r0, [r4, #20]
   b425a:	f000 fec0 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b425e:	2100      	movs	r1, #0
   b4260:	e7f0      	b.n	b4244 <_ZN7Stepper9stepMotorEi+0xa0>
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
   b4262:	2100      	movs	r1, #0
   b4264:	8aa0      	ldrh	r0, [r4, #20]
   b4266:	f000 feba 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b426a:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b426c:	8b20      	ldrh	r0, [r4, #24]
   b426e:	f000 feb6 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4272:	2101      	movs	r1, #1
   b4274:	e008      	b.n	b4288 <_ZN7Stepper9stepMotorEi+0xe4>
        digitalWrite(motor_pin_1, LOW);
   b4276:	8aa0      	ldrh	r0, [r4, #20]
   b4278:	2100      	movs	r1, #0
   b427a:	f000 feb0 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b427e:	2101      	movs	r1, #1
   b4280:	8b20      	ldrh	r0, [r4, #24]
   b4282:	f000 feac 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4286:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b4288:	8ba0      	ldrh	r0, [r4, #28]
   b428a:	f000 fea8 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b428e:	2100      	movs	r1, #0
   b4290:	e00c      	b.n	b42ac <_ZN7Stepper9stepMotorEi+0x108>
        digitalWrite(motor_pin_1, LOW);
   b4292:	8aa0      	ldrh	r0, [r4, #20]
   b4294:	2100      	movs	r1, #0
   b4296:	f000 fea2 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b429a:	8b20      	ldrh	r0, [r4, #24]
   b429c:	2101      	movs	r1, #1
   b429e:	f000 fe9e 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b42a2:	2100      	movs	r1, #0
   b42a4:	8ba0      	ldrh	r0, [r4, #28]
   b42a6:	f000 fe9a 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b42aa:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b42ac:	8c20      	ldrh	r0, [r4, #32]
   b42ae:	f000 fe96 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
   b42b2:	2101      	movs	r1, #1
   b42b4:	e010      	b.n	b42d8 <_ZN7Stepper9stepMotorEi+0x134>
        digitalWrite(motor_pin_1, LOW);
   b42b6:	2100      	movs	r1, #0
        digitalWrite(motor_pin_1, HIGH);
   b42b8:	8aa0      	ldrh	r0, [r4, #20]
   b42ba:	f000 fe90 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b42be:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b42c0:	8b20      	ldrh	r0, [r4, #24]
   b42c2:	f000 fe8c 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b42c6:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b42c8:	8ba0      	ldrh	r0, [r4, #28]
   b42ca:	f000 fe88 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b42ce:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b42d0:	8c20      	ldrh	r0, [r4, #32]
   b42d2:	f000 fe84 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
   b42d6:	2100      	movs	r1, #0
        digitalWrite(motor_pin_5, HIGH);
   b42d8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
   b42da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(motor_pin_5, HIGH);
   b42de:	f000 be7e 	b.w	b4fde <digitalWrite>
        digitalWrite(motor_pin_1, HIGH);
   b42e2:	2101      	movs	r1, #1
   b42e4:	e7e8      	b.n	b42b8 <_ZN7Stepper9stepMotorEi+0x114>
        digitalWrite(motor_pin_1, HIGH);
   b42e6:	2101      	movs	r1, #1
   b42e8:	8aa0      	ldrh	r0, [r4, #20]
   b42ea:	f000 fe78 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b42ee:	2100      	movs	r1, #0
   b42f0:	e7e6      	b.n	b42c0 <_ZN7Stepper9stepMotorEi+0x11c>
        digitalWrite(motor_pin_1, HIGH);
   b42f2:	8aa0      	ldrh	r0, [r4, #20]
   b42f4:	2101      	movs	r1, #1
   b42f6:	f000 fe72 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b42fa:	2100      	movs	r1, #0
   b42fc:	8b20      	ldrh	r0, [r4, #24]
   b42fe:	f000 fe6e 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4302:	2101      	movs	r1, #1
   b4304:	e7e0      	b.n	b42c8 <_ZN7Stepper9stepMotorEi+0x124>
        digitalWrite(motor_pin_1, HIGH);
   b4306:	8aa0      	ldrh	r0, [r4, #20]
   b4308:	2101      	movs	r1, #1
   b430a:	f000 fe68 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b430e:	8b20      	ldrh	r0, [r4, #24]
   b4310:	2100      	movs	r1, #0
   b4312:	f000 fe64 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4316:	2101      	movs	r1, #1
   b4318:	8ba0      	ldrh	r0, [r4, #28]
   b431a:	f000 fe60 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b431e:	2100      	movs	r1, #0
   b4320:	e7d6      	b.n	b42d0 <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_1, HIGH);
   b4322:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4324:	8aa0      	ldrh	r0, [r4, #20]
   b4326:	f000 fe5a 	bl	b4fde <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b432a:	2100      	movs	r1, #0
   b432c:	e79e      	b.n	b426c <_ZN7Stepper9stepMotorEi+0xc8>
        digitalWrite(motor_pin_1, LOW);
   b432e:	2100      	movs	r1, #0
   b4330:	e7f8      	b.n	b4324 <_ZN7Stepper9stepMotorEi+0x180>
}
   b4332:	bd38      	pop	{r3, r4, r5, pc}

000b4334 <_ZN7Stepper4stepEi>:
{
   b4334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (steps_to_move > 0) { this->direction = 1; }
   b4336:	2900      	cmp	r1, #0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b4338:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
{
   b433c:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b433e:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
  if (steps_to_move > 0) { this->direction = 1; }
   b4342:	dd24      	ble.n	b438e <_ZN7Stepper4stepEi+0x5a>
   b4344:	2301      	movs	r3, #1
   b4346:	6023      	str	r3, [r4, #0]
          this->step_number = 0;
   b4348:	2700      	movs	r7, #0
        stepMotor(this->step_number % 10);
   b434a:	260a      	movs	r6, #10
  while (steps_left > 0)
   b434c:	b385      	cbz	r5, b43b0 <_ZN7Stepper4stepEi+0x7c>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b434e:	f000 f861 	bl	b4414 <HAL_Timer_Get_Micro_Seconds>
    if (now - this->last_step_time >= this->step_delay)
   b4352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4354:	6862      	ldr	r2, [r4, #4]
   b4356:	1ac3      	subs	r3, r0, r3
   b4358:	4293      	cmp	r3, r2
   b435a:	d3f7      	bcc.n	b434c <_ZN7Stepper4stepEi+0x18>
      if (this->direction == 1)
   b435c:	6822      	ldr	r2, [r4, #0]
        this->step_number++;
   b435e:	6923      	ldr	r3, [r4, #16]
      this->last_step_time = now;
   b4360:	62a0      	str	r0, [r4, #40]	; 0x28
      if (this->direction == 1)
   b4362:	2a01      	cmp	r2, #1
   b4364:	d116      	bne.n	b4394 <_ZN7Stepper4stepEi+0x60>
        if (this->step_number == this->number_of_steps) {
   b4366:	68a2      	ldr	r2, [r4, #8]
        this->step_number++;
   b4368:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
   b436a:	4293      	cmp	r3, r2
          this->step_number = 0;
   b436c:	bf08      	it	eq
   b436e:	463b      	moveq	r3, r7
        this->step_number--;
   b4370:	6123      	str	r3, [r4, #16]
      if (this->pin_count == 5)
   b4372:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
   b4376:	2b05      	cmp	r3, #5
      steps_left--;
   b4378:	f105 35ff 	add.w	r5, r5, #4294967295
      if (this->pin_count == 5)
   b437c:	d110      	bne.n	b43a0 <_ZN7Stepper4stepEi+0x6c>
        stepMotor(this->step_number % 10);
   b437e:	fb91 f3f6 	sdiv	r3, r1, r6
   b4382:	fb06 1113 	mls	r1, r6, r3, r1
        stepMotor(this->step_number % 4);
   b4386:	4620      	mov	r0, r4
   b4388:	f7ff ff0c 	bl	b41a4 <_ZN7Stepper9stepMotorEi>
   b438c:	e7de      	b.n	b434c <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
   b438e:	d0db      	beq.n	b4348 <_ZN7Stepper4stepEi+0x14>
   b4390:	2300      	movs	r3, #0
   b4392:	e7d8      	b.n	b4346 <_ZN7Stepper4stepEi+0x12>
        if (this->step_number == 0) {
   b4394:	b90b      	cbnz	r3, b439a <_ZN7Stepper4stepEi+0x66>
          this->step_number = this->number_of_steps;
   b4396:	68a3      	ldr	r3, [r4, #8]
   b4398:	6123      	str	r3, [r4, #16]
        this->step_number--;
   b439a:	6923      	ldr	r3, [r4, #16]
   b439c:	3b01      	subs	r3, #1
   b439e:	e7e7      	b.n	b4370 <_ZN7Stepper4stepEi+0x3c>
        stepMotor(this->step_number % 4);
   b43a0:	424b      	negs	r3, r1
   b43a2:	f003 0303 	and.w	r3, r3, #3
   b43a6:	f001 0103 	and.w	r1, r1, #3
   b43aa:	bf58      	it	pl
   b43ac:	4259      	negpl	r1, r3
   b43ae:	e7ea      	b.n	b4386 <_ZN7Stepper4stepEi+0x52>
}
   b43b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b43b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b43b4:	b508      	push	{r3, lr}
   b43b6:	4b02      	ldr	r3, [pc, #8]	; (b43c0 <netdb_freeaddrinfo+0xc>)
   b43b8:	681b      	ldr	r3, [r3, #0]
   b43ba:	689b      	ldr	r3, [r3, #8]
   b43bc:	9301      	str	r3, [sp, #4]
   b43be:	bd08      	pop	{r3, pc}
   b43c0:	00030268 	.word	0x00030268

000b43c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b43c4:	b508      	push	{r3, lr}
   b43c6:	4b02      	ldr	r3, [pc, #8]	; (b43d0 <netdb_getaddrinfo+0xc>)
   b43c8:	681b      	ldr	r3, [r3, #0]
   b43ca:	68db      	ldr	r3, [r3, #12]
   b43cc:	9301      	str	r3, [sp, #4]
   b43ce:	bd08      	pop	{r3, pc}
   b43d0:	00030268 	.word	0x00030268

000b43d4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b43d4:	b508      	push	{r3, lr}
   b43d6:	4b02      	ldr	r3, [pc, #8]	; (b43e0 <HAL_Pin_Mode+0xc>)
   b43d8:	681b      	ldr	r3, [r3, #0]
   b43da:	689b      	ldr	r3, [r3, #8]
   b43dc:	9301      	str	r3, [sp, #4]
   b43de:	bd08      	pop	{r3, pc}
   b43e0:	0003022c 	.word	0x0003022c

000b43e4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b43e4:	b508      	push	{r3, lr}
   b43e6:	4b02      	ldr	r3, [pc, #8]	; (b43f0 <HAL_Get_Pin_Mode+0xc>)
   b43e8:	681b      	ldr	r3, [r3, #0]
   b43ea:	68db      	ldr	r3, [r3, #12]
   b43ec:	9301      	str	r3, [sp, #4]
   b43ee:	bd08      	pop	{r3, pc}
   b43f0:	0003022c 	.word	0x0003022c

000b43f4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b43f4:	b508      	push	{r3, lr}
   b43f6:	4b02      	ldr	r3, [pc, #8]	; (b4400 <HAL_GPIO_Write+0xc>)
   b43f8:	681b      	ldr	r3, [r3, #0]
   b43fa:	691b      	ldr	r3, [r3, #16]
   b43fc:	9301      	str	r3, [sp, #4]
   b43fe:	bd08      	pop	{r3, pc}
   b4400:	0003022c 	.word	0x0003022c

000b4404 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4404:	b508      	push	{r3, lr}
   b4406:	4b02      	ldr	r3, [pc, #8]	; (b4410 <HAL_RNG_GetRandomNumber+0xc>)
   b4408:	681b      	ldr	r3, [r3, #0]
   b440a:	685b      	ldr	r3, [r3, #4]
   b440c:	9301      	str	r3, [sp, #4]
   b440e:	bd08      	pop	{r3, pc}
   b4410:	00030218 	.word	0x00030218

000b4414 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4414:	b508      	push	{r3, lr}
   b4416:	4b02      	ldr	r3, [pc, #8]	; (b4420 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b4418:	681b      	ldr	r3, [r3, #0]
   b441a:	691b      	ldr	r3, [r3, #16]
   b441c:	9301      	str	r3, [sp, #4]
   b441e:	bd08      	pop	{r3, pc}
   b4420:	00030218 	.word	0x00030218

000b4424 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4424:	b508      	push	{r3, lr}
   b4426:	4b02      	ldr	r3, [pc, #8]	; (b4430 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4428:	681b      	ldr	r3, [r3, #0]
   b442a:	695b      	ldr	r3, [r3, #20]
   b442c:	9301      	str	r3, [sp, #4]
   b442e:	bd08      	pop	{r3, pc}
   b4430:	00030218 	.word	0x00030218

000b4434 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4434:	b508      	push	{r3, lr}
   b4436:	4b02      	ldr	r3, [pc, #8]	; (b4440 <os_mutex_recursive_create+0xc>)
   b4438:	681b      	ldr	r3, [r3, #0]
   b443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b443c:	9301      	str	r3, [sp, #4]
   b443e:	bd08      	pop	{r3, pc}
   b4440:	00030248 	.word	0x00030248

000b4444 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <inet_inet_ntop+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	695b      	ldr	r3, [r3, #20]
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	00030264 	.word	0x00030264

000b4454 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <hal_usart_write+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	68db      	ldr	r3, [r3, #12]
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	0003023c 	.word	0x0003023c

000b4464 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b02      	ldr	r3, [pc, #8]	; (b4470 <hal_usart_available+0xc>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	691b      	ldr	r3, [r3, #16]
   b446c:	9301      	str	r3, [sp, #4]
   b446e:	bd08      	pop	{r3, pc}
   b4470:	0003023c 	.word	0x0003023c

000b4474 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4474:	b508      	push	{r3, lr}
   b4476:	4b02      	ldr	r3, [pc, #8]	; (b4480 <hal_usart_read+0xc>)
   b4478:	681b      	ldr	r3, [r3, #0]
   b447a:	695b      	ldr	r3, [r3, #20]
   b447c:	9301      	str	r3, [sp, #4]
   b447e:	bd08      	pop	{r3, pc}
   b4480:	0003023c 	.word	0x0003023c

000b4484 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <hal_usart_peek+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	699b      	ldr	r3, [r3, #24]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	0003023c 	.word	0x0003023c

000b4494 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b02      	ldr	r3, [pc, #8]	; (b44a0 <hal_usart_flush+0xc>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	69db      	ldr	r3, [r3, #28]
   b449c:	9301      	str	r3, [sp, #4]
   b449e:	bd08      	pop	{r3, pc}
   b44a0:	0003023c 	.word	0x0003023c

000b44a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b02      	ldr	r3, [pc, #8]	; (b44b0 <hal_usart_is_enabled+0xc>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	6a1b      	ldr	r3, [r3, #32]
   b44ac:	9301      	str	r3, [sp, #4]
   b44ae:	bd08      	pop	{r3, pc}
   b44b0:	0003023c 	.word	0x0003023c

000b44b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b02      	ldr	r3, [pc, #8]	; (b44c0 <hal_usart_available_data_for_write+0xc>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b44bc:	9301      	str	r3, [sp, #4]
   b44be:	bd08      	pop	{r3, pc}
   b44c0:	0003023c 	.word	0x0003023c

000b44c4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b44c4:	b508      	push	{r3, lr}
   b44c6:	4b02      	ldr	r3, [pc, #8]	; (b44d0 <hal_usart_init_ex+0xc>)
   b44c8:	681b      	ldr	r3, [r3, #0]
   b44ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44cc:	9301      	str	r3, [sp, #4]
   b44ce:	bd08      	pop	{r3, pc}
   b44d0:	0003023c 	.word	0x0003023c

000b44d4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <hal_i2c_begin+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	68db      	ldr	r3, [r3, #12]
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	00030228 	.word	0x00030228

000b44e4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b02      	ldr	r3, [pc, #8]	; (b44f0 <hal_i2c_begin_transmission+0xc>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	699b      	ldr	r3, [r3, #24]
   b44ec:	9301      	str	r3, [sp, #4]
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	00030228 	.word	0x00030228

000b44f4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <hal_i2c_end_transmission+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	69db      	ldr	r3, [r3, #28]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	00030228 	.word	0x00030228

000b4504 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <hal_i2c_write+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	6a1b      	ldr	r3, [r3, #32]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	00030228 	.word	0x00030228

000b4514 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <hal_i2c_available+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	00030228 	.word	0x00030228

000b4524 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <hal_i2c_read+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	00030228 	.word	0x00030228

000b4534 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <hal_i2c_peek+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	00030228 	.word	0x00030228

000b4544 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <hal_i2c_flush+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030228 	.word	0x00030228

000b4554 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <hal_i2c_is_enabled+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	00030228 	.word	0x00030228

000b4564 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <hal_i2c_init+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	00030228 	.word	0x00030228

000b4574 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <hal_spi_init+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	69db      	ldr	r3, [r3, #28]
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	00030230 	.word	0x00030230

000b4584 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <hal_spi_is_enabled+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	6a1b      	ldr	r3, [r3, #32]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	00030230 	.word	0x00030230

000b4594 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <HAL_USB_USART_Init+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	681b      	ldr	r3, [r3, #0]
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	0003024c 	.word	0x0003024c

000b45a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <HAL_USB_USART_Available_Data+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	691b      	ldr	r3, [r3, #16]
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	0003024c 	.word	0x0003024c

000b45b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	695b      	ldr	r3, [r3, #20]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	0003024c 	.word	0x0003024c

000b45c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <HAL_USB_USART_Receive_Data+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	699b      	ldr	r3, [r3, #24]
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	0003024c 	.word	0x0003024c

000b45d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <HAL_USB_USART_Send_Data+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	69db      	ldr	r3, [r3, #28]
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	0003024c 	.word	0x0003024c

000b45e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <HAL_USB_USART_Flush_Data+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	6a1b      	ldr	r3, [r3, #32]
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	0003024c 	.word	0x0003024c

000b45f4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <set_system_mode+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	685b      	ldr	r3, [r3, #4]
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	00030220 	.word	0x00030220

000b4604 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <system_delay_ms+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	695b      	ldr	r3, [r3, #20]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030220 	.word	0x00030220

000b4614 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b03      	ldr	r3, [pc, #12]	; (b4624 <system_ctrl_set_app_request_handler+0x10>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b461e:	9301      	str	r3, [sp, #4]
   b4620:	bd08      	pop	{r3, pc}
   b4622:	0000      	.short	0x0000
   b4624:	00030220 	.word	0x00030220

000b4628 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b03      	ldr	r3, [pc, #12]	; (b4638 <system_ctrl_set_result+0x10>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4632:	9301      	str	r3, [sp, #4]
   b4634:	bd08      	pop	{r3, pc}
   b4636:	0000      	.short	0x0000
   b4638:	00030220 	.word	0x00030220

000b463c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b463c:	b508      	push	{r3, lr}
   b463e:	4b02      	ldr	r3, [pc, #8]	; (b4648 <network_connect+0xc>)
   b4640:	681b      	ldr	r3, [r3, #0]
   b4642:	685b      	ldr	r3, [r3, #4]
   b4644:	9301      	str	r3, [sp, #4]
   b4646:	bd08      	pop	{r3, pc}
   b4648:	00030240 	.word	0x00030240

000b464c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b464c:	b508      	push	{r3, lr}
   b464e:	4b02      	ldr	r3, [pc, #8]	; (b4658 <network_connecting+0xc>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	689b      	ldr	r3, [r3, #8]
   b4654:	9301      	str	r3, [sp, #4]
   b4656:	bd08      	pop	{r3, pc}
   b4658:	00030240 	.word	0x00030240

000b465c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <network_disconnect+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	68db      	ldr	r3, [r3, #12]
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	00030240 	.word	0x00030240

000b466c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <network_ready+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	691b      	ldr	r3, [r3, #16]
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	00030240 	.word	0x00030240

000b467c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b02      	ldr	r3, [pc, #8]	; (b4688 <network_on+0xc>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	695b      	ldr	r3, [r3, #20]
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	bd08      	pop	{r3, pc}
   b4688:	00030240 	.word	0x00030240

000b468c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b02      	ldr	r3, [pc, #8]	; (b4698 <network_off+0xc>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	699b      	ldr	r3, [r3, #24]
   b4694:	9301      	str	r3, [sp, #4]
   b4696:	bd08      	pop	{r3, pc}
   b4698:	00030240 	.word	0x00030240

000b469c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b469c:	b508      	push	{r3, lr}
   b469e:	4b02      	ldr	r3, [pc, #8]	; (b46a8 <network_listen+0xc>)
   b46a0:	681b      	ldr	r3, [r3, #0]
   b46a2:	69db      	ldr	r3, [r3, #28]
   b46a4:	9301      	str	r3, [sp, #4]
   b46a6:	bd08      	pop	{r3, pc}
   b46a8:	00030240 	.word	0x00030240

000b46ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b46ac:	b508      	push	{r3, lr}
   b46ae:	4b02      	ldr	r3, [pc, #8]	; (b46b8 <network_listening+0xc>)
   b46b0:	681b      	ldr	r3, [r3, #0]
   b46b2:	6a1b      	ldr	r3, [r3, #32]
   b46b4:	9301      	str	r3, [sp, #4]
   b46b6:	bd08      	pop	{r3, pc}
   b46b8:	00030240 	.word	0x00030240

000b46bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b46bc:	b508      	push	{r3, lr}
   b46be:	4b02      	ldr	r3, [pc, #8]	; (b46c8 <network_set_listen_timeout+0xc>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46c4:	9301      	str	r3, [sp, #4]
   b46c6:	bd08      	pop	{r3, pc}
   b46c8:	00030240 	.word	0x00030240

000b46cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b46cc:	b508      	push	{r3, lr}
   b46ce:	4b02      	ldr	r3, [pc, #8]	; (b46d8 <network_get_listen_timeout+0xc>)
   b46d0:	681b      	ldr	r3, [r3, #0]
   b46d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46d4:	9301      	str	r3, [sp, #4]
   b46d6:	bd08      	pop	{r3, pc}
   b46d8:	00030240 	.word	0x00030240

000b46dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <network_is_on+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	00030240 	.word	0x00030240

000b46ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <network_is_off+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	00030240 	.word	0x00030240

000b46fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	00030244 	.word	0x00030244

000b470c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <malloc+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	681b      	ldr	r3, [r3, #0]
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	0003021c 	.word	0x0003021c

000b471c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <free+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	685b      	ldr	r3, [r3, #4]
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	0003021c 	.word	0x0003021c

000b472c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <__assert_func+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	0003021c 	.word	0x0003021c

000b473c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <newlib_impure_ptr_callback+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	0003021c 	.word	0x0003021c

000b474c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b474c:	2200      	movs	r2, #0
   b474e:	6840      	ldr	r0, [r0, #4]
   b4750:	4611      	mov	r1, r2
   b4752:	f7ff bfab 	b.w	b46ac <network_listening>

000b4756 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4756:	2200      	movs	r2, #0
   b4758:	6840      	ldr	r0, [r0, #4]
   b475a:	4611      	mov	r1, r2
   b475c:	f7ff bfb6 	b.w	b46cc <network_get_listen_timeout>

000b4760 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4760:	6840      	ldr	r0, [r0, #4]
   b4762:	2200      	movs	r2, #0
   b4764:	f7ff bfaa 	b.w	b46bc <network_set_listen_timeout>

000b4768 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4768:	6840      	ldr	r0, [r0, #4]
   b476a:	2200      	movs	r2, #0
   b476c:	f081 0101 	eor.w	r1, r1, #1
   b4770:	f7ff bf94 	b.w	b469c <network_listen>

000b4774 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4774:	2300      	movs	r3, #0
   b4776:	6840      	ldr	r0, [r0, #4]
   b4778:	461a      	mov	r2, r3
   b477a:	4619      	mov	r1, r3
   b477c:	f7ff bf86 	b.w	b468c <network_off>

000b4780 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4780:	2300      	movs	r3, #0
   b4782:	6840      	ldr	r0, [r0, #4]
   b4784:	461a      	mov	r2, r3
   b4786:	4619      	mov	r1, r3
   b4788:	f7ff bf78 	b.w	b467c <network_on>

000b478c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b478c:	2200      	movs	r2, #0
   b478e:	6840      	ldr	r0, [r0, #4]
   b4790:	4611      	mov	r1, r2
   b4792:	f7ff bf6b 	b.w	b466c <network_ready>

000b4796 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4796:	2200      	movs	r2, #0
   b4798:	6840      	ldr	r0, [r0, #4]
   b479a:	4611      	mov	r1, r2
   b479c:	f7ff bf56 	b.w	b464c <network_connecting>

000b47a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b47a0:	6840      	ldr	r0, [r0, #4]
   b47a2:	2200      	movs	r2, #0
   b47a4:	2102      	movs	r1, #2
   b47a6:	f7ff bf59 	b.w	b465c <network_disconnect>

000b47aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b47aa:	2300      	movs	r3, #0
   b47ac:	6840      	ldr	r0, [r0, #4]
   b47ae:	461a      	mov	r2, r3
   b47b0:	f7ff bf44 	b.w	b463c <network_connect>

000b47b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b47b4:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b47b6:	2203      	movs	r2, #3
   b47b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b47ba:	4a02      	ldr	r2, [pc, #8]	; (b47c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b47bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b47be:	4770      	bx	lr
   b47c0:	2003e6b8 	.word	0x2003e6b8
   b47c4:	000b52a0 	.word	0x000b52a0

000b47c8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b47c8:	b510      	push	{r4, lr}
   b47ca:	4604      	mov	r4, r0
   b47cc:	4608      	mov	r0, r1
{
    _spi = spi;
   b47ce:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b47d0:	f7ff fed0 	bl	b4574 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b47d4:	2300      	movs	r3, #0
   b47d6:	6063      	str	r3, [r4, #4]
}
   b47d8:	4620      	mov	r0, r4
   b47da:	bd10      	pop	{r4, pc}

000b47dc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b47dc:	4b05      	ldr	r3, [pc, #20]	; (b47f4 <_GLOBAL__sub_I_System+0x18>)
   b47de:	2202      	movs	r2, #2
   b47e0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b47e2:	4b05      	ldr	r3, [pc, #20]	; (b47f8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b47e4:	4a05      	ldr	r2, [pc, #20]	; (b47fc <_GLOBAL__sub_I_System+0x20>)
   b47e6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b47e8:	2000      	movs	r0, #0
   b47ea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b47ee:	f7ff bf01 	b.w	b45f4 <set_system_mode>
   b47f2:	bf00      	nop
   b47f4:	2003e6cc 	.word	0x2003e6cc
   b47f8:	2003e6c0 	.word	0x2003e6c0
   b47fc:	ffff0000 	.word	0xffff0000

000b4800 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4800:	4802      	ldr	r0, [pc, #8]	; (b480c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4802:	2300      	movs	r3, #0
   b4804:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4806:	f7ff be15 	b.w	b4434 <os_mutex_recursive_create>
   b480a:	bf00      	nop
   b480c:	2003e6d0 	.word	0x2003e6d0

000b4810 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4812:	4606      	mov	r6, r0
   b4814:	460d      	mov	r5, r1
  size_t n = 0;
   b4816:	188f      	adds	r7, r1, r2
   b4818:	2400      	movs	r4, #0
  while (size--) {
   b481a:	42bd      	cmp	r5, r7
   b481c:	d00c      	beq.n	b4838 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b481e:	6833      	ldr	r3, [r6, #0]
   b4820:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4824:	689b      	ldr	r3, [r3, #8]
   b4826:	4630      	mov	r0, r6
   b4828:	4798      	blx	r3
     if (chunk>=0)
   b482a:	1e03      	subs	r3, r0, #0
   b482c:	db01      	blt.n	b4832 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b482e:	441c      	add	r4, r3
  while (size--) {
   b4830:	e7f3      	b.n	b481a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4832:	2c00      	cmp	r4, #0
   b4834:	bf08      	it	eq
   b4836:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4838:	4620      	mov	r0, r4
   b483a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b483c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b483c:	b513      	push	{r0, r1, r4, lr}
   b483e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4840:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4842:	b159      	cbz	r1, b485c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4844:	9101      	str	r1, [sp, #4]
   b4846:	f000 fcaf 	bl	b51a8 <strlen>
   b484a:	6823      	ldr	r3, [r4, #0]
   b484c:	9901      	ldr	r1, [sp, #4]
   b484e:	68db      	ldr	r3, [r3, #12]
   b4850:	4602      	mov	r2, r0
   b4852:	4620      	mov	r0, r4
    }
   b4854:	b002      	add	sp, #8
   b4856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b485a:	4718      	bx	r3
    }
   b485c:	b002      	add	sp, #8
   b485e:	bd10      	pop	{r4, pc}

000b4860 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4860:	6803      	ldr	r3, [r0, #0]
   b4862:	689b      	ldr	r3, [r3, #8]
   b4864:	4718      	bx	r3

000b4866 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4866:	b530      	push	{r4, r5, lr}
   b4868:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b486a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b486c:	2a01      	cmp	r2, #1
  *str = '\0';
   b486e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4872:	bf98      	it	ls
   b4874:	220a      	movls	r2, #10
   b4876:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4878:	460d      	mov	r5, r1
   b487a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b487e:	fb01 5312 	mls	r3, r1, r2, r5
   b4882:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4886:	2b09      	cmp	r3, #9
   b4888:	bf94      	ite	ls
   b488a:	3330      	addls	r3, #48	; 0x30
   b488c:	3337      	addhi	r3, #55	; 0x37
   b488e:	b2db      	uxtb	r3, r3
  } while(n);
   b4890:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4892:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4896:	d9ef      	bls.n	b4878 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4898:	4621      	mov	r1, r4
   b489a:	f7ff ffcf 	bl	b483c <_ZN5Print5writeEPKc>
}
   b489e:	b00b      	add	sp, #44	; 0x2c
   b48a0:	bd30      	pop	{r4, r5, pc}
	...

000b48a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b48a4:	4b01      	ldr	r3, [pc, #4]	; (b48ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b48a6:	4a02      	ldr	r2, [pc, #8]	; (b48b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b48a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b48aa:	4770      	bx	lr
   b48ac:	2003e6d4 	.word	0x2003e6d4
   b48b0:	000b52d4 	.word	0x000b52d4

000b48b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b48b4:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b48b6:	681a      	ldr	r2, [r3, #0]
   b48b8:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b48ba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b48bc:	4770      	bx	lr
   b48be:	bf00      	nop
   b48c0:	2003e620 	.word	0x2003e620
   b48c4:	2003e6d8 	.word	0x2003e6d8

000b48c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b48c8:	2100      	movs	r1, #0
   b48ca:	f7ff be9b 	b.w	b4604 <system_delay_ms>
	...

000b48d0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b48d0:	4b01      	ldr	r3, [pc, #4]	; (b48d8 <_GLOBAL__sub_I_RGB+0x8>)
   b48d2:	2200      	movs	r2, #0
   b48d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b48d6:	4770      	bx	lr
   b48d8:	2003e6dc 	.word	0x2003e6dc

000b48dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b48dc:	4b01      	ldr	r3, [pc, #4]	; (b48e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b48de:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b48e0:	4770      	bx	lr
   b48e2:	bf00      	nop
   b48e4:	2003e624 	.word	0x2003e624

000b48e8 <serialEventRun>:
{
   b48e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b48ea:	4b0b      	ldr	r3, [pc, #44]	; (b4918 <serialEventRun+0x30>)
   b48ec:	b143      	cbz	r3, b4900 <serialEventRun+0x18>
   b48ee:	f000 f963 	bl	b4bb8 <_Z16_fetch_usbserialv>
   b48f2:	6803      	ldr	r3, [r0, #0]
   b48f4:	691b      	ldr	r3, [r3, #16]
   b48f6:	4798      	blx	r3
   b48f8:	2800      	cmp	r0, #0
   b48fa:	dd01      	ble.n	b4900 <serialEventRun+0x18>
        serialEvent();
   b48fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4900:	4b06      	ldr	r3, [pc, #24]	; (b491c <serialEventRun+0x34>)
   b4902:	b143      	cbz	r3, b4916 <serialEventRun+0x2e>
   b4904:	f000 fba0 	bl	b5048 <_Z22__fetch_global_Serial1v>
   b4908:	6803      	ldr	r3, [r0, #0]
   b490a:	691b      	ldr	r3, [r3, #16]
   b490c:	4798      	blx	r3
   b490e:	2800      	cmp	r0, #0
   b4910:	dd01      	ble.n	b4916 <serialEventRun+0x2e>
        serialEvent1();
   b4912:	f3af 8000 	nop.w
}
   b4916:	bd08      	pop	{r3, pc}
	...

000b4920 <_post_loop>:
{
   b4920:	b508      	push	{r3, lr}
	serialEventRun();
   b4922:	f7ff ffe1 	bl	b48e8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4926:	f7ff fd7d 	bl	b4424 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b492a:	4b01      	ldr	r3, [pc, #4]	; (b4930 <_post_loop+0x10>)
   b492c:	6018      	str	r0, [r3, #0]
}
   b492e:	bd08      	pop	{r3, pc}
   b4930:	2003e740 	.word	0x2003e740

000b4934 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4934:	4805      	ldr	r0, [pc, #20]	; (b494c <_Z33system_initialize_user_backup_ramv+0x18>)
   b4936:	4a06      	ldr	r2, [pc, #24]	; (b4950 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4938:	4906      	ldr	r1, [pc, #24]	; (b4954 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b493a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b493c:	1a12      	subs	r2, r2, r0
   b493e:	f000 fbef 	bl	b5120 <memcpy>
    __backup_sram_signature = signature;
   b4942:	4b05      	ldr	r3, [pc, #20]	; (b4958 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4944:	4a05      	ldr	r2, [pc, #20]	; (b495c <_Z33system_initialize_user_backup_ramv+0x28>)
   b4946:	601a      	str	r2, [r3, #0]
}
   b4948:	bd08      	pop	{r3, pc}
   b494a:	bf00      	nop
   b494c:	2003f400 	.word	0x2003f400
   b4950:	2003f404 	.word	0x2003f404
   b4954:	000b54f4 	.word	0x000b54f4
   b4958:	2003f400 	.word	0x2003f400
   b495c:	9a271c1e 	.word	0x9a271c1e

000b4960 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4960:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4962:	2300      	movs	r3, #0
   b4964:	9300      	str	r3, [sp, #0]
   b4966:	461a      	mov	r2, r3
   b4968:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b496c:	f7ff fe5c 	bl	b4628 <system_ctrl_set_result>
}
   b4970:	b003      	add	sp, #12
   b4972:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4978 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4978:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b497a:	8843      	ldrh	r3, [r0, #2]
   b497c:	2b0a      	cmp	r3, #10
   b497e:	d008      	beq.n	b4992 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4980:	2b50      	cmp	r3, #80	; 0x50
   b4982:	d10b      	bne.n	b499c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4984:	4b09      	ldr	r3, [pc, #36]	; (b49ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4986:	681b      	ldr	r3, [r3, #0]
   b4988:	b14b      	cbz	r3, b499e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b498a:	b003      	add	sp, #12
   b498c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4990:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4992:	f7ff ffe5 	bl	b4960 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4996:	b003      	add	sp, #12
   b4998:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b499c:	2300      	movs	r3, #0
   b499e:	9300      	str	r3, [sp, #0]
   b49a0:	461a      	mov	r2, r3
   b49a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b49a6:	f7ff fe3f 	bl	b4628 <system_ctrl_set_result>
}
   b49aa:	e7f4      	b.n	b4996 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b49ac:	2003e6f0 	.word	0x2003e6f0

000b49b0 <module_user_init_hook>:
{
   b49b0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b49b2:	4812      	ldr	r0, [pc, #72]	; (b49fc <module_user_init_hook+0x4c>)
   b49b4:	2100      	movs	r1, #0
   b49b6:	f7ff fec1 	bl	b473c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b49ba:	4b11      	ldr	r3, [pc, #68]	; (b4a00 <module_user_init_hook+0x50>)
   b49bc:	681a      	ldr	r2, [r3, #0]
   b49be:	4b11      	ldr	r3, [pc, #68]	; (b4a04 <module_user_init_hook+0x54>)
   b49c0:	429a      	cmp	r2, r3
   b49c2:	4b11      	ldr	r3, [pc, #68]	; (b4a08 <module_user_init_hook+0x58>)
   b49c4:	bf0c      	ite	eq
   b49c6:	2201      	moveq	r2, #1
   b49c8:	2200      	movne	r2, #0
   b49ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b49cc:	d001      	beq.n	b49d2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b49ce:	f7ff ffb1 	bl	b4934 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b49d2:	f7ff fd17 	bl	b4404 <HAL_RNG_GetRandomNumber>
   b49d6:	4604      	mov	r4, r0
    srand(seed);
   b49d8:	f000 fbb8 	bl	b514c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b49dc:	4b0b      	ldr	r3, [pc, #44]	; (b4a0c <module_user_init_hook+0x5c>)
   b49de:	b113      	cbz	r3, b49e6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b49e0:	4620      	mov	r0, r4
   b49e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b49e6:	2100      	movs	r1, #0
   b49e8:	4808      	ldr	r0, [pc, #32]	; (b4a0c <module_user_init_hook+0x5c>)
   b49ea:	f7ff fe87 	bl	b46fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b49ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b49f2:	4807      	ldr	r0, [pc, #28]	; (b4a10 <module_user_init_hook+0x60>)
   b49f4:	2100      	movs	r1, #0
   b49f6:	f7ff be0d 	b.w	b4614 <system_ctrl_set_app_request_handler>
   b49fa:	bf00      	nop
   b49fc:	000b48dd 	.word	0x000b48dd
   b4a00:	2003f400 	.word	0x2003f400
   b4a04:	9a271c1e 	.word	0x9a271c1e
   b4a08:	2003e6ec 	.word	0x2003e6ec
   b4a0c:	00000000 	.word	0x00000000
   b4a10:	000b4979 	.word	0x000b4979

000b4a14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4a14:	4770      	bx	lr

000b4a16 <_ZN9IPAddressD0Ev>:
   b4a16:	b510      	push	{r4, lr}
   b4a18:	2118      	movs	r1, #24
   b4a1a:	4604      	mov	r4, r0
   b4a1c:	f7ff fb3b 	bl	b4096 <_ZdlPvj>
   b4a20:	4620      	mov	r0, r4
   b4a22:	bd10      	pop	{r4, pc}

000b4a24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4a24:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4a26:	7d03      	ldrb	r3, [r0, #20]
   b4a28:	2b06      	cmp	r3, #6
{
   b4a2a:	b08d      	sub	sp, #52	; 0x34
   b4a2c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a2e:	f100 0704 	add.w	r7, r0, #4
   b4a32:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4a36:	d012      	beq.n	b4a5e <_ZNK9IPAddress7printToER5Print+0x3a>
   b4a38:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4a3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4a40:	220a      	movs	r2, #10
   b4a42:	4630      	mov	r0, r6
   b4a44:	f7ff ff0f 	bl	b4866 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4a48:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4a4a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4a4c:	d019      	beq.n	b4a82 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4a4e:	2c00      	cmp	r4, #0
   b4a50:	d0f4      	beq.n	b4a3c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4a52:	212e      	movs	r1, #46	; 0x2e
   b4a54:	4630      	mov	r0, r6
   b4a56:	f7ff ff03 	bl	b4860 <_ZN5Print5printEc>
   b4a5a:	4404      	add	r4, r0
   b4a5c:	e7ee      	b.n	b4a3c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a5e:	232f      	movs	r3, #47	; 0x2f
   b4a60:	466a      	mov	r2, sp
   b4a62:	4639      	mov	r1, r7
   b4a64:	200a      	movs	r0, #10
		buf[0] = 0;
   b4a66:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a6a:	f7ff fceb 	bl	b4444 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4a6e:	4668      	mov	r0, sp
   b4a70:	f000 fb9a 	bl	b51a8 <strlen>
   b4a74:	6833      	ldr	r3, [r6, #0]
   b4a76:	4602      	mov	r2, r0
   b4a78:	68db      	ldr	r3, [r3, #12]
   b4a7a:	4669      	mov	r1, sp
   b4a7c:	4630      	mov	r0, r6
   b4a7e:	4798      	blx	r3
   b4a80:	4604      	mov	r4, r0
    }
    return n;
}
   b4a82:	4620      	mov	r0, r4
   b4a84:	b00d      	add	sp, #52	; 0x34
   b4a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4a88 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4a88:	b510      	push	{r4, lr}
   b4a8a:	4b05      	ldr	r3, [pc, #20]	; (b4aa0 <_ZN9IPAddressC1Ev+0x18>)
   b4a8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4a8e:	2211      	movs	r2, #17
   b4a90:	f840 3b04 	str.w	r3, [r0], #4
   b4a94:	2100      	movs	r1, #0
   b4a96:	f000 fb51 	bl	b513c <memset>
}
   b4a9a:	4620      	mov	r0, r4
   b4a9c:	bd10      	pop	{r4, pc}
   b4a9e:	bf00      	nop
   b4aa0:	000b52fc 	.word	0x000b52fc

000b4aa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4aa4:	4603      	mov	r3, r0
   b4aa6:	4a07      	ldr	r2, [pc, #28]	; (b4ac4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4aa8:	b510      	push	{r4, lr}
   b4aaa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4aae:	f101 0210 	add.w	r2, r1, #16
   b4ab2:	f851 4b04 	ldr.w	r4, [r1], #4
   b4ab6:	f843 4b04 	str.w	r4, [r3], #4
   b4aba:	4291      	cmp	r1, r2
   b4abc:	d1f9      	bne.n	b4ab2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4abe:	780a      	ldrb	r2, [r1, #0]
   b4ac0:	701a      	strb	r2, [r3, #0]
}
   b4ac2:	bd10      	pop	{r4, pc}
   b4ac4:	000b52fc 	.word	0x000b52fc

000b4ac8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4ac8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4aca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4ace:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4ad2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4ad6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4ada:	2304      	movs	r3, #4
   b4adc:	6041      	str	r1, [r0, #4]
   b4ade:	7503      	strb	r3, [r0, #20]
}
   b4ae0:	bd10      	pop	{r4, pc}
	...

000b4ae4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4ae4:	b507      	push	{r0, r1, r2, lr}
   b4ae6:	4b06      	ldr	r3, [pc, #24]	; (b4b00 <_ZN9IPAddressC1EPKh+0x1c>)
   b4ae8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4aea:	78cb      	ldrb	r3, [r1, #3]
   b4aec:	9300      	str	r3, [sp, #0]
   b4aee:	788b      	ldrb	r3, [r1, #2]
   b4af0:	784a      	ldrb	r2, [r1, #1]
   b4af2:	7809      	ldrb	r1, [r1, #0]
   b4af4:	f7ff ffe8 	bl	b4ac8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4af8:	b003      	add	sp, #12
   b4afa:	f85d fb04 	ldr.w	pc, [sp], #4
   b4afe:	bf00      	nop
   b4b00:	000b52fc 	.word	0x000b52fc

000b4b04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4b04:	7441      	strb	r1, [r0, #17]
}
   b4b06:	4770      	bx	lr

000b4b08 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b08:	4770      	bx	lr

000b4b0a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4b0a:	4770      	bx	lr

000b4b0c <_ZN9USBSerial4readEv>:
{
   b4b0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4b0e:	2100      	movs	r1, #0
   b4b10:	7c00      	ldrb	r0, [r0, #16]
   b4b12:	f7ff fd57 	bl	b45c4 <HAL_USB_USART_Receive_Data>
}
   b4b16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b1a:	bd08      	pop	{r3, pc}

000b4b1c <_ZN9USBSerial4peekEv>:
{
   b4b1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4b1e:	2101      	movs	r1, #1
   b4b20:	7c00      	ldrb	r0, [r0, #16]
   b4b22:	f7ff fd4f 	bl	b45c4 <HAL_USB_USART_Receive_Data>
}
   b4b26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b2a:	bd08      	pop	{r3, pc}

000b4b2c <_ZN9USBSerial17availableForWriteEv>:
{
   b4b2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4b2e:	7c00      	ldrb	r0, [r0, #16]
   b4b30:	f7ff fd40 	bl	b45b4 <HAL_USB_USART_Available_Data_For_Write>
}
   b4b34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b38:	bd08      	pop	{r3, pc}

000b4b3a <_ZN9USBSerial9availableEv>:
{
   b4b3a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4b3c:	7c00      	ldrb	r0, [r0, #16]
   b4b3e:	f7ff fd31 	bl	b45a4 <HAL_USB_USART_Available_Data>
}
   b4b42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b46:	bd08      	pop	{r3, pc}

000b4b48 <_ZN9USBSerial5writeEh>:
{
   b4b48:	b513      	push	{r0, r1, r4, lr}
   b4b4a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b4c:	7c00      	ldrb	r0, [r0, #16]
{
   b4b4e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b50:	f7ff fd30 	bl	b45b4 <HAL_USB_USART_Available_Data_For_Write>
   b4b54:	2800      	cmp	r0, #0
   b4b56:	9901      	ldr	r1, [sp, #4]
   b4b58:	dc01      	bgt.n	b4b5e <_ZN9USBSerial5writeEh+0x16>
   b4b5a:	7c60      	ldrb	r0, [r4, #17]
   b4b5c:	b120      	cbz	r0, b4b68 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4b5e:	7c20      	ldrb	r0, [r4, #16]
   b4b60:	f7ff fd38 	bl	b45d4 <HAL_USB_USART_Send_Data>
   b4b64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4b68:	b002      	add	sp, #8
   b4b6a:	bd10      	pop	{r4, pc}

000b4b6c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4b6c:	7c00      	ldrb	r0, [r0, #16]
   b4b6e:	f7ff bd39 	b.w	b45e4 <HAL_USB_USART_Flush_Data>

000b4b72 <_ZN9USBSerialD0Ev>:
   b4b72:	b510      	push	{r4, lr}
   b4b74:	2114      	movs	r1, #20
   b4b76:	4604      	mov	r4, r0
   b4b78:	f7ff fa8d 	bl	b4096 <_ZdlPvj>
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	bd10      	pop	{r4, pc}

000b4b80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4b80:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b86:	4604      	mov	r4, r0
   b4b88:	4608      	mov	r0, r1
   b4b8a:	2100      	movs	r1, #0
   b4b8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4b90:	4b04      	ldr	r3, [pc, #16]	; (b4ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4b92:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4b94:	2301      	movs	r3, #1
  _serial = serial;
   b4b96:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4b98:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4b9a:	4611      	mov	r1, r2
   b4b9c:	f7ff fcfa 	bl	b4594 <HAL_USB_USART_Init>
}
   b4ba0:	4620      	mov	r0, r4
   b4ba2:	bd10      	pop	{r4, pc}
   b4ba4:	000b5310 	.word	0x000b5310

000b4ba8 <_Z19acquireSerialBufferv>:
{
   b4ba8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4baa:	2214      	movs	r2, #20
{
   b4bac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4bae:	2100      	movs	r1, #0
   b4bb0:	f000 fac4 	bl	b513c <memset>
}
   b4bb4:	4620      	mov	r0, r4
   b4bb6:	bd10      	pop	{r4, pc}

000b4bb8 <_Z16_fetch_usbserialv>:
{
   b4bb8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4bba:	4c0f      	ldr	r4, [pc, #60]	; (b4bf8 <_Z16_fetch_usbserialv+0x40>)
{
   b4bbc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4bbe:	a803      	add	r0, sp, #12
   b4bc0:	f7ff fff2 	bl	b4ba8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4bc4:	7821      	ldrb	r1, [r4, #0]
   b4bc6:	f3bf 8f5b 	dmb	ish
   b4bca:	f011 0101 	ands.w	r1, r1, #1
   b4bce:	d10f      	bne.n	b4bf0 <_Z16_fetch_usbserialv+0x38>
   b4bd0:	4620      	mov	r0, r4
   b4bd2:	9101      	str	r1, [sp, #4]
   b4bd4:	f7ff fa61 	bl	b409a <__cxa_guard_acquire>
   b4bd8:	9901      	ldr	r1, [sp, #4]
   b4bda:	b148      	cbz	r0, b4bf0 <_Z16_fetch_usbserialv+0x38>
   b4bdc:	aa03      	add	r2, sp, #12
   b4bde:	4807      	ldr	r0, [pc, #28]	; (b4bfc <_Z16_fetch_usbserialv+0x44>)
   b4be0:	f7ff ffce 	bl	b4b80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4be4:	4620      	mov	r0, r4
   b4be6:	f7ff fa5d 	bl	b40a4 <__cxa_guard_release>
   b4bea:	4805      	ldr	r0, [pc, #20]	; (b4c00 <_Z16_fetch_usbserialv+0x48>)
   b4bec:	f000 fa92 	bl	b5114 <atexit>
	return _usbserial;
}
   b4bf0:	4802      	ldr	r0, [pc, #8]	; (b4bfc <_Z16_fetch_usbserialv+0x44>)
   b4bf2:	b008      	add	sp, #32
   b4bf4:	bd10      	pop	{r4, pc}
   b4bf6:	bf00      	nop
   b4bf8:	2003e6f4 	.word	0x2003e6f4
   b4bfc:	2003e6f8 	.word	0x2003e6f8
   b4c00:	000b4b09 	.word	0x000b4b09

000b4c04 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4c04:	4770      	bx	lr

000b4c06 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4c06:	7441      	strb	r1, [r0, #17]
}
   b4c08:	4770      	bx	lr

000b4c0a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4c0a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4c0c:	7c00      	ldrb	r0, [r0, #16]
   b4c0e:	f7ff fc51 	bl	b44b4 <hal_usart_available_data_for_write>
}
   b4c12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c16:	bd08      	pop	{r3, pc}

000b4c18 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4c18:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4c1a:	7c00      	ldrb	r0, [r0, #16]
   b4c1c:	f7ff fc22 	bl	b4464 <hal_usart_available>
}
   b4c20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c24:	bd08      	pop	{r3, pc}

000b4c26 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4c26:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4c28:	7c00      	ldrb	r0, [r0, #16]
   b4c2a:	f7ff fc2b 	bl	b4484 <hal_usart_peek>
}
   b4c2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c32:	bd08      	pop	{r3, pc}

000b4c34 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4c34:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4c36:	7c00      	ldrb	r0, [r0, #16]
   b4c38:	f7ff fc1c 	bl	b4474 <hal_usart_read>
}
   b4c3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c40:	bd08      	pop	{r3, pc}

000b4c42 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4c42:	7c00      	ldrb	r0, [r0, #16]
   b4c44:	f7ff bc26 	b.w	b4494 <hal_usart_flush>

000b4c48 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c4a:	7c45      	ldrb	r5, [r0, #17]
{
   b4c4c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c4e:	b12d      	cbz	r5, b4c5c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4c50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4c52:	b003      	add	sp, #12
   b4c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4c58:	f7ff bbfc 	b.w	b4454 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c5c:	7c00      	ldrb	r0, [r0, #16]
   b4c5e:	9101      	str	r1, [sp, #4]
   b4c60:	f7ff fc28 	bl	b44b4 <hal_usart_available_data_for_write>
   b4c64:	2800      	cmp	r0, #0
   b4c66:	9901      	ldr	r1, [sp, #4]
   b4c68:	dcf2      	bgt.n	b4c50 <_ZN11USARTSerial5writeEh+0x8>
}
   b4c6a:	4628      	mov	r0, r5
   b4c6c:	b003      	add	sp, #12
   b4c6e:	bd30      	pop	{r4, r5, pc}

000b4c70 <_ZN11USARTSerialD0Ev>:
   b4c70:	b510      	push	{r4, lr}
   b4c72:	2114      	movs	r1, #20
   b4c74:	4604      	mov	r4, r0
   b4c76:	f7ff fa0e 	bl	b4096 <_ZdlPvj>
   b4c7a:	4620      	mov	r0, r4
   b4c7c:	bd10      	pop	{r4, pc}
	...

000b4c80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4c80:	b510      	push	{r4, lr}
   b4c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4c86:	4604      	mov	r4, r0
   b4c88:	4608      	mov	r0, r1
   b4c8a:	4611      	mov	r1, r2
   b4c8c:	2200      	movs	r2, #0
   b4c8e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4c92:	4b04      	ldr	r3, [pc, #16]	; (b4ca4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4c94:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4c96:	2301      	movs	r3, #1
  _serial = serial;
   b4c98:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c9a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4c9c:	f7ff fc12 	bl	b44c4 <hal_usart_init_ex>
}
   b4ca0:	4620      	mov	r0, r4
   b4ca2:	bd10      	pop	{r4, pc}
   b4ca4:	000b5340 	.word	0x000b5340

000b4ca8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4ca8:	4770      	bx	lr

000b4caa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4cac:	4606      	mov	r6, r0
   b4cae:	4615      	mov	r5, r2
   b4cb0:	460c      	mov	r4, r1
   b4cb2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4cb4:	42bc      	cmp	r4, r7
   b4cb6:	d006      	beq.n	b4cc6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4cb8:	6833      	ldr	r3, [r6, #0]
   b4cba:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4cbe:	689b      	ldr	r3, [r3, #8]
   b4cc0:	4630      	mov	r0, r6
   b4cc2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4cc4:	e7f6      	b.n	b4cb4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4cc6:	4628      	mov	r0, r5
   b4cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4cca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4cca:	7c00      	ldrb	r0, [r0, #16]
   b4ccc:	2200      	movs	r2, #0
   b4cce:	f7ff bc19 	b.w	b4504 <hal_i2c_write>

000b4cd2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4cd2:	7c00      	ldrb	r0, [r0, #16]
   b4cd4:	2100      	movs	r1, #0
   b4cd6:	f7ff bc1d 	b.w	b4514 <hal_i2c_available>

000b4cda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4cda:	7c00      	ldrb	r0, [r0, #16]
   b4cdc:	2100      	movs	r1, #0
   b4cde:	f7ff bc21 	b.w	b4524 <hal_i2c_read>

000b4ce2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4ce2:	7c00      	ldrb	r0, [r0, #16]
   b4ce4:	2100      	movs	r1, #0
   b4ce6:	f7ff bc25 	b.w	b4534 <hal_i2c_peek>

000b4cea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4cea:	7c00      	ldrb	r0, [r0, #16]
   b4cec:	2100      	movs	r1, #0
   b4cee:	f7ff bc29 	b.w	b4544 <hal_i2c_flush>

000b4cf2 <_ZN7TwoWireD0Ev>:
   b4cf2:	b510      	push	{r4, lr}
   b4cf4:	2114      	movs	r1, #20
   b4cf6:	4604      	mov	r4, r0
   b4cf8:	f7ff f9cd 	bl	b4096 <_ZdlPvj>
   b4cfc:	4620      	mov	r0, r4
   b4cfe:	bd10      	pop	{r4, pc}

000b4d00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d00:	b538      	push	{r3, r4, r5, lr}
   b4d02:	4604      	mov	r4, r0
   b4d04:	4615      	mov	r5, r2
   b4d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d0a:	2200      	movs	r2, #0
   b4d0c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4d10:	4b09      	ldr	r3, [pc, #36]	; (b4d38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4d12:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d14:	4608      	mov	r0, r1
   b4d16:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4d18:	4629      	mov	r1, r5
   b4d1a:	f7ff fc23 	bl	b4564 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4d1e:	30bf      	adds	r0, #191	; 0xbf
   b4d20:	d108      	bne.n	b4d34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4d22:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4d24:	07db      	lsls	r3, r3, #31
   b4d26:	d505      	bpl.n	b4d34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4d28:	6868      	ldr	r0, [r5, #4]
   b4d2a:	f7ff fcf7 	bl	b471c <free>
    free(conf.tx_buffer);
   b4d2e:	68e8      	ldr	r0, [r5, #12]
   b4d30:	f7ff fcf4 	bl	b471c <free>
}
   b4d34:	4620      	mov	r0, r4
   b4d36:	bd38      	pop	{r3, r4, r5, pc}
   b4d38:	000b5370 	.word	0x000b5370

000b4d3c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4d3c:	2300      	movs	r3, #0
   b4d3e:	7c00      	ldrb	r0, [r0, #16]
   b4d40:	461a      	mov	r2, r3
   b4d42:	4619      	mov	r1, r3
   b4d44:	f7ff bbc6 	b.w	b44d4 <hal_i2c_begin>

000b4d48 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b4d48:	7c00      	ldrb	r0, [r0, #16]
   b4d4a:	2200      	movs	r2, #0
   b4d4c:	f7ff bbca 	b.w	b44e4 <hal_i2c_begin_transmission>

000b4d50 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b4d50:	b2c9      	uxtb	r1, r1
   b4d52:	f7ff bff9 	b.w	b4d48 <_ZN7TwoWire17beginTransmissionEh>

000b4d56 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b4d56:	7c00      	ldrb	r0, [r0, #16]
   b4d58:	2200      	movs	r2, #0
   b4d5a:	f7ff bbcb 	b.w	b44f4 <hal_i2c_end_transmission>

000b4d5e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4d5e:	2200      	movs	r2, #0
   b4d60:	6840      	ldr	r0, [r0, #4]
   b4d62:	4611      	mov	r1, r2
   b4d64:	f7ff bc82 	b.w	b466c <network_ready>

000b4d68 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d68:	2200      	movs	r2, #0
   b4d6a:	6840      	ldr	r0, [r0, #4]
   b4d6c:	4611      	mov	r1, r2
   b4d6e:	f7ff bc9d 	b.w	b46ac <network_listening>

000b4d72 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d72:	2200      	movs	r2, #0
   b4d74:	6840      	ldr	r0, [r0, #4]
   b4d76:	4611      	mov	r1, r2
   b4d78:	f7ff bca8 	b.w	b46cc <network_get_listen_timeout>

000b4d7c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d7c:	6840      	ldr	r0, [r0, #4]
   b4d7e:	2200      	movs	r2, #0
   b4d80:	f7ff bc9c 	b.w	b46bc <network_set_listen_timeout>

000b4d84 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d84:	6840      	ldr	r0, [r0, #4]
   b4d86:	2200      	movs	r2, #0
   b4d88:	f081 0101 	eor.w	r1, r1, #1
   b4d8c:	f7ff bc86 	b.w	b469c <network_listen>

000b4d90 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d90:	2300      	movs	r3, #0
   b4d92:	6840      	ldr	r0, [r0, #4]
   b4d94:	461a      	mov	r2, r3
   b4d96:	4619      	mov	r1, r3
   b4d98:	f7ff bc78 	b.w	b468c <network_off>

000b4d9c <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d9c:	2300      	movs	r3, #0
   b4d9e:	6840      	ldr	r0, [r0, #4]
   b4da0:	461a      	mov	r2, r3
   b4da2:	4619      	mov	r1, r3
   b4da4:	f7ff bc6a 	b.w	b467c <network_on>

000b4da8 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4da8:	2200      	movs	r2, #0
   b4daa:	6840      	ldr	r0, [r0, #4]
   b4dac:	4611      	mov	r1, r2
   b4dae:	f7ff bc4d 	b.w	b464c <network_connecting>

000b4db2 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4db2:	6840      	ldr	r0, [r0, #4]
   b4db4:	2200      	movs	r2, #0
   b4db6:	2102      	movs	r1, #2
   b4db8:	f7ff bc50 	b.w	b465c <network_disconnect>

000b4dbc <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4dbc:	2300      	movs	r3, #0
   b4dbe:	6840      	ldr	r0, [r0, #4]
   b4dc0:	461a      	mov	r2, r3
   b4dc2:	f7ff bc3b 	b.w	b463c <network_connect>
	...

000b4dc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4dc8:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4dca:	2204      	movs	r2, #4
   b4dcc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4dce:	4a02      	ldr	r2, [pc, #8]	; (b4dd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4dd0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4dd2:	4770      	bx	lr
   b4dd4:	2003e70c 	.word	0x2003e70c
   b4dd8:	000b5398 	.word	0x000b5398

000b4ddc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4ddc:	2300      	movs	r3, #0
   b4dde:	6840      	ldr	r0, [r0, #4]
   b4de0:	461a      	mov	r2, r3
   b4de2:	f7ff bc2b 	b.w	b463c <network_connect>

000b4de6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4de6:	6840      	ldr	r0, [r0, #4]
   b4de8:	2200      	movs	r2, #0
   b4dea:	2102      	movs	r1, #2
   b4dec:	f7ff bc36 	b.w	b465c <network_disconnect>

000b4df0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4df0:	2200      	movs	r2, #0
   b4df2:	6840      	ldr	r0, [r0, #4]
   b4df4:	4611      	mov	r1, r2
   b4df6:	f7ff bc29 	b.w	b464c <network_connecting>

000b4dfa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4dfa:	2200      	movs	r2, #0
   b4dfc:	6840      	ldr	r0, [r0, #4]
   b4dfe:	4611      	mov	r1, r2
   b4e00:	f7ff bc34 	b.w	b466c <network_ready>

000b4e04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4e04:	2300      	movs	r3, #0
   b4e06:	6840      	ldr	r0, [r0, #4]
   b4e08:	461a      	mov	r2, r3
   b4e0a:	4619      	mov	r1, r3
   b4e0c:	f7ff bc36 	b.w	b467c <network_on>

000b4e10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4e10:	2300      	movs	r3, #0
   b4e12:	6840      	ldr	r0, [r0, #4]
   b4e14:	461a      	mov	r2, r3
   b4e16:	4619      	mov	r1, r3
   b4e18:	f7ff bc38 	b.w	b468c <network_off>

000b4e1c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4e1c:	6840      	ldr	r0, [r0, #4]
   b4e1e:	2100      	movs	r1, #0
   b4e20:	f7ff bc5c 	b.w	b46dc <network_is_on>

000b4e24 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4e24:	6840      	ldr	r0, [r0, #4]
   b4e26:	2100      	movs	r1, #0
   b4e28:	f7ff bc60 	b.w	b46ec <network_is_off>

000b4e2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4e2c:	6840      	ldr	r0, [r0, #4]
   b4e2e:	2200      	movs	r2, #0
   b4e30:	f081 0101 	eor.w	r1, r1, #1
   b4e34:	f7ff bc32 	b.w	b469c <network_listen>

000b4e38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4e38:	6840      	ldr	r0, [r0, #4]
   b4e3a:	2200      	movs	r2, #0
   b4e3c:	f7ff bc3e 	b.w	b46bc <network_set_listen_timeout>

000b4e40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4e40:	2200      	movs	r2, #0
   b4e42:	6840      	ldr	r0, [r0, #4]
   b4e44:	4611      	mov	r1, r2
   b4e46:	f7ff bc41 	b.w	b46cc <network_get_listen_timeout>

000b4e4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4e4a:	2200      	movs	r2, #0
   b4e4c:	6840      	ldr	r0, [r0, #4]
   b4e4e:	4611      	mov	r1, r2
   b4e50:	f7ff bc2c 	b.w	b46ac <network_listening>

000b4e54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4e58:	b095      	sub	sp, #84	; 0x54
   b4e5a:	4614      	mov	r4, r2
   b4e5c:	460d      	mov	r5, r1
   b4e5e:	4607      	mov	r7, r0
    IPAddress addr;
   b4e60:	f7ff fe12 	bl	b4a88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4e64:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4e66:	221c      	movs	r2, #28
   b4e68:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4e6a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4e6c:	f000 f966 	bl	b513c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4e70:	2340      	movs	r3, #64	; 0x40
   b4e72:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4e74:	4620      	mov	r0, r4
   b4e76:	466b      	mov	r3, sp
   b4e78:	aa0c      	add	r2, sp, #48	; 0x30
   b4e7a:	2100      	movs	r1, #0
   b4e7c:	f7ff faa2 	bl	b43c4 <netdb_getaddrinfo>
    if (!r) {
   b4e80:	4604      	mov	r4, r0
   b4e82:	2800      	cmp	r0, #0
   b4e84:	d14b      	bne.n	b4f1e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e86:	4602      	mov	r2, r0
   b4e88:	2101      	movs	r1, #1
   b4e8a:	6868      	ldr	r0, [r5, #4]
   b4e8c:	f7ff fbee 	bl	b466c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e90:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e92:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e94:	4622      	mov	r2, r4
   b4e96:	6868      	ldr	r0, [r5, #4]
   b4e98:	f7ff fbe8 	bl	b466c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e9c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e9e:	4681      	mov	r9, r0
        bool ok = false;
   b4ea0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ea2:	2e00      	cmp	r6, #0
   b4ea4:	d03b      	beq.n	b4f1e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4ea6:	2900      	cmp	r1, #0
   b4ea8:	d139      	bne.n	b4f1e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4eaa:	6873      	ldr	r3, [r6, #4]
   b4eac:	2b02      	cmp	r3, #2
   b4eae:	d003      	beq.n	b4eb8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4eb0:	2b0a      	cmp	r3, #10
   b4eb2:	d011      	beq.n	b4ed8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4eb4:	69f6      	ldr	r6, [r6, #28]
   b4eb6:	e7f4      	b.n	b4ea2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4eb8:	f1b8 0f00 	cmp.w	r8, #0
   b4ebc:	d0fa      	beq.n	b4eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4ebe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4ec0:	a806      	add	r0, sp, #24
   b4ec2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4ec4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4ec6:	f7ff fe0d 	bl	b4ae4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ecc:	1d3c      	adds	r4, r7, #4
   b4ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ed0:	682b      	ldr	r3, [r5, #0]
   b4ed2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4ed4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4ed6:	e7ed      	b.n	b4eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4ed8:	f1b9 0f00 	cmp.w	r9, #0
   b4edc:	d0ea      	beq.n	b4eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4ede:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4ee0:	2210      	movs	r2, #16
   b4ee2:	a801      	add	r0, sp, #4
   b4ee4:	f000 f92a 	bl	b513c <memset>
                    a.v = 6;
   b4ee8:	2306      	movs	r3, #6
   b4eea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4eee:	ad01      	add	r5, sp, #4
   b4ef0:	f104 0308 	add.w	r3, r4, #8
   b4ef4:	3418      	adds	r4, #24
   b4ef6:	6818      	ldr	r0, [r3, #0]
   b4ef8:	6859      	ldr	r1, [r3, #4]
   b4efa:	462a      	mov	r2, r5
   b4efc:	c203      	stmia	r2!, {r0, r1}
   b4efe:	3308      	adds	r3, #8
   b4f00:	42a3      	cmp	r3, r4
   b4f02:	4615      	mov	r5, r2
   b4f04:	d1f7      	bne.n	b4ef6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4f06:	a901      	add	r1, sp, #4
   b4f08:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4f0a:	ad07      	add	r5, sp, #28
   b4f0c:	f7ff fdca 	bl	b4aa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f12:	1d3c      	adds	r4, r7, #4
   b4f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f16:	682b      	ldr	r3, [r5, #0]
   b4f18:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4f1a:	4649      	mov	r1, r9
   b4f1c:	e7ca      	b.n	b4eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4f1e:	9800      	ldr	r0, [sp, #0]
   b4f20:	f7ff fa48 	bl	b43b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4f24:	4638      	mov	r0, r7
   b4f26:	b015      	add	sp, #84	; 0x54
   b4f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4f2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4f2c:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4f2e:	4a03      	ldr	r2, [pc, #12]	; (b4f3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4f30:	601a      	str	r2, [r3, #0]
   b4f32:	2200      	movs	r2, #0
   b4f34:	605a      	str	r2, [r3, #4]

} // spark
   b4f36:	4770      	bx	lr
   b4f38:	2003e714 	.word	0x2003e714
   b4f3c:	000b53d4 	.word	0x000b53d4

000b4f40 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4f40:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4f42:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4f44:	d902      	bls.n	b4f4c <pinAvailable+0xc>
    return false;
   b4f46:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4f48:	b002      	add	sp, #8
   b4f4a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4f4c:	f1a0 030b 	sub.w	r3, r0, #11
   b4f50:	2b02      	cmp	r3, #2
   b4f52:	d81a      	bhi.n	b4f8a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4f54:	4c17      	ldr	r4, [pc, #92]	; (b4fb4 <pinAvailable+0x74>)
   b4f56:	7821      	ldrb	r1, [r4, #0]
   b4f58:	f3bf 8f5b 	dmb	ish
   b4f5c:	f011 0101 	ands.w	r1, r1, #1
   b4f60:	d10b      	bne.n	b4f7a <pinAvailable+0x3a>
   b4f62:	4620      	mov	r0, r4
   b4f64:	9101      	str	r1, [sp, #4]
   b4f66:	f7ff f898 	bl	b409a <__cxa_guard_acquire>
   b4f6a:	9901      	ldr	r1, [sp, #4]
   b4f6c:	b128      	cbz	r0, b4f7a <pinAvailable+0x3a>
   b4f6e:	4812      	ldr	r0, [pc, #72]	; (b4fb8 <pinAvailable+0x78>)
   b4f70:	f7ff fc2a 	bl	b47c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4f74:	4620      	mov	r0, r4
   b4f76:	f7ff f895 	bl	b40a4 <__cxa_guard_release>
   b4f7a:	4b0f      	ldr	r3, [pc, #60]	; (b4fb8 <pinAvailable+0x78>)
   b4f7c:	7818      	ldrb	r0, [r3, #0]
   b4f7e:	f7ff fb01 	bl	b4584 <hal_spi_is_enabled>
   b4f82:	2800      	cmp	r0, #0
   b4f84:	d1df      	bne.n	b4f46 <pinAvailable+0x6>
  return true; // 'pin' is available
   b4f86:	2001      	movs	r0, #1
   b4f88:	e7de      	b.n	b4f48 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4f8a:	2801      	cmp	r0, #1
   b4f8c:	d809      	bhi.n	b4fa2 <pinAvailable+0x62>
   b4f8e:	f000 f89b 	bl	b50c8 <_Z19__fetch_global_Wirev>
   b4f92:	2100      	movs	r1, #0
   b4f94:	7c00      	ldrb	r0, [r0, #16]
   b4f96:	f7ff fadd 	bl	b4554 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4f9a:	f080 0001 	eor.w	r0, r0, #1
   b4f9e:	b2c0      	uxtb	r0, r0
   b4fa0:	e7d2      	b.n	b4f48 <pinAvailable+0x8>
   b4fa2:	3809      	subs	r0, #9
   b4fa4:	2801      	cmp	r0, #1
   b4fa6:	d8ee      	bhi.n	b4f86 <pinAvailable+0x46>
   b4fa8:	f000 f84e 	bl	b5048 <_Z22__fetch_global_Serial1v>
   b4fac:	7c00      	ldrb	r0, [r0, #16]
   b4fae:	f7ff fa79 	bl	b44a4 <hal_usart_is_enabled>
   b4fb2:	e7f2      	b.n	b4f9a <pinAvailable+0x5a>
   b4fb4:	2003e71c 	.word	0x2003e71c
   b4fb8:	2003e720 	.word	0x2003e720

000b4fbc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4fbc:	2823      	cmp	r0, #35	; 0x23
{
   b4fbe:	b538      	push	{r3, r4, r5, lr}
   b4fc0:	4604      	mov	r4, r0
   b4fc2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4fc4:	d80a      	bhi.n	b4fdc <pinMode+0x20>
   b4fc6:	29ff      	cmp	r1, #255	; 0xff
   b4fc8:	d008      	beq.n	b4fdc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b4fca:	f7ff ffb9 	bl	b4f40 <pinAvailable>
   b4fce:	b128      	cbz	r0, b4fdc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b4fd0:	4629      	mov	r1, r5
   b4fd2:	4620      	mov	r0, r4
}
   b4fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b4fd8:	f7ff b9fc 	b.w	b43d4 <HAL_Pin_Mode>
}
   b4fdc:	bd38      	pop	{r3, r4, r5, pc}

000b4fde <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b4fde:	b538      	push	{r3, r4, r5, lr}
   b4fe0:	4604      	mov	r4, r0
   b4fe2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b4fe4:	f7ff f9fe 	bl	b43e4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b4fe8:	28ff      	cmp	r0, #255	; 0xff
   b4fea:	d010      	beq.n	b500e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b4fec:	2806      	cmp	r0, #6
   b4fee:	d804      	bhi.n	b4ffa <digitalWrite+0x1c>
   b4ff0:	234d      	movs	r3, #77	; 0x4d
   b4ff2:	fa23 f000 	lsr.w	r0, r3, r0
   b4ff6:	07c3      	lsls	r3, r0, #31
   b4ff8:	d409      	bmi.n	b500e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b4ffa:	4620      	mov	r0, r4
   b4ffc:	f7ff ffa0 	bl	b4f40 <pinAvailable>
   b5000:	b128      	cbz	r0, b500e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5002:	4629      	mov	r1, r5
   b5004:	4620      	mov	r0, r4
}
   b5006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b500a:	f7ff b9f3 	b.w	b43f4 <HAL_GPIO_Write>
}
   b500e:	bd38      	pop	{r3, r4, r5, pc}

000b5010 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5010:	4770      	bx	lr
	...

000b5014 <_Z20acquireSerial1Bufferv>:
{
   b5014:	b538      	push	{r3, r4, r5, lr}
   b5016:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5018:	2514      	movs	r5, #20
   b501a:	462a      	mov	r2, r5
   b501c:	2100      	movs	r1, #0
   b501e:	f000 f88d 	bl	b513c <memset>
   b5022:	8025      	strh	r5, [r4, #0]
   b5024:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5026:	4907      	ldr	r1, [pc, #28]	; (b5044 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5028:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b502a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b502c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b502e:	f000 f86f 	bl	b5110 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5032:	4904      	ldr	r1, [pc, #16]	; (b5044 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5034:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5036:	4628      	mov	r0, r5
   b5038:	f000 f86a 	bl	b5110 <_ZnajRKSt9nothrow_t>
    };
   b503c:	60e0      	str	r0, [r4, #12]
}
   b503e:	4620      	mov	r0, r4
   b5040:	bd38      	pop	{r3, r4, r5, pc}
   b5042:	bf00      	nop
   b5044:	000b5408 	.word	0x000b5408

000b5048 <_Z22__fetch_global_Serial1v>:
{
   b5048:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b504a:	4d0e      	ldr	r5, [pc, #56]	; (b5084 <_Z22__fetch_global_Serial1v+0x3c>)
   b504c:	7829      	ldrb	r1, [r5, #0]
   b504e:	f3bf 8f5b 	dmb	ish
   b5052:	f011 0401 	ands.w	r4, r1, #1
{
   b5056:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5058:	d111      	bne.n	b507e <_Z22__fetch_global_Serial1v+0x36>
   b505a:	4628      	mov	r0, r5
   b505c:	f7ff f81d 	bl	b409a <__cxa_guard_acquire>
   b5060:	b168      	cbz	r0, b507e <_Z22__fetch_global_Serial1v+0x36>
   b5062:	a801      	add	r0, sp, #4
   b5064:	f7ff ffd6 	bl	b5014 <_Z20acquireSerial1Bufferv>
   b5068:	aa01      	add	r2, sp, #4
   b506a:	4621      	mov	r1, r4
   b506c:	4806      	ldr	r0, [pc, #24]	; (b5088 <_Z22__fetch_global_Serial1v+0x40>)
   b506e:	f7ff fe07 	bl	b4c80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5072:	4628      	mov	r0, r5
   b5074:	f7ff f816 	bl	b40a4 <__cxa_guard_release>
   b5078:	4804      	ldr	r0, [pc, #16]	; (b508c <_Z22__fetch_global_Serial1v+0x44>)
   b507a:	f000 f84b 	bl	b5114 <atexit>
    return serial1;
}
   b507e:	4802      	ldr	r0, [pc, #8]	; (b5088 <_Z22__fetch_global_Serial1v+0x40>)
   b5080:	b007      	add	sp, #28
   b5082:	bd30      	pop	{r4, r5, pc}
   b5084:	2003e728 	.word	0x2003e728
   b5088:	2003e72c 	.word	0x2003e72c
   b508c:	000b5011 	.word	0x000b5011

000b5090 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5090:	4770      	bx	lr
	...

000b5094 <_Z17acquireWireBufferv>:
{
   b5094:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5096:	4b0a      	ldr	r3, [pc, #40]	; (b50c0 <_Z17acquireWireBufferv+0x2c>)
   b5098:	6003      	str	r3, [r0, #0]
   b509a:	2301      	movs	r3, #1
{
   b509c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b509e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b50a0:	4908      	ldr	r1, [pc, #32]	; (b50c4 <_Z17acquireWireBufferv+0x30>)
   b50a2:	2020      	movs	r0, #32
   b50a4:	f000 f834 	bl	b5110 <_ZnajRKSt9nothrow_t>
	};
   b50a8:	2520      	movs	r5, #32
   b50aa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b50ac:	4905      	ldr	r1, [pc, #20]	; (b50c4 <_Z17acquireWireBufferv+0x30>)
	};
   b50ae:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b50b0:	4628      	mov	r0, r5
   b50b2:	f000 f82d 	bl	b5110 <_ZnajRKSt9nothrow_t>
	};
   b50b6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b50ba:	4620      	mov	r0, r4
   b50bc:	bd38      	pop	{r3, r4, r5, pc}
   b50be:	bf00      	nop
   b50c0:	00010018 	.word	0x00010018
   b50c4:	000b5408 	.word	0x000b5408

000b50c8 <_Z19__fetch_global_Wirev>:
{
   b50c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b50ca:	4d0e      	ldr	r5, [pc, #56]	; (b5104 <_Z19__fetch_global_Wirev+0x3c>)
   b50cc:	7829      	ldrb	r1, [r5, #0]
   b50ce:	f3bf 8f5b 	dmb	ish
   b50d2:	f011 0401 	ands.w	r4, r1, #1
{
   b50d6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b50d8:	d111      	bne.n	b50fe <_Z19__fetch_global_Wirev+0x36>
   b50da:	4628      	mov	r0, r5
   b50dc:	f7fe ffdd 	bl	b409a <__cxa_guard_acquire>
   b50e0:	b168      	cbz	r0, b50fe <_Z19__fetch_global_Wirev+0x36>
   b50e2:	4668      	mov	r0, sp
   b50e4:	f7ff ffd6 	bl	b5094 <_Z17acquireWireBufferv>
   b50e8:	466a      	mov	r2, sp
   b50ea:	4621      	mov	r1, r4
   b50ec:	4806      	ldr	r0, [pc, #24]	; (b5108 <_Z19__fetch_global_Wirev+0x40>)
   b50ee:	f7ff fe07 	bl	b4d00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b50f2:	4628      	mov	r0, r5
   b50f4:	f7fe ffd6 	bl	b40a4 <__cxa_guard_release>
   b50f8:	4804      	ldr	r0, [pc, #16]	; (b510c <_Z19__fetch_global_Wirev+0x44>)
   b50fa:	f000 f80b 	bl	b5114 <atexit>
	return wire;
}
   b50fe:	4802      	ldr	r0, [pc, #8]	; (b5108 <_Z19__fetch_global_Wirev+0x40>)
   b5100:	b007      	add	sp, #28
   b5102:	bd30      	pop	{r4, r5, pc}
   b5104:	2003e744 	.word	0x2003e744
   b5108:	2003e748 	.word	0x2003e748
   b510c:	000b5091 	.word	0x000b5091

000b5110 <_ZnajRKSt9nothrow_t>:
   b5110:	f7fe bfbf 	b.w	b4092 <_Znaj>

000b5114 <atexit>:
   b5114:	2300      	movs	r3, #0
   b5116:	4601      	mov	r1, r0
   b5118:	461a      	mov	r2, r3
   b511a:	4618      	mov	r0, r3
   b511c:	f000 b84c 	b.w	b51b8 <__register_exitproc>

000b5120 <memcpy>:
   b5120:	440a      	add	r2, r1
   b5122:	4291      	cmp	r1, r2
   b5124:	f100 33ff 	add.w	r3, r0, #4294967295
   b5128:	d100      	bne.n	b512c <memcpy+0xc>
   b512a:	4770      	bx	lr
   b512c:	b510      	push	{r4, lr}
   b512e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5132:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5136:	4291      	cmp	r1, r2
   b5138:	d1f9      	bne.n	b512e <memcpy+0xe>
   b513a:	bd10      	pop	{r4, pc}

000b513c <memset>:
   b513c:	4402      	add	r2, r0
   b513e:	4603      	mov	r3, r0
   b5140:	4293      	cmp	r3, r2
   b5142:	d100      	bne.n	b5146 <memset+0xa>
   b5144:	4770      	bx	lr
   b5146:	f803 1b01 	strb.w	r1, [r3], #1
   b514a:	e7f9      	b.n	b5140 <memset+0x4>

000b514c <srand>:
   b514c:	b538      	push	{r3, r4, r5, lr}
   b514e:	4b10      	ldr	r3, [pc, #64]	; (b5190 <srand+0x44>)
   b5150:	681d      	ldr	r5, [r3, #0]
   b5152:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5154:	4604      	mov	r4, r0
   b5156:	b9b3      	cbnz	r3, b5186 <srand+0x3a>
   b5158:	2018      	movs	r0, #24
   b515a:	f7ff fad7 	bl	b470c <malloc>
   b515e:	4602      	mov	r2, r0
   b5160:	63a8      	str	r0, [r5, #56]	; 0x38
   b5162:	b920      	cbnz	r0, b516e <srand+0x22>
   b5164:	4b0b      	ldr	r3, [pc, #44]	; (b5194 <srand+0x48>)
   b5166:	480c      	ldr	r0, [pc, #48]	; (b5198 <srand+0x4c>)
   b5168:	2142      	movs	r1, #66	; 0x42
   b516a:	f7ff fadf 	bl	b472c <__assert_func>
   b516e:	490b      	ldr	r1, [pc, #44]	; (b519c <srand+0x50>)
   b5170:	4b0b      	ldr	r3, [pc, #44]	; (b51a0 <srand+0x54>)
   b5172:	e9c0 1300 	strd	r1, r3, [r0]
   b5176:	4b0b      	ldr	r3, [pc, #44]	; (b51a4 <srand+0x58>)
   b5178:	6083      	str	r3, [r0, #8]
   b517a:	230b      	movs	r3, #11
   b517c:	8183      	strh	r3, [r0, #12]
   b517e:	2100      	movs	r1, #0
   b5180:	2001      	movs	r0, #1
   b5182:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5186:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5188:	2200      	movs	r2, #0
   b518a:	611c      	str	r4, [r3, #16]
   b518c:	615a      	str	r2, [r3, #20]
   b518e:	bd38      	pop	{r3, r4, r5, pc}
   b5190:	2003e624 	.word	0x2003e624
   b5194:	000b5409 	.word	0x000b5409
   b5198:	000b5420 	.word	0x000b5420
   b519c:	abcd330e 	.word	0xabcd330e
   b51a0:	e66d1234 	.word	0xe66d1234
   b51a4:	0005deec 	.word	0x0005deec

000b51a8 <strlen>:
   b51a8:	4603      	mov	r3, r0
   b51aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b51ae:	2a00      	cmp	r2, #0
   b51b0:	d1fb      	bne.n	b51aa <strlen+0x2>
   b51b2:	1a18      	subs	r0, r3, r0
   b51b4:	3801      	subs	r0, #1
   b51b6:	4770      	bx	lr

000b51b8 <__register_exitproc>:
   b51b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b51bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5278 <__register_exitproc+0xc0>
   b51c0:	4606      	mov	r6, r0
   b51c2:	f8d8 0000 	ldr.w	r0, [r8]
   b51c6:	461f      	mov	r7, r3
   b51c8:	460d      	mov	r5, r1
   b51ca:	4691      	mov	r9, r2
   b51cc:	f000 f856 	bl	b527c <__retarget_lock_acquire_recursive>
   b51d0:	4b25      	ldr	r3, [pc, #148]	; (b5268 <__register_exitproc+0xb0>)
   b51d2:	681c      	ldr	r4, [r3, #0]
   b51d4:	b934      	cbnz	r4, b51e4 <__register_exitproc+0x2c>
   b51d6:	4c25      	ldr	r4, [pc, #148]	; (b526c <__register_exitproc+0xb4>)
   b51d8:	601c      	str	r4, [r3, #0]
   b51da:	4b25      	ldr	r3, [pc, #148]	; (b5270 <__register_exitproc+0xb8>)
   b51dc:	b113      	cbz	r3, b51e4 <__register_exitproc+0x2c>
   b51de:	681b      	ldr	r3, [r3, #0]
   b51e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b51e4:	6863      	ldr	r3, [r4, #4]
   b51e6:	2b1f      	cmp	r3, #31
   b51e8:	dd07      	ble.n	b51fa <__register_exitproc+0x42>
   b51ea:	f8d8 0000 	ldr.w	r0, [r8]
   b51ee:	f000 f847 	bl	b5280 <__retarget_lock_release_recursive>
   b51f2:	f04f 30ff 	mov.w	r0, #4294967295
   b51f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b51fa:	b34e      	cbz	r6, b5250 <__register_exitproc+0x98>
   b51fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5200:	b988      	cbnz	r0, b5226 <__register_exitproc+0x6e>
   b5202:	4b1c      	ldr	r3, [pc, #112]	; (b5274 <__register_exitproc+0xbc>)
   b5204:	b923      	cbnz	r3, b5210 <__register_exitproc+0x58>
   b5206:	f8d8 0000 	ldr.w	r0, [r8]
   b520a:	f000 f838 	bl	b527e <__retarget_lock_release>
   b520e:	e7f0      	b.n	b51f2 <__register_exitproc+0x3a>
   b5210:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5214:	f7ff fa7a 	bl	b470c <malloc>
   b5218:	2800      	cmp	r0, #0
   b521a:	d0f4      	beq.n	b5206 <__register_exitproc+0x4e>
   b521c:	2300      	movs	r3, #0
   b521e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5222:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5226:	6863      	ldr	r3, [r4, #4]
   b5228:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b522c:	2201      	movs	r2, #1
   b522e:	409a      	lsls	r2, r3
   b5230:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5234:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5238:	4313      	orrs	r3, r2
   b523a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b523e:	2e02      	cmp	r6, #2
   b5240:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5244:	bf02      	ittt	eq
   b5246:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b524a:	4313      	orreq	r3, r2
   b524c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5250:	6863      	ldr	r3, [r4, #4]
   b5252:	f8d8 0000 	ldr.w	r0, [r8]
   b5256:	1c5a      	adds	r2, r3, #1
   b5258:	3302      	adds	r3, #2
   b525a:	6062      	str	r2, [r4, #4]
   b525c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5260:	f000 f80e 	bl	b5280 <__retarget_lock_release_recursive>
   b5264:	2000      	movs	r0, #0
   b5266:	e7c6      	b.n	b51f6 <__register_exitproc+0x3e>
   b5268:	2003e7e8 	.word	0x2003e7e8
   b526c:	2003e75c 	.word	0x2003e75c
   b5270:	00000000 	.word	0x00000000
   b5274:	000b470d 	.word	0x000b470d
   b5278:	2003e688 	.word	0x2003e688

000b527c <__retarget_lock_acquire_recursive>:
   b527c:	4770      	bx	lr

000b527e <__retarget_lock_release>:
   b527e:	4770      	bx	lr

000b5280 <__retarget_lock_release_recursive>:
   b5280:	4770      	bx	lr

000b5282 <link_code_end>:
	...

000b5284 <dynalib_user>:
   b5284:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5294:	0000 0000                                   ....

000b5298 <_ZTVN5spark13EthernetClassE>:
	...
   b52a0:	47ab 000b 47a1 000b 4797 000b 478d 000b     .G...G...G...G..
   b52b0:	4781 000b 4775 000b 4e1d 000b 4e25 000b     .G..uG...N..%N..
   b52c0:	4769 000b 4761 000b 4757 000b 474d 000b     iG..aG..WG..MG..
   b52d0:	4e55 000b 7061 0070 5925 252d 2d6d 6425     UN..app.%Y-%m-%d
   b52e0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b52f0:	6d69 0065                                   ime.

000b52f4 <_ZTV9IPAddress>:
	...
   b52fc:	4a25 000b 4a15 000b 4a17 000b               %J...J...J..

000b5308 <_ZTV9USBSerial>:
	...
   b5310:	4b0b 000b 4b73 000b 4b49 000b 4811 000b     .K..sK..IK...H..
   b5320:	4b3b 000b 4b0d 000b 4b1d 000b 4b6d 000b     ;K...K...K..mK..
   b5330:	4b2d 000b 4b05 000b                         -K...K..

000b5338 <_ZTV11USARTSerial>:
	...
   b5340:	4c05 000b 4c71 000b 4c49 000b 4811 000b     .L..qL..IL...H..
   b5350:	4c19 000b 4c35 000b 4c27 000b 4c43 000b     .L..5L..'L..CL..
   b5360:	4c07 000b 4c0b 000b                         .L...L..

000b5368 <_ZTV7TwoWire>:
	...
   b5370:	4ca9 000b 4cf3 000b 4ccb 000b 4cab 000b     .L...L...L...L..
   b5380:	4cd3 000b 4cdb 000b 4ce3 000b 4ceb 000b     .L...L...L...L..

000b5390 <_ZTVN5spark9WiFiClassE>:
	...
   b5398:	4dbd 000b 4db3 000b 4da9 000b 4d5f 000b     .M...M...M.._M..
   b53a8:	4d9d 000b 4d91 000b 4e1d 000b 4e25 000b     .M...M...N..%N..
   b53b8:	4d85 000b 4d7d 000b 4d73 000b 4d69 000b     .M..}M..sM..iM..
   b53c8:	4e55 000b                                   UN..

000b53cc <_ZTVN5spark12NetworkClassE>:
	...
   b53d4:	4ddd 000b 4de7 000b 4df1 000b 4dfb 000b     .M...M...M...M..
   b53e4:	4e05 000b 4e11 000b 4e1d 000b 4e25 000b     .N...N...N..%N..
   b53f4:	4e2d 000b 4e39 000b 4e41 000b 4e4b 000b     -N..9N..AN..KN..
   b5404:	4e55 000b                                   UN..

000b5408 <_ZSt7nothrow>:
   b5408:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5418:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5428:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5438:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5448:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5458:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5468:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5478:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5488:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5498:	646e 632e                                    nd.c.

000b549d <link_const_variable_data_end>:
   b549d:	00          	.byte	0x00
	...

000b54a0 <link_constructors_location>:
   b54a0:	000b4129 	.word	0x000b4129
   b54a4:	000b47b5 	.word	0x000b47b5
   b54a8:	000b47dd 	.word	0x000b47dd
   b54ac:	000b4801 	.word	0x000b4801
   b54b0:	000b48a5 	.word	0x000b48a5
   b54b4:	000b48b5 	.word	0x000b48b5
   b54b8:	000b48d1 	.word	0x000b48d1
   b54bc:	000b4dc9 	.word	0x000b4dc9
   b54c0:	000b4f2d 	.word	0x000b4f2d

000b54c4 <link_constructors_end>:
	...
